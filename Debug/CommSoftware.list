
CommSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003548  08003548  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003550  08003550  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000068  080035c0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080035c0  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009190  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018d9  00000000  00000000  00029220  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000960  00000000  00000000  0002ab00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  0002b460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000114a9  00000000  00000000  0002bce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007dcb  00000000  00000000  0003d191  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000681eb  00000000  00000000  00044f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ad147  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023b4  00000000  00000000  000ad1c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003488 	.word	0x08003488

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003488 	.word	0x08003488

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8cf 	bl	8000420 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ca 	bl	8000420 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzsi2>:
 80003e4:	211c      	movs	r1, #28
 80003e6:	2301      	movs	r3, #1
 80003e8:	041b      	lsls	r3, r3, #16
 80003ea:	4298      	cmp	r0, r3
 80003ec:	d301      	bcc.n	80003f2 <__clzsi2+0xe>
 80003ee:	0c00      	lsrs	r0, r0, #16
 80003f0:	3910      	subs	r1, #16
 80003f2:	0a1b      	lsrs	r3, r3, #8
 80003f4:	4298      	cmp	r0, r3
 80003f6:	d301      	bcc.n	80003fc <__clzsi2+0x18>
 80003f8:	0a00      	lsrs	r0, r0, #8
 80003fa:	3908      	subs	r1, #8
 80003fc:	091b      	lsrs	r3, r3, #4
 80003fe:	4298      	cmp	r0, r3
 8000400:	d301      	bcc.n	8000406 <__clzsi2+0x22>
 8000402:	0900      	lsrs	r0, r0, #4
 8000404:	3904      	subs	r1, #4
 8000406:	a202      	add	r2, pc, #8	; (adr r2, 8000410 <__clzsi2+0x2c>)
 8000408:	5c10      	ldrb	r0, [r2, r0]
 800040a:	1840      	adds	r0, r0, r1
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	02020304 	.word	0x02020304
 8000414:	01010101 	.word	0x01010101
	...

08000420 <__clzdi2>:
 8000420:	b510      	push	{r4, lr}
 8000422:	2900      	cmp	r1, #0
 8000424:	d103      	bne.n	800042e <__clzdi2+0xe>
 8000426:	f7ff ffdd 	bl	80003e4 <__clzsi2>
 800042a:	3020      	adds	r0, #32
 800042c:	e002      	b.n	8000434 <__clzdi2+0x14>
 800042e:	1c08      	adds	r0, r1, #0
 8000430:	f7ff ffd8 	bl	80003e4 <__clzsi2>
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000440:	230f      	movs	r3, #15
 8000442:	18fb      	adds	r3, r7, r3
 8000444:	2200      	movs	r2, #0
 8000446:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_InitTick+0x50>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	23fa      	movs	r3, #250	; 0xfa
 800044e:	0099      	lsls	r1, r3, #2
 8000450:	0010      	movs	r0, r2
 8000452:	f7ff fe59 	bl	8000108 <__udivsi3>
 8000456:	0003      	movs	r3, r0
 8000458:	0018      	movs	r0, r3
 800045a:	f000 f8f2 	bl	8000642 <HAL_SYSTICK_Config>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d004      	beq.n	800046c <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000462:	230f      	movs	r3, #15
 8000464:	18fb      	adds	r3, r7, r3
 8000466:	2201      	movs	r2, #1
 8000468:	701a      	strb	r2, [r3, #0]
 800046a:	e006      	b.n	800047a <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800046c:	6879      	ldr	r1, [r7, #4]
 800046e:	2301      	movs	r3, #1
 8000470:	425b      	negs	r3, r3
 8000472:	2200      	movs	r2, #0
 8000474:	0018      	movs	r0, r3
 8000476:	f000 f8cf 	bl	8000618 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800047a:	230f      	movs	r3, #15
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	781b      	ldrb	r3, [r3, #0]
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000000 	.word	0x20000000

0800048c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  uwTick++;
 8000490:	4b03      	ldr	r3, [pc, #12]	; (80004a0 <HAL_IncTick+0x14>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	1c5a      	adds	r2, r3, #1
 8000496:	4b02      	ldr	r3, [pc, #8]	; (80004a0 <HAL_IncTick+0x14>)
 8000498:	601a      	str	r2, [r3, #0]
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000090 	.word	0x20000090

080004a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  return uwTick;
 80004a8:	4b02      	ldr	r3, [pc, #8]	; (80004b4 <HAL_GetTick+0x10>)
 80004aa:	681b      	ldr	r3, [r3, #0]
}
 80004ac:	0018      	movs	r0, r3
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	20000090 	.word	0x20000090

080004b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004c0:	f7ff fff0 	bl	80004a4 <HAL_GetTick>
 80004c4:	0003      	movs	r3, r0
 80004c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	3301      	adds	r3, #1
 80004d0:	d002      	beq.n	80004d8 <HAL_Delay+0x20>
  {
    wait++;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3301      	adds	r3, #1
 80004d6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	f7ff ffe3 	bl	80004a4 <HAL_GetTick>
 80004de:	0002      	movs	r2, r0
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	68fa      	ldr	r2, [r7, #12]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d8f7      	bhi.n	80004da <HAL_Delay+0x22>
  {
  }
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b004      	add	sp, #16
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	0002      	movs	r2, r0
 80004fc:	6039      	str	r1, [r7, #0]
 80004fe:	1dfb      	adds	r3, r7, #7
 8000500:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b7f      	cmp	r3, #127	; 0x7f
 8000508:	d932      	bls.n	8000570 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800050a:	4a2f      	ldr	r2, [pc, #188]	; (80005c8 <NVIC_SetPriority+0xd4>)
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	0019      	movs	r1, r3
 8000512:	230f      	movs	r3, #15
 8000514:	400b      	ands	r3, r1
 8000516:	3b08      	subs	r3, #8
 8000518:	089b      	lsrs	r3, r3, #2
 800051a:	3306      	adds	r3, #6
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	18d3      	adds	r3, r2, r3
 8000520:	3304      	adds	r3, #4
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	1dfa      	adds	r2, r7, #7
 8000526:	7812      	ldrb	r2, [r2, #0]
 8000528:	0011      	movs	r1, r2
 800052a:	2203      	movs	r2, #3
 800052c:	400a      	ands	r2, r1
 800052e:	00d2      	lsls	r2, r2, #3
 8000530:	21ff      	movs	r1, #255	; 0xff
 8000532:	4091      	lsls	r1, r2
 8000534:	000a      	movs	r2, r1
 8000536:	43d2      	mvns	r2, r2
 8000538:	401a      	ands	r2, r3
 800053a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	019b      	lsls	r3, r3, #6
 8000540:	22ff      	movs	r2, #255	; 0xff
 8000542:	401a      	ands	r2, r3
 8000544:	1dfb      	adds	r3, r7, #7
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	0018      	movs	r0, r3
 800054a:	2303      	movs	r3, #3
 800054c:	4003      	ands	r3, r0
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000552:	481d      	ldr	r0, [pc, #116]	; (80005c8 <NVIC_SetPriority+0xd4>)
 8000554:	1dfb      	adds	r3, r7, #7
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	001c      	movs	r4, r3
 800055a:	230f      	movs	r3, #15
 800055c:	4023      	ands	r3, r4
 800055e:	3b08      	subs	r3, #8
 8000560:	089b      	lsrs	r3, r3, #2
 8000562:	430a      	orrs	r2, r1
 8000564:	3306      	adds	r3, #6
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	18c3      	adds	r3, r0, r3
 800056a:	3304      	adds	r3, #4
 800056c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800056e:	e027      	b.n	80005c0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000570:	4a16      	ldr	r2, [pc, #88]	; (80005cc <NVIC_SetPriority+0xd8>)
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b25b      	sxtb	r3, r3
 8000578:	089b      	lsrs	r3, r3, #2
 800057a:	33c0      	adds	r3, #192	; 0xc0
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	589b      	ldr	r3, [r3, r2]
 8000580:	1dfa      	adds	r2, r7, #7
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	0011      	movs	r1, r2
 8000586:	2203      	movs	r2, #3
 8000588:	400a      	ands	r2, r1
 800058a:	00d2      	lsls	r2, r2, #3
 800058c:	21ff      	movs	r1, #255	; 0xff
 800058e:	4091      	lsls	r1, r2
 8000590:	000a      	movs	r2, r1
 8000592:	43d2      	mvns	r2, r2
 8000594:	401a      	ands	r2, r3
 8000596:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	019b      	lsls	r3, r3, #6
 800059c:	22ff      	movs	r2, #255	; 0xff
 800059e:	401a      	ands	r2, r3
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	0018      	movs	r0, r3
 80005a6:	2303      	movs	r3, #3
 80005a8:	4003      	ands	r3, r0
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ae:	4807      	ldr	r0, [pc, #28]	; (80005cc <NVIC_SetPriority+0xd8>)
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b25b      	sxtb	r3, r3
 80005b6:	089b      	lsrs	r3, r3, #2
 80005b8:	430a      	orrs	r2, r1
 80005ba:	33c0      	adds	r3, #192	; 0xc0
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	501a      	str	r2, [r3, r0]
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b003      	add	sp, #12
 80005c6:	bd90      	pop	{r4, r7, pc}
 80005c8:	e000ed00 	.word	0xe000ed00
 80005cc:	e000e100 	.word	0xe000e100

080005d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3b01      	subs	r3, #1
 80005dc:	4a0c      	ldr	r2, [pc, #48]	; (8000610 <SysTick_Config+0x40>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d901      	bls.n	80005e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005e2:	2301      	movs	r3, #1
 80005e4:	e010      	b.n	8000608 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <SysTick_Config+0x44>)
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	3a01      	subs	r2, #1
 80005ec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005ee:	2301      	movs	r3, #1
 80005f0:	425b      	negs	r3, r3
 80005f2:	2103      	movs	r1, #3
 80005f4:	0018      	movs	r0, r3
 80005f6:	f7ff ff7d 	bl	80004f4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <SysTick_Config+0x44>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <SysTick_Config+0x44>)
 8000602:	2207      	movs	r2, #7
 8000604:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000606:	2300      	movs	r3, #0
}
 8000608:	0018      	movs	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	b002      	add	sp, #8
 800060e:	bd80      	pop	{r7, pc}
 8000610:	00ffffff 	.word	0x00ffffff
 8000614:	e000e010 	.word	0xe000e010

08000618 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	607a      	str	r2, [r7, #4]
 8000622:	210f      	movs	r1, #15
 8000624:	187b      	adds	r3, r7, r1
 8000626:	1c02      	adds	r2, r0, #0
 8000628:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	187b      	adds	r3, r7, r1
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b25b      	sxtb	r3, r3
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff5d 	bl	80004f4 <NVIC_SetPriority>
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b004      	add	sp, #16
 8000640:	bd80      	pop	{r7, pc}

08000642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b082      	sub	sp, #8
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff ffbf 	bl	80005d0 <SysTick_Config>
 8000652:	0003      	movs	r3, r0
}
 8000654:	0018      	movs	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	b002      	add	sp, #8
 800065a:	bd80      	pop	{r7, pc}

0800065c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000672:	e143      	b.n	80008fc <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2101      	movs	r1, #1
 800067a:	697a      	ldr	r2, [r7, #20]
 800067c:	4091      	lsls	r1, r2
 800067e:	000a      	movs	r2, r1
 8000680:	4013      	ands	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d100      	bne.n	800068c <HAL_GPIO_Init+0x30>
 800068a:	e134      	b.n	80008f6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	2b02      	cmp	r3, #2
 8000692:	d003      	beq.n	800069c <HAL_GPIO_Init+0x40>
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	2b12      	cmp	r3, #18
 800069a:	d123      	bne.n	80006e4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	08da      	lsrs	r2, r3, #3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3208      	adds	r2, #8
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	58d3      	ldr	r3, [r2, r3]
 80006a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	2207      	movs	r2, #7
 80006ae:	4013      	ands	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	220f      	movs	r2, #15
 80006b4:	409a      	lsls	r2, r3
 80006b6:	0013      	movs	r3, r2
 80006b8:	43da      	mvns	r2, r3
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	4013      	ands	r3, r2
 80006be:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	691a      	ldr	r2, [r3, #16]
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2107      	movs	r1, #7
 80006c8:	400b      	ands	r3, r1
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	409a      	lsls	r2, r3
 80006ce:	0013      	movs	r3, r2
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	08da      	lsrs	r2, r3, #3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3208      	adds	r2, #8
 80006de:	0092      	lsls	r2, r2, #2
 80006e0:	6939      	ldr	r1, [r7, #16]
 80006e2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d00b      	beq.n	8000704 <HAL_GPIO_Init+0xa8>
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d007      	beq.n	8000704 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f8:	2b11      	cmp	r3, #17
 80006fa:	d003      	beq.n	8000704 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	2b12      	cmp	r3, #18
 8000702:	d130      	bne.n	8000766 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	2203      	movs	r2, #3
 8000710:	409a      	lsls	r2, r3
 8000712:	0013      	movs	r3, r2
 8000714:	43da      	mvns	r2, r3
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	4013      	ands	r3, r2
 800071a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	68da      	ldr	r2, [r3, #12]
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	409a      	lsls	r2, r3
 8000726:	0013      	movs	r3, r2
 8000728:	693a      	ldr	r2, [r7, #16]
 800072a:	4313      	orrs	r3, r2
 800072c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	693a      	ldr	r2, [r7, #16]
 8000732:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800073a:	2201      	movs	r2, #1
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	409a      	lsls	r2, r3
 8000740:	0013      	movs	r3, r2
 8000742:	43da      	mvns	r2, r3
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	4013      	ands	r3, r2
 8000748:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	091b      	lsrs	r3, r3, #4
 8000750:	2201      	movs	r2, #1
 8000752:	401a      	ands	r2, r3
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	409a      	lsls	r2, r3
 8000758:	0013      	movs	r3, r2
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	4313      	orrs	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	2203      	movs	r2, #3
 8000772:	409a      	lsls	r2, r3
 8000774:	0013      	movs	r3, r2
 8000776:	43da      	mvns	r2, r3
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	4013      	ands	r3, r2
 800077c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	2203      	movs	r2, #3
 8000784:	401a      	ands	r2, r3
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	409a      	lsls	r2, r3
 800078c:	0013      	movs	r3, r2
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	4313      	orrs	r3, r2
 8000792:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	2203      	movs	r2, #3
 80007a6:	409a      	lsls	r2, r3
 80007a8:	0013      	movs	r3, r2
 80007aa:	43da      	mvns	r2, r3
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	4013      	ands	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	689a      	ldr	r2, [r3, #8]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	409a      	lsls	r2, r3
 80007bc:	0013      	movs	r3, r2
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685a      	ldr	r2, [r3, #4]
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	055b      	lsls	r3, r3, #21
 80007d2:	4013      	ands	r3, r2
 80007d4:	d100      	bne.n	80007d8 <HAL_GPIO_Init+0x17c>
 80007d6:	e08e      	b.n	80008f6 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d8:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <HAL_GPIO_Init+0x2b8>)
 80007da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007dc:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <HAL_GPIO_Init+0x2b8>)
 80007de:	2101      	movs	r1, #1
 80007e0:	430a      	orrs	r2, r1
 80007e2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80007e4:	4a4c      	ldr	r2, [pc, #304]	; (8000918 <HAL_GPIO_Init+0x2bc>)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	089b      	lsrs	r3, r3, #2
 80007ea:	3302      	adds	r3, #2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	589b      	ldr	r3, [r3, r2]
 80007f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2203      	movs	r2, #3
 80007f6:	4013      	ands	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	220f      	movs	r2, #15
 80007fc:	409a      	lsls	r2, r3
 80007fe:	0013      	movs	r3, r2
 8000800:	43da      	mvns	r2, r3
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	23a0      	movs	r3, #160	; 0xa0
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	429a      	cmp	r2, r3
 8000810:	d00d      	beq.n	800082e <HAL_GPIO_Init+0x1d2>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a41      	ldr	r2, [pc, #260]	; (800091c <HAL_GPIO_Init+0x2c0>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d007      	beq.n	800082a <HAL_GPIO_Init+0x1ce>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a40      	ldr	r2, [pc, #256]	; (8000920 <HAL_GPIO_Init+0x2c4>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d101      	bne.n	8000826 <HAL_GPIO_Init+0x1ca>
 8000822:	2302      	movs	r3, #2
 8000824:	e004      	b.n	8000830 <HAL_GPIO_Init+0x1d4>
 8000826:	2306      	movs	r3, #6
 8000828:	e002      	b.n	8000830 <HAL_GPIO_Init+0x1d4>
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <HAL_GPIO_Init+0x1d4>
 800082e:	2300      	movs	r3, #0
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	2103      	movs	r1, #3
 8000834:	400a      	ands	r2, r1
 8000836:	0092      	lsls	r2, r2, #2
 8000838:	4093      	lsls	r3, r2
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	4313      	orrs	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000840:	4935      	ldr	r1, [pc, #212]	; (8000918 <HAL_GPIO_Init+0x2bc>)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	089b      	lsrs	r3, r3, #2
 8000846:	3302      	adds	r3, #2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800084e:	4b35      	ldr	r3, [pc, #212]	; (8000924 <HAL_GPIO_Init+0x2c8>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	43da      	mvns	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	4013      	ands	r3, r2
 800085c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685a      	ldr	r2, [r3, #4]
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	025b      	lsls	r3, r3, #9
 8000866:	4013      	ands	r3, r2
 8000868:	d003      	beq.n	8000872 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4313      	orrs	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <HAL_GPIO_Init+0x2c8>)
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000878:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <HAL_GPIO_Init+0x2c8>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	43da      	mvns	r2, r3
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	029b      	lsls	r3, r3, #10
 8000890:	4013      	ands	r3, r2
 8000892:	d003      	beq.n	800089c <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	4313      	orrs	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <HAL_GPIO_Init+0x2c8>)
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <HAL_GPIO_Init+0x2c8>)
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	43da      	mvns	r2, r3
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	4013      	ands	r3, r2
 80008b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685a      	ldr	r2, [r3, #4]
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	035b      	lsls	r3, r3, #13
 80008ba:	4013      	ands	r3, r2
 80008bc:	d003      	beq.n	80008c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_GPIO_Init+0x2c8>)
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_GPIO_Init+0x2c8>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	43da      	mvns	r2, r3
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685a      	ldr	r2, [r3, #4]
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	039b      	lsls	r3, r3, #14
 80008e4:	4013      	ands	r3, r2
 80008e6:	d003      	beq.n	80008f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_GPIO_Init+0x2c8>)
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	40da      	lsrs	r2, r3
 8000904:	1e13      	subs	r3, r2, #0
 8000906:	d000      	beq.n	800090a <HAL_GPIO_Init+0x2ae>
 8000908:	e6b4      	b.n	8000674 <HAL_GPIO_Init+0x18>
  }
}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b006      	add	sp, #24
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	40021000 	.word	0x40021000
 8000918:	40010000 	.word	0x40010000
 800091c:	50000400 	.word	0x50000400
 8000920:	50000800 	.word	0x50000800
 8000924:	40010400 	.word	0x40010400

08000928 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	0008      	movs	r0, r1
 8000932:	0011      	movs	r1, r2
 8000934:	1cbb      	adds	r3, r7, #2
 8000936:	1c02      	adds	r2, r0, #0
 8000938:	801a      	strh	r2, [r3, #0]
 800093a:	1c7b      	adds	r3, r7, #1
 800093c:	1c0a      	adds	r2, r1, #0
 800093e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000940:	1c7b      	adds	r3, r7, #1
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d004      	beq.n	8000952 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000948:	1cbb      	adds	r3, r7, #2
 800094a:	881a      	ldrh	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000950:	e003      	b.n	800095a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000952:	1cbb      	adds	r3, r7, #2
 8000954:	881a      	ldrh	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000964:	b5b0      	push	{r4, r5, r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d102      	bne.n	8000978 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	f000 fb6a 	bl	800104c <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000978:	4bc7      	ldr	r3, [pc, #796]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	220c      	movs	r2, #12
 800097e:	4013      	ands	r3, r2
 8000980:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000982:	4bc5      	ldr	r3, [pc, #788]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000984:	68da      	ldr	r2, [r3, #12]
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	025b      	lsls	r3, r3, #9
 800098a:	4013      	ands	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2201      	movs	r2, #1
 8000994:	4013      	ands	r3, r2
 8000996:	d100      	bne.n	800099a <HAL_RCC_OscConfig+0x36>
 8000998:	e07d      	b.n	8000a96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	2b08      	cmp	r3, #8
 800099e:	d007      	beq.n	80009b0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	2b0c      	cmp	r3, #12
 80009a4:	d112      	bne.n	80009cc <HAL_RCC_OscConfig+0x68>
 80009a6:	69ba      	ldr	r2, [r7, #24]
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	025b      	lsls	r3, r3, #9
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d10d      	bne.n	80009cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009b0:	4bb9      	ldr	r3, [pc, #740]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	029b      	lsls	r3, r3, #10
 80009b8:	4013      	ands	r3, r2
 80009ba:	d100      	bne.n	80009be <HAL_RCC_OscConfig+0x5a>
 80009bc:	e06a      	b.n	8000a94 <HAL_RCC_OscConfig+0x130>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d166      	bne.n	8000a94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	f000 fb40 	bl	800104c <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	025b      	lsls	r3, r3, #9
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d107      	bne.n	80009e8 <HAL_RCC_OscConfig+0x84>
 80009d8:	4baf      	ldr	r3, [pc, #700]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4bae      	ldr	r3, [pc, #696]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	0249      	lsls	r1, r1, #9
 80009e2:	430a      	orrs	r2, r1
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	e027      	b.n	8000a38 <HAL_RCC_OscConfig+0xd4>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	23a0      	movs	r3, #160	; 0xa0
 80009ee:	02db      	lsls	r3, r3, #11
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d10e      	bne.n	8000a12 <HAL_RCC_OscConfig+0xae>
 80009f4:	4ba8      	ldr	r3, [pc, #672]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4ba7      	ldr	r3, [pc, #668]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 80009fa:	2180      	movs	r1, #128	; 0x80
 80009fc:	02c9      	lsls	r1, r1, #11
 80009fe:	430a      	orrs	r2, r1
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	4ba5      	ldr	r3, [pc, #660]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4ba4      	ldr	r3, [pc, #656]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	0249      	lsls	r1, r1, #9
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	e012      	b.n	8000a38 <HAL_RCC_OscConfig+0xd4>
 8000a12:	4ba1      	ldr	r3, [pc, #644]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4ba0      	ldr	r3, [pc, #640]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000a18:	49a0      	ldr	r1, [pc, #640]	; (8000c9c <HAL_RCC_OscConfig+0x338>)
 8000a1a:	400a      	ands	r2, r1
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	4b9e      	ldr	r3, [pc, #632]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	4013      	ands	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4b9a      	ldr	r3, [pc, #616]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b99      	ldr	r3, [pc, #612]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000a32:	499b      	ldr	r1, [pc, #620]	; (8000ca0 <HAL_RCC_OscConfig+0x33c>)
 8000a34:	400a      	ands	r2, r1
 8000a36:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d014      	beq.n	8000a6a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a40:	f7ff fd30 	bl	80004a4 <HAL_GetTick>
 8000a44:	0003      	movs	r3, r0
 8000a46:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a48:	e008      	b.n	8000a5c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a4a:	f7ff fd2b 	bl	80004a4 <HAL_GetTick>
 8000a4e:	0002      	movs	r2, r0
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	2b64      	cmp	r3, #100	; 0x64
 8000a56:	d901      	bls.n	8000a5c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	e2f7      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a5c:	4b8e      	ldr	r3, [pc, #568]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	029b      	lsls	r3, r3, #10
 8000a64:	4013      	ands	r3, r2
 8000a66:	d0f0      	beq.n	8000a4a <HAL_RCC_OscConfig+0xe6>
 8000a68:	e015      	b.n	8000a96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a6a:	f7ff fd1b 	bl	80004a4 <HAL_GetTick>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000a72:	e008      	b.n	8000a86 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a74:	f7ff fd16 	bl	80004a4 <HAL_GetTick>
 8000a78:	0002      	movs	r2, r0
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b64      	cmp	r3, #100	; 0x64
 8000a80:	d901      	bls.n	8000a86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000a82:	2303      	movs	r3, #3
 8000a84:	e2e2      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000a86:	4b84      	ldr	r3, [pc, #528]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	029b      	lsls	r3, r3, #10
 8000a8e:	4013      	ands	r3, r2
 8000a90:	d1f0      	bne.n	8000a74 <HAL_RCC_OscConfig+0x110>
 8000a92:	e000      	b.n	8000a96 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a94:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	d100      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x13e>
 8000aa0:	e098      	b.n	8000bd4 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	2220      	movs	r2, #32
 8000aac:	4013      	ands	r3, r2
 8000aae:	d009      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000ab0:	4b79      	ldr	r3, [pc, #484]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b78      	ldr	r3, [pc, #480]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	2220      	movs	r2, #32
 8000ac0:	4393      	bics	r3, r2
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	d005      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	2b0c      	cmp	r3, #12
 8000ace:	d13d      	bne.n	8000b4c <HAL_RCC_OscConfig+0x1e8>
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d13a      	bne.n	8000b4c <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000ad6:	4b70      	ldr	r3, [pc, #448]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2204      	movs	r2, #4
 8000adc:	4013      	ands	r3, r2
 8000ade:	d004      	beq.n	8000aea <HAL_RCC_OscConfig+0x186>
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d101      	bne.n	8000aea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e2b0      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aea:	4b6b      	ldr	r3, [pc, #428]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	4a6d      	ldr	r2, [pc, #436]	; (8000ca4 <HAL_RCC_OscConfig+0x340>)
 8000af0:	4013      	ands	r3, r2
 8000af2:	0019      	movs	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	021a      	lsls	r2, r3, #8
 8000afa:	4b67      	ldr	r3, [pc, #412]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000afc:	430a      	orrs	r2, r1
 8000afe:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b00:	4b65      	ldr	r3, [pc, #404]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2209      	movs	r2, #9
 8000b06:	4393      	bics	r3, r2
 8000b08:	0019      	movs	r1, r3
 8000b0a:	4b63      	ldr	r3, [pc, #396]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b12:	f000 fbcb 	bl	80012ac <HAL_RCC_GetSysClockFreq>
 8000b16:	0001      	movs	r1, r0
 8000b18:	4b5f      	ldr	r3, [pc, #380]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	091b      	lsrs	r3, r3, #4
 8000b1e:	220f      	movs	r2, #15
 8000b20:	4013      	ands	r3, r2
 8000b22:	4a61      	ldr	r2, [pc, #388]	; (8000ca8 <HAL_RCC_OscConfig+0x344>)
 8000b24:	5cd3      	ldrb	r3, [r2, r3]
 8000b26:	000a      	movs	r2, r1
 8000b28:	40da      	lsrs	r2, r3
 8000b2a:	4b60      	ldr	r3, [pc, #384]	; (8000cac <HAL_RCC_OscConfig+0x348>)
 8000b2c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000b2e:	2513      	movs	r5, #19
 8000b30:	197c      	adds	r4, r7, r5
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff fc80 	bl	8000438 <HAL_InitTick>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000b3c:	197b      	adds	r3, r7, r5
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d047      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8000b44:	2313      	movs	r3, #19
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	e27f      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d027      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b52:	4b51      	ldr	r3, [pc, #324]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2209      	movs	r2, #9
 8000b58:	4393      	bics	r3, r2
 8000b5a:	0019      	movs	r1, r3
 8000b5c:	4b4e      	ldr	r3, [pc, #312]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b60:	430a      	orrs	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b64:	f7ff fc9e 	bl	80004a4 <HAL_GetTick>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b6c:	e008      	b.n	8000b80 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b6e:	f7ff fc99 	bl	80004a4 <HAL_GetTick>
 8000b72:	0002      	movs	r2, r0
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d901      	bls.n	8000b80 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	e265      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b80:	4b45      	ldr	r3, [pc, #276]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2204      	movs	r2, #4
 8000b86:	4013      	ands	r3, r2
 8000b88:	d0f1      	beq.n	8000b6e <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b8a:	4b43      	ldr	r3, [pc, #268]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	4a45      	ldr	r2, [pc, #276]	; (8000ca4 <HAL_RCC_OscConfig+0x340>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	0019      	movs	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	021a      	lsls	r2, r3, #8
 8000b9a:	4b3f      	ldr	r3, [pc, #252]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	e018      	b.n	8000bd4 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ba2:	4b3d      	ldr	r3, [pc, #244]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	4b3c      	ldr	r3, [pc, #240]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	438a      	bics	r2, r1
 8000bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bae:	f7ff fc79 	bl	80004a4 <HAL_GetTick>
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000bb6:	e008      	b.n	8000bca <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bb8:	f7ff fc74 	bl	80004a4 <HAL_GetTick>
 8000bbc:	0002      	movs	r2, r0
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d901      	bls.n	8000bca <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e240      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000bca:	4b33      	ldr	r3, [pc, #204]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2204      	movs	r2, #4
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	d1f1      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2210      	movs	r2, #16
 8000bda:	4013      	ands	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <HAL_RCC_OscConfig+0x27c>
 8000bde:	e09e      	b.n	8000d1e <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d13f      	bne.n	8000c66 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000be6:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4013      	ands	r3, r2
 8000bf0:	d005      	beq.n	8000bfe <HAL_RCC_OscConfig+0x29a>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e226      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bfe:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	4a2b      	ldr	r2, [pc, #172]	; (8000cb0 <HAL_RCC_OscConfig+0x34c>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	0019      	movs	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a1a      	ldr	r2, [r3, #32]
 8000c0c:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	0a19      	lsrs	r1, r3, #8
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	061a      	lsls	r2, r3, #24
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000c22:	430a      	orrs	r2, r1
 8000c24:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a1b      	ldr	r3, [r3, #32]
 8000c2a:	0b5b      	lsrs	r3, r3, #13
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	0212      	lsls	r2, r2, #8
 8000c32:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	091b      	lsrs	r3, r3, #4
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	491a      	ldr	r1, [pc, #104]	; (8000ca8 <HAL_RCC_OscConfig+0x344>)
 8000c40:	5ccb      	ldrb	r3, [r1, r3]
 8000c42:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_RCC_OscConfig+0x348>)
 8000c46:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000c48:	2513      	movs	r5, #19
 8000c4a:	197c      	adds	r4, r7, r5
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fbf3 	bl	8000438 <HAL_InitTick>
 8000c52:	0003      	movs	r3, r0
 8000c54:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000c56:	197b      	adds	r3, r7, r5
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d05f      	beq.n	8000d1e <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8000c5e:	2313      	movs	r3, #19
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	e1f2      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d03d      	beq.n	8000cea <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_RCC_OscConfig+0x334>)
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fc12 	bl	80004a4 <HAL_GetTick>
 8000c80:	0003      	movs	r3, r0
 8000c82:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000c84:	e016      	b.n	8000cb4 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c86:	f7ff fc0d 	bl	80004a4 <HAL_GetTick>
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d90f      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8000c94:	2303      	movs	r3, #3
 8000c96:	e1d9      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	fffeffff 	.word	0xfffeffff
 8000ca0:	fffbffff 	.word	0xfffbffff
 8000ca4:	ffffe0ff 	.word	0xffffe0ff
 8000ca8:	080034f4 	.word	0x080034f4
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000cb4:	4bca      	ldr	r3, [pc, #808]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d0e2      	beq.n	8000c86 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cc0:	4bc7      	ldr	r3, [pc, #796]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4ac7      	ldr	r2, [pc, #796]	; (8000fe4 <HAL_RCC_OscConfig+0x680>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	0019      	movs	r1, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a1a      	ldr	r2, [r3, #32]
 8000cce:	4bc4      	ldr	r3, [pc, #784]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cd4:	4bc2      	ldr	r3, [pc, #776]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	021b      	lsls	r3, r3, #8
 8000cda:	0a19      	lsrs	r1, r3, #8
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	061a      	lsls	r2, r3, #24
 8000ce2:	4bbf      	ldr	r3, [pc, #764]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	e019      	b.n	8000d1e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000cea:	4bbd      	ldr	r3, [pc, #756]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4bbc      	ldr	r3, [pc, #752]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000cf0:	49bd      	ldr	r1, [pc, #756]	; (8000fe8 <HAL_RCC_OscConfig+0x684>)
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fbd5 	bl	80004a4 <HAL_GetTick>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000cfe:	e008      	b.n	8000d12 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d00:	f7ff fbd0 	bl	80004a4 <HAL_GetTick>
 8000d04:	0002      	movs	r2, r0
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d901      	bls.n	8000d12 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e19c      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000d12:	4bb3      	ldr	r3, [pc, #716]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	d1f0      	bne.n	8000d00 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2208      	movs	r2, #8
 8000d24:	4013      	ands	r3, r2
 8000d26:	d036      	beq.n	8000d96 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d019      	beq.n	8000d64 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d30:	4bab      	ldr	r3, [pc, #684]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000d32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d34:	4baa      	ldr	r3, [pc, #680]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000d36:	2101      	movs	r1, #1
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d3c:	f7ff fbb2 	bl	80004a4 <HAL_GetTick>
 8000d40:	0003      	movs	r3, r0
 8000d42:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000d44:	e008      	b.n	8000d58 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d46:	f7ff fbad 	bl	80004a4 <HAL_GetTick>
 8000d4a:	0002      	movs	r2, r0
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d901      	bls.n	8000d58 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000d54:	2303      	movs	r3, #3
 8000d56:	e179      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000d58:	4ba1      	ldr	r3, [pc, #644]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d0f1      	beq.n	8000d46 <HAL_RCC_OscConfig+0x3e2>
 8000d62:	e018      	b.n	8000d96 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d64:	4b9e      	ldr	r3, [pc, #632]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000d66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d68:	4b9d      	ldr	r3, [pc, #628]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	438a      	bics	r2, r1
 8000d6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d70:	f7ff fb98 	bl	80004a4 <HAL_GetTick>
 8000d74:	0003      	movs	r3, r0
 8000d76:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000d78:	e008      	b.n	8000d8c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d7a:	f7ff fb93 	bl	80004a4 <HAL_GetTick>
 8000d7e:	0002      	movs	r2, r0
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d901      	bls.n	8000d8c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e15f      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000d8c:	4b94      	ldr	r3, [pc, #592]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d90:	2202      	movs	r2, #2
 8000d92:	4013      	ands	r3, r2
 8000d94:	d1f1      	bne.n	8000d7a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d100      	bne.n	8000da2 <HAL_RCC_OscConfig+0x43e>
 8000da0:	e0af      	b.n	8000f02 <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000da2:	2323      	movs	r3, #35	; 0x23
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000daa:	4b8d      	ldr	r3, [pc, #564]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	055b      	lsls	r3, r3, #21
 8000db2:	4013      	ands	r3, r2
 8000db4:	d10a      	bne.n	8000dcc <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b8a      	ldr	r3, [pc, #552]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dba:	4b89      	ldr	r3, [pc, #548]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	0549      	lsls	r1, r1, #21
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8000dc4:	2323      	movs	r3, #35	; 0x23
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dcc:	4b87      	ldr	r3, [pc, #540]	; (8000fec <HAL_RCC_OscConfig+0x688>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d11a      	bne.n	8000e0e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dd8:	4b84      	ldr	r3, [pc, #528]	; (8000fec <HAL_RCC_OscConfig+0x688>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b83      	ldr	r3, [pc, #524]	; (8000fec <HAL_RCC_OscConfig+0x688>)
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	0049      	lsls	r1, r1, #1
 8000de2:	430a      	orrs	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000de6:	f7ff fb5d 	bl	80004a4 <HAL_GetTick>
 8000dea:	0003      	movs	r3, r0
 8000dec:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000df0:	f7ff fb58 	bl	80004a4 <HAL_GetTick>
 8000df4:	0002      	movs	r2, r0
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b64      	cmp	r3, #100	; 0x64
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e124      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e02:	4b7a      	ldr	r3, [pc, #488]	; (8000fec <HAL_RCC_OscConfig+0x688>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d0f0      	beq.n	8000df0 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d107      	bne.n	8000e2a <HAL_RCC_OscConfig+0x4c6>
 8000e1a:	4b71      	ldr	r3, [pc, #452]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e1e:	4b70      	ldr	r3, [pc, #448]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	0049      	lsls	r1, r1, #1
 8000e24:	430a      	orrs	r2, r1
 8000e26:	651a      	str	r2, [r3, #80]	; 0x50
 8000e28:	e031      	b.n	8000e8e <HAL_RCC_OscConfig+0x52a>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10c      	bne.n	8000e4c <HAL_RCC_OscConfig+0x4e8>
 8000e32:	4b6b      	ldr	r3, [pc, #428]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e36:	4b6a      	ldr	r3, [pc, #424]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e38:	496b      	ldr	r1, [pc, #428]	; (8000fe8 <HAL_RCC_OscConfig+0x684>)
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	651a      	str	r2, [r3, #80]	; 0x50
 8000e3e:	4b68      	ldr	r3, [pc, #416]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e42:	4b67      	ldr	r3, [pc, #412]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e44:	496a      	ldr	r1, [pc, #424]	; (8000ff0 <HAL_RCC_OscConfig+0x68c>)
 8000e46:	400a      	ands	r2, r1
 8000e48:	651a      	str	r2, [r3, #80]	; 0x50
 8000e4a:	e020      	b.n	8000e8e <HAL_RCC_OscConfig+0x52a>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	23a0      	movs	r3, #160	; 0xa0
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d10e      	bne.n	8000e76 <HAL_RCC_OscConfig+0x512>
 8000e58:	4b61      	ldr	r3, [pc, #388]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e5c:	4b60      	ldr	r3, [pc, #384]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	00c9      	lsls	r1, r1, #3
 8000e62:	430a      	orrs	r2, r1
 8000e64:	651a      	str	r2, [r3, #80]	; 0x50
 8000e66:	4b5e      	ldr	r3, [pc, #376]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e6a:	4b5d      	ldr	r3, [pc, #372]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	0049      	lsls	r1, r1, #1
 8000e70:	430a      	orrs	r2, r1
 8000e72:	651a      	str	r2, [r3, #80]	; 0x50
 8000e74:	e00b      	b.n	8000e8e <HAL_RCC_OscConfig+0x52a>
 8000e76:	4b5a      	ldr	r3, [pc, #360]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e7a:	4b59      	ldr	r3, [pc, #356]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e7c:	495a      	ldr	r1, [pc, #360]	; (8000fe8 <HAL_RCC_OscConfig+0x684>)
 8000e7e:	400a      	ands	r2, r1
 8000e80:	651a      	str	r2, [r3, #80]	; 0x50
 8000e82:	4b57      	ldr	r3, [pc, #348]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e86:	4b56      	ldr	r3, [pc, #344]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000e88:	4959      	ldr	r1, [pc, #356]	; (8000ff0 <HAL_RCC_OscConfig+0x68c>)
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d015      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e96:	f7ff fb05 	bl	80004a4 <HAL_GetTick>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000e9e:	e009      	b.n	8000eb4 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fb00 	bl	80004a4 <HAL_GetTick>
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	4a52      	ldr	r2, [pc, #328]	; (8000ff4 <HAL_RCC_OscConfig+0x690>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e0cb      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000eb4:	4b4a      	ldr	r3, [pc, #296]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000eb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d0ef      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x53c>
 8000ec0:	e014      	b.n	8000eec <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec2:	f7ff faef 	bl	80004a4 <HAL_GetTick>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000eca:	e009      	b.n	8000ee0 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ecc:	f7ff faea 	bl	80004a4 <HAL_GetTick>
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	4a47      	ldr	r2, [pc, #284]	; (8000ff4 <HAL_RCC_OscConfig+0x690>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e0b5      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000ee0:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000ee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d1ef      	bne.n	8000ecc <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000eec:	2323      	movs	r3, #35	; 0x23
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d105      	bne.n	8000f02 <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ef6:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000efa:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000efc:	493e      	ldr	r1, [pc, #248]	; (8000ff8 <HAL_RCC_OscConfig+0x694>)
 8000efe:	400a      	ands	r2, r1
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d100      	bne.n	8000f0c <HAL_RCC_OscConfig+0x5a8>
 8000f0a:	e09e      	b.n	800104a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	2b0c      	cmp	r3, #12
 8000f10:	d100      	bne.n	8000f14 <HAL_RCC_OscConfig+0x5b0>
 8000f12:	e077      	b.n	8001004 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d145      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000f22:	4936      	ldr	r1, [pc, #216]	; (8000ffc <HAL_RCC_OscConfig+0x698>)
 8000f24:	400a      	ands	r2, r1
 8000f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fabc 	bl	80004a4 <HAL_GetTick>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f32:	f7ff fab7 	bl	80004a4 <HAL_GetTick>
 8000f36:	0002      	movs	r2, r0
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e083      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f44:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	049b      	lsls	r3, r3, #18
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d1f0      	bne.n	8000f32 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f50:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	4a2a      	ldr	r2, [pc, #168]	; (8001000 <HAL_RCC_OscConfig+0x69c>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	0019      	movs	r1, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000f76:	2180      	movs	r1, #128	; 0x80
 8000f78:	0449      	lsls	r1, r1, #17
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fa91 	bl	80004a4 <HAL_GetTick>
 8000f82:	0003      	movs	r3, r0
 8000f84:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f88:	f7ff fa8c 	bl	80004a4 <HAL_GetTick>
 8000f8c:	0002      	movs	r2, r0
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e058      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	049b      	lsls	r3, r3, #18
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0x624>
 8000fa6:	e050      	b.n	800104a <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000fae:	4913      	ldr	r1, [pc, #76]	; (8000ffc <HAL_RCC_OscConfig+0x698>)
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fa76 	bl	80004a4 <HAL_GetTick>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fbe:	f7ff fa71 	bl	80004a4 <HAL_GetTick>
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e03d      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_RCC_OscConfig+0x67c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	049b      	lsls	r3, r3, #18
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d1f0      	bne.n	8000fbe <HAL_RCC_OscConfig+0x65a>
 8000fdc:	e035      	b.n	800104a <HAL_RCC_OscConfig+0x6e6>
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	ffff1fff 	.word	0xffff1fff
 8000fe8:	fffffeff 	.word	0xfffffeff
 8000fec:	40007000 	.word	0x40007000
 8000ff0:	fffffbff 	.word	0xfffffbff
 8000ff4:	00001388 	.word	0x00001388
 8000ff8:	efffffff 	.word	0xefffffff
 8000ffc:	feffffff 	.word	0xfeffffff
 8001000:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e01d      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_RCC_OscConfig+0x6f0>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	025b      	lsls	r3, r3, #9
 800101c:	401a      	ands	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001022:	429a      	cmp	r2, r3
 8001024:	d10f      	bne.n	8001046 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	23f0      	movs	r3, #240	; 0xf0
 800102a:	039b      	lsls	r3, r3, #14
 800102c:	401a      	ands	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001032:	429a      	cmp	r2, r3
 8001034:	d107      	bne.n	8001046 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	23c0      	movs	r3, #192	; 0xc0
 800103a:	041b      	lsls	r3, r3, #16
 800103c:	401a      	ands	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001042:	429a      	cmp	r2, r3
 8001044:	d001      	beq.n	800104a <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b00a      	add	sp, #40	; 0x28
 8001052:	bdb0      	pop	{r4, r5, r7, pc}
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e10d      	b.n	8001288 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800106c:	4b88      	ldr	r3, [pc, #544]	; (8001290 <HAL_RCC_ClockConfig+0x238>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2201      	movs	r2, #1
 8001072:	4013      	ands	r3, r2
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d911      	bls.n	800109e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107a:	4b85      	ldr	r3, [pc, #532]	; (8001290 <HAL_RCC_ClockConfig+0x238>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2201      	movs	r2, #1
 8001080:	4393      	bics	r3, r2
 8001082:	0019      	movs	r1, r3
 8001084:	4b82      	ldr	r3, [pc, #520]	; (8001290 <HAL_RCC_ClockConfig+0x238>)
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800108c:	4b80      	ldr	r3, [pc, #512]	; (8001290 <HAL_RCC_ClockConfig+0x238>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2201      	movs	r2, #1
 8001092:	4013      	ands	r3, r2
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d001      	beq.n	800109e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e0f4      	b.n	8001288 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2202      	movs	r2, #2
 80010a4:	4013      	ands	r3, r2
 80010a6:	d009      	beq.n	80010bc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010a8:	4b7a      	ldr	r3, [pc, #488]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	22f0      	movs	r2, #240	; 0xf0
 80010ae:	4393      	bics	r3, r2
 80010b0:	0019      	movs	r1, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	4b77      	ldr	r3, [pc, #476]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 80010b8:	430a      	orrs	r2, r1
 80010ba:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2201      	movs	r2, #1
 80010c2:	4013      	ands	r3, r2
 80010c4:	d100      	bne.n	80010c8 <HAL_RCC_ClockConfig+0x70>
 80010c6:	e089      	b.n	80011dc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d107      	bne.n	80010e0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010d0:	4b70      	ldr	r3, [pc, #448]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	029b      	lsls	r3, r3, #10
 80010d8:	4013      	ands	r3, r2
 80010da:	d120      	bne.n	800111e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0d3      	b.n	8001288 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d107      	bne.n	80010f8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80010e8:	4b6a      	ldr	r3, [pc, #424]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	049b      	lsls	r3, r3, #18
 80010f0:	4013      	ands	r3, r2
 80010f2:	d114      	bne.n	800111e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0c7      	b.n	8001288 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d106      	bne.n	800110e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001100:	4b64      	ldr	r3, [pc, #400]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2204      	movs	r2, #4
 8001106:	4013      	ands	r3, r2
 8001108:	d109      	bne.n	800111e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e0bc      	b.n	8001288 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800110e:	4b61      	ldr	r3, [pc, #388]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4013      	ands	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e0b4      	b.n	8001288 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800111e:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	2203      	movs	r2, #3
 8001124:	4393      	bics	r3, r2
 8001126:	0019      	movs	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4b59      	ldr	r3, [pc, #356]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 800112e:	430a      	orrs	r2, r1
 8001130:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001132:	f7ff f9b7 	bl	80004a4 <HAL_GetTick>
 8001136:	0003      	movs	r3, r0
 8001138:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d111      	bne.n	8001166 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001142:	e009      	b.n	8001158 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001144:	f7ff f9ae 	bl	80004a4 <HAL_GetTick>
 8001148:	0002      	movs	r2, r0
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	4a52      	ldr	r2, [pc, #328]	; (8001298 <HAL_RCC_ClockConfig+0x240>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e097      	b.n	8001288 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001158:	4b4e      	ldr	r3, [pc, #312]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	220c      	movs	r2, #12
 800115e:	4013      	ands	r3, r2
 8001160:	2b08      	cmp	r3, #8
 8001162:	d1ef      	bne.n	8001144 <HAL_RCC_ClockConfig+0xec>
 8001164:	e03a      	b.n	80011dc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d111      	bne.n	8001192 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800116e:	e009      	b.n	8001184 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001170:	f7ff f998 	bl	80004a4 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	4a47      	ldr	r2, [pc, #284]	; (8001298 <HAL_RCC_ClockConfig+0x240>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e081      	b.n	8001288 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001184:	4b43      	ldr	r3, [pc, #268]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	220c      	movs	r2, #12
 800118a:	4013      	ands	r3, r2
 800118c:	2b0c      	cmp	r3, #12
 800118e:	d1ef      	bne.n	8001170 <HAL_RCC_ClockConfig+0x118>
 8001190:	e024      	b.n	80011dc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d11b      	bne.n	80011d2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800119a:	e009      	b.n	80011b0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800119c:	f7ff f982 	bl	80004a4 <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	4a3c      	ldr	r2, [pc, #240]	; (8001298 <HAL_RCC_ClockConfig+0x240>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e06b      	b.n	8001288 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011b0:	4b38      	ldr	r3, [pc, #224]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	220c      	movs	r2, #12
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d1ef      	bne.n	800119c <HAL_RCC_ClockConfig+0x144>
 80011bc:	e00e      	b.n	80011dc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011be:	f7ff f971 	bl	80004a4 <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	4a33      	ldr	r2, [pc, #204]	; (8001298 <HAL_RCC_ClockConfig+0x240>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e05a      	b.n	8001288 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80011d2:	4b30      	ldr	r3, [pc, #192]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	220c      	movs	r2, #12
 80011d8:	4013      	ands	r3, r2
 80011da:	d1f0      	bne.n	80011be <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011dc:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <HAL_RCC_ClockConfig+0x238>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2201      	movs	r2, #1
 80011e2:	4013      	ands	r3, r2
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d211      	bcs.n	800120e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <HAL_RCC_ClockConfig+0x238>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2201      	movs	r2, #1
 80011f0:	4393      	bics	r3, r2
 80011f2:	0019      	movs	r1, r3
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <HAL_RCC_ClockConfig+0x238>)
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <HAL_RCC_ClockConfig+0x238>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2201      	movs	r2, #1
 8001202:	4013      	ands	r3, r2
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d001      	beq.n	800120e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e03c      	b.n	8001288 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2204      	movs	r2, #4
 8001214:	4013      	ands	r3, r2
 8001216:	d009      	beq.n	800122c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001218:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	4a1f      	ldr	r2, [pc, #124]	; (800129c <HAL_RCC_ClockConfig+0x244>)
 800121e:	4013      	ands	r3, r2
 8001220:	0019      	movs	r1, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 8001228:	430a      	orrs	r2, r1
 800122a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2208      	movs	r2, #8
 8001232:	4013      	ands	r3, r2
 8001234:	d00a      	beq.n	800124c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <HAL_RCC_ClockConfig+0x248>)
 800123c:	4013      	ands	r3, r2
 800123e:	0019      	movs	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	00da      	lsls	r2, r3, #3
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 8001248:	430a      	orrs	r2, r1
 800124a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800124c:	f000 f82e 	bl	80012ac <HAL_RCC_GetSysClockFreq>
 8001250:	0001      	movs	r1, r0
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_RCC_ClockConfig+0x23c>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	220f      	movs	r2, #15
 800125a:	4013      	ands	r3, r2
 800125c:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <HAL_RCC_ClockConfig+0x24c>)
 800125e:	5cd3      	ldrb	r3, [r2, r3]
 8001260:	000a      	movs	r2, r1
 8001262:	40da      	lsrs	r2, r3
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_RCC_ClockConfig+0x250>)
 8001266:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001268:	250b      	movs	r5, #11
 800126a:	197c      	adds	r4, r7, r5
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff f8e3 	bl	8000438 <HAL_InitTick>
 8001272:	0003      	movs	r3, r0
 8001274:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001276:	197b      	adds	r3, r7, r5
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800127e:	230b      	movs	r3, #11
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	e000      	b.n	8001288 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b004      	add	sp, #16
 800128e:	bdb0      	pop	{r4, r5, r7, pc}
 8001290:	40022000 	.word	0x40022000
 8001294:	40021000 	.word	0x40021000
 8001298:	00001388 	.word	0x00001388
 800129c:	fffff8ff 	.word	0xfffff8ff
 80012a0:	ffffc7ff 	.word	0xffffc7ff
 80012a4:	080034f4 	.word	0x080034f4
 80012a8:	20000000 	.word	0x20000000

080012ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	220c      	movs	r2, #12
 80012bc:	4013      	ands	r3, r2
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d00e      	beq.n	80012e0 <HAL_RCC_GetSysClockFreq+0x34>
 80012c2:	2b0c      	cmp	r3, #12
 80012c4:	d00f      	beq.n	80012e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d157      	bne.n	800137a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80012ca:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2210      	movs	r2, #16
 80012d0:	4013      	ands	r3, r2
 80012d2:	d002      	beq.n	80012da <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80012d4:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80012d6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80012d8:	e05d      	b.n	8001396 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80012dc:	613b      	str	r3, [r7, #16]
      break;
 80012de:	e05a      	b.n	8001396 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012e0:	4b32      	ldr	r3, [pc, #200]	; (80013ac <HAL_RCC_GetSysClockFreq+0x100>)
 80012e2:	613b      	str	r3, [r7, #16]
      break;
 80012e4:	e057      	b.n	8001396 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	0c9b      	lsrs	r3, r3, #18
 80012ea:	220f      	movs	r2, #15
 80012ec:	4013      	ands	r3, r2
 80012ee:	4a30      	ldr	r2, [pc, #192]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80012f0:	5cd3      	ldrb	r3, [r2, r3]
 80012f2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	0d9b      	lsrs	r3, r3, #22
 80012f8:	2203      	movs	r2, #3
 80012fa:	4013      	ands	r3, r2
 80012fc:	3301      	adds	r3, #1
 80012fe:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001300:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	025b      	lsls	r3, r3, #9
 8001308:	4013      	ands	r3, r2
 800130a:	d00f      	beq.n	800132c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	000a      	movs	r2, r1
 8001310:	0152      	lsls	r2, r2, #5
 8001312:	1a52      	subs	r2, r2, r1
 8001314:	0193      	lsls	r3, r2, #6
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	185b      	adds	r3, r3, r1
 800131c:	025b      	lsls	r3, r3, #9
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	0018      	movs	r0, r3
 8001322:	f7fe fef1 	bl	8000108 <__udivsi3>
 8001326:	0003      	movs	r3, r0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e023      	b.n	8001374 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2210      	movs	r2, #16
 8001332:	4013      	ands	r3, r2
 8001334:	d00f      	beq.n	8001356 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	000a      	movs	r2, r1
 800133a:	0152      	lsls	r2, r2, #5
 800133c:	1a52      	subs	r2, r2, r1
 800133e:	0193      	lsls	r3, r2, #6
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	185b      	adds	r3, r3, r1
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	0018      	movs	r0, r3
 800134c:	f7fe fedc 	bl	8000108 <__udivsi3>
 8001350:	0003      	movs	r3, r0
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	e00e      	b.n	8001374 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	000a      	movs	r2, r1
 800135a:	0152      	lsls	r2, r2, #5
 800135c:	1a52      	subs	r2, r2, r1
 800135e:	0193      	lsls	r3, r2, #6
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	185b      	adds	r3, r3, r1
 8001366:	029b      	lsls	r3, r3, #10
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	0018      	movs	r0, r3
 800136c:	f7fe fecc 	bl	8000108 <__udivsi3>
 8001370:	0003      	movs	r3, r0
 8001372:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
      break;
 8001378:	e00d      	b.n	8001396 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	0b5b      	lsrs	r3, r3, #13
 8001380:	2207      	movs	r2, #7
 8001382:	4013      	ands	r3, r2
 8001384:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	0212      	lsls	r2, r2, #8
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      break;
 8001394:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001396:	693b      	ldr	r3, [r7, #16]
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b006      	add	sp, #24
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000
 80013a4:	003d0900 	.word	0x003d0900
 80013a8:	00f42400 	.word	0x00f42400
 80013ac:	007a1200 	.word	0x007a1200
 80013b0:	0800350c 	.word	0x0800350c

080013b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	20000000 	.word	0x20000000

080013c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013cc:	f7ff fff2 	bl	80013b4 <HAL_RCC_GetHCLKFreq>
 80013d0:	0001      	movs	r1, r0
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	0a1b      	lsrs	r3, r3, #8
 80013d8:	2207      	movs	r2, #7
 80013da:	4013      	ands	r3, r2
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	40d9      	lsrs	r1, r3
 80013e2:	000b      	movs	r3, r1
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	40021000 	.word	0x40021000
 80013f0:	08003504 	.word	0x08003504

080013f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013f8:	f7ff ffdc 	bl	80013b4 <HAL_RCC_GetHCLKFreq>
 80013fc:	0001      	movs	r1, r0
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	0adb      	lsrs	r3, r3, #11
 8001404:	2207      	movs	r2, #7
 8001406:	4013      	ands	r3, r2
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <HAL_RCC_GetPCLK2Freq+0x28>)
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	40d9      	lsrs	r1, r3
 800140e:	000b      	movs	r3, r1
}
 8001410:	0018      	movs	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	40021000 	.word	0x40021000
 800141c:	08003504 	.word	0x08003504

08001420 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2220      	movs	r2, #32
 800142e:	4013      	ands	r3, r2
 8001430:	d100      	bne.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8001432:	e0c7      	b.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001434:	2317      	movs	r3, #23
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143c:	4b82      	ldr	r3, [pc, #520]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800143e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	055b      	lsls	r3, r3, #21
 8001444:	4013      	ands	r3, r2
 8001446:	d10a      	bne.n	800145e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001448:	4b7f      	ldr	r3, [pc, #508]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800144a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800144c:	4b7e      	ldr	r3, [pc, #504]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	0549      	lsls	r1, r1, #21
 8001452:	430a      	orrs	r2, r1
 8001454:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001456:	2317      	movs	r3, #23
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145e:	4b7b      	ldr	r3, [pc, #492]	; (800164c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4013      	ands	r3, r2
 8001468:	d11a      	bne.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146a:	4b78      	ldr	r3, [pc, #480]	; (800164c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4b77      	ldr	r3, [pc, #476]	; (800164c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	0049      	lsls	r1, r1, #1
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001478:	f7ff f814 	bl	80004a4 <HAL_GetTick>
 800147c:	0003      	movs	r3, r0
 800147e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	e008      	b.n	8001494 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001482:	f7ff f80f 	bl	80004a4 <HAL_GetTick>
 8001486:	0002      	movs	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b64      	cmp	r3, #100	; 0x64
 800148e:	d901      	bls.n	8001494 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e0d4      	b.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001494:	4b6d      	ldr	r3, [pc, #436]	; (800164c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4013      	ands	r3, r2
 800149e:	d0f0      	beq.n	8001482 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80014a0:	4b69      	ldr	r3, [pc, #420]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	23c0      	movs	r3, #192	; 0xc0
 80014a6:	039b      	lsls	r3, r3, #14
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	23c0      	movs	r3, #192	; 0xc0
 80014b2:	039b      	lsls	r3, r3, #14
 80014b4:	4013      	ands	r3, r2
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d013      	beq.n	80014e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	23c0      	movs	r3, #192	; 0xc0
 80014c2:	029b      	lsls	r3, r3, #10
 80014c4:	401a      	ands	r2, r3
 80014c6:	23c0      	movs	r3, #192	; 0xc0
 80014c8:	029b      	lsls	r3, r3, #10
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d10a      	bne.n	80014e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80014ce:	4b5e      	ldr	r3, [pc, #376]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	029b      	lsls	r3, r3, #10
 80014d6:	401a      	ands	r2, r3
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	029b      	lsls	r3, r3, #10
 80014dc:	429a      	cmp	r2, r3
 80014de:	d101      	bne.n	80014e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0ac      	b.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80014e4:	4b58      	ldr	r3, [pc, #352]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80014e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014e8:	23c0      	movs	r3, #192	; 0xc0
 80014ea:	029b      	lsls	r3, r3, #10
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d03b      	beq.n	800156e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	23c0      	movs	r3, #192	; 0xc0
 80014fc:	029b      	lsls	r3, r3, #10
 80014fe:	4013      	ands	r3, r2
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	429a      	cmp	r2, r3
 8001504:	d033      	beq.n	800156e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2220      	movs	r2, #32
 800150c:	4013      	ands	r3, r2
 800150e:	d02e      	beq.n	800156e <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001510:	4b4d      	ldr	r3, [pc, #308]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001514:	4a4e      	ldr	r2, [pc, #312]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001516:	4013      	ands	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800151a:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800151c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800151e:	4b4a      	ldr	r3, [pc, #296]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	0309      	lsls	r1, r1, #12
 8001524:	430a      	orrs	r2, r1
 8001526:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001528:	4b47      	ldr	r3, [pc, #284]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800152a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800152c:	4b46      	ldr	r3, [pc, #280]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800152e:	4949      	ldr	r1, [pc, #292]	; (8001654 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001530:	400a      	ands	r2, r1
 8001532:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001534:	4b44      	ldr	r3, [pc, #272]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4013      	ands	r3, r2
 8001542:	d014      	beq.n	800156e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7fe ffae 	bl	80004a4 <HAL_GetTick>
 8001548:	0003      	movs	r3, r0
 800154a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800154c:	e009      	b.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7fe ffa9 	bl	80004a4 <HAL_GetTick>
 8001552:	0002      	movs	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	4a3f      	ldr	r2, [pc, #252]	; (8001658 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e06d      	b.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001562:	4b39      	ldr	r3, [pc, #228]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001564:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d0ef      	beq.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	23c0      	movs	r3, #192	; 0xc0
 8001574:	029b      	lsls	r3, r3, #10
 8001576:	401a      	ands	r2, r3
 8001578:	23c0      	movs	r3, #192	; 0xc0
 800157a:	029b      	lsls	r3, r3, #10
 800157c:	429a      	cmp	r2, r3
 800157e:	d10c      	bne.n	800159a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001580:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a35      	ldr	r2, [pc, #212]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001586:	4013      	ands	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	23c0      	movs	r3, #192	; 0xc0
 8001590:	039b      	lsls	r3, r3, #14
 8001592:	401a      	ands	r2, r3
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800159c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	23c0      	movs	r3, #192	; 0xc0
 80015a4:	029b      	lsls	r3, r3, #10
 80015a6:	401a      	ands	r2, r3
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015aa:	430a      	orrs	r2, r1
 80015ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ae:	2317      	movs	r3, #23
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b8:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015be:	4928      	ldr	r1, [pc, #160]	; (8001660 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2202      	movs	r2, #2
 80015ca:	4013      	ands	r3, r2
 80015cc:	d009      	beq.n	80015e2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	220c      	movs	r2, #12
 80015d4:	4393      	bics	r3, r2
 80015d6:	0019      	movs	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015de:	430a      	orrs	r2, r1
 80015e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2204      	movs	r2, #4
 80015e8:	4013      	ands	r3, r2
 80015ea:	d009      	beq.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f0:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015fc:	430a      	orrs	r2, r1
 80015fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2208      	movs	r2, #8
 8001606:	4013      	ands	r3, r2
 8001608:	d009      	beq.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	4a16      	ldr	r2, [pc, #88]	; (8001668 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001610:	4013      	ands	r3, r2
 8001612:	0019      	movs	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800161a:	430a      	orrs	r2, r1
 800161c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	4013      	ands	r3, r2
 8001626:	d009      	beq.n	800163c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	4a0f      	ldr	r2, [pc, #60]	; (800166c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800162e:	4013      	ands	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001638:	430a      	orrs	r2, r1
 800163a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b006      	add	sp, #24
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	40021000 	.word	0x40021000
 800164c:	40007000 	.word	0x40007000
 8001650:	fffcffff 	.word	0xfffcffff
 8001654:	fff7ffff 	.word	0xfff7ffff
 8001658:	00001388 	.word	0x00001388
 800165c:	ffcfffff 	.word	0xffcfffff
 8001660:	efffffff 	.word	0xefffffff
 8001664:	fffff3ff 	.word	0xfffff3ff
 8001668:	ffffcfff 	.word	0xffffcfff
 800166c:	fff3ffff 	.word	0xfff3ffff

08001670 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e051      	b.n	8001726 <HAL_SPI_Init+0xb6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2251      	movs	r2, #81	; 0x51
 800168c:	5c9b      	ldrb	r3, [r3, r2]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2250      	movs	r2, #80	; 0x50
 8001698:	2100      	movs	r1, #0
 800169a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	0018      	movs	r0, r3
 80016a0:	f001 f944 	bl	800292c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2251      	movs	r2, #81	; 0x51
 80016a8:	2102      	movs	r1, #2
 80016aa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2140      	movs	r1, #64	; 0x40
 80016b8:	438a      	bics	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6999      	ldr	r1, [r3, #24]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	400b      	ands	r3, r1
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	0011      	movs	r1, r2
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	0c1b      	lsrs	r3, r3, #16
 8001704:	2204      	movs	r2, #4
 8001706:	4013      	ands	r3, r2
 8001708:	0019      	movs	r1, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2251      	movs	r2, #81	; 0x51
 8001720:	2101      	movs	r1, #1
 8001722:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b002      	add	sp, #8
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e044      	b.n	80017cc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001746:	2b00      	cmp	r3, #0
 8001748:	d107      	bne.n	800175a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2270      	movs	r2, #112	; 0x70
 800174e:	2100      	movs	r1, #0
 8001750:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	0018      	movs	r0, r3
 8001756:	f001 f951 	bl	80029fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2224      	movs	r2, #36	; 0x24
 800175e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2101      	movs	r1, #1
 800176c:	438a      	bics	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	0018      	movs	r0, r3
 8001774:	f000 f8d8 	bl	8001928 <UART_SetConfig>
 8001778:	0003      	movs	r3, r0
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e024      	b.n	80017cc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	0018      	movs	r0, r3
 800178e:	f000 fba5 	bl	8001edc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	490d      	ldr	r1, [pc, #52]	; (80017d4 <HAL_UART_Init+0xa4>)
 800179e:	400a      	ands	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	212a      	movs	r1, #42	; 0x2a
 80017ae:	438a      	bics	r2, r1
 80017b0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2101      	movs	r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	0018      	movs	r0, r3
 80017c6:	f000 fc3d 	bl	8002044 <UART_CheckIdleState>
 80017ca:	0003      	movs	r3, r0
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b002      	add	sp, #8
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	ffffb7ff 	.word	0xffffb7ff

080017d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	1dbb      	adds	r3, r7, #6
 80017e6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ec:	2b20      	cmp	r3, #32
 80017ee:	d000      	beq.n	80017f2 <HAL_UART_Transmit+0x1a>
 80017f0:	e094      	b.n	800191c <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_UART_Transmit+0x28>
 80017f8:	1dbb      	adds	r3, r7, #6
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e08c      	b.n	800191e <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	015b      	lsls	r3, r3, #5
 800180c:	429a      	cmp	r2, r3
 800180e:	d109      	bne.n	8001824 <HAL_UART_Transmit+0x4c>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d105      	bne.n	8001824 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2201      	movs	r2, #1
 800181c:	4013      	ands	r3, r2
 800181e:	d001      	beq.n	8001824 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e07c      	b.n	800191e <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2270      	movs	r2, #112	; 0x70
 8001828:	5c9b      	ldrb	r3, [r3, r2]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_UART_Transmit+0x5a>
 800182e:	2302      	movs	r3, #2
 8001830:	e075      	b.n	800191e <HAL_UART_Transmit+0x146>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2270      	movs	r2, #112	; 0x70
 8001836:	2101      	movs	r1, #1
 8001838:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2221      	movs	r2, #33	; 0x21
 8001844:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001846:	f7fe fe2d 	bl	80004a4 <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1dba      	adds	r2, r7, #6
 8001852:	2150      	movs	r1, #80	; 0x50
 8001854:	8812      	ldrh	r2, [r2, #0]
 8001856:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1dba      	adds	r2, r7, #6
 800185c:	2152      	movs	r1, #82	; 0x52
 800185e:	8812      	ldrh	r2, [r2, #0]
 8001860:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	015b      	lsls	r3, r3, #5
 800186a:	429a      	cmp	r2, r3
 800186c:	d108      	bne.n	8001880 <HAL_UART_Transmit+0xa8>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d104      	bne.n	8001880 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	e003      	b.n	8001888 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001888:	e02c      	b.n	80018e4 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	0013      	movs	r3, r2
 8001894:	2200      	movs	r2, #0
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	f000 fc1a 	bl	80020d0 <UART_WaitOnFlagUntilTimeout>
 800189c:	1e03      	subs	r3, r0, #0
 800189e:	d001      	beq.n	80018a4 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e03c      	b.n	800191e <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10b      	bne.n	80018c2 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	001a      	movs	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	05d2      	lsls	r2, r2, #23
 80018b6:	0dd2      	lsrs	r2, r2, #23
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	3302      	adds	r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	e007      	b.n	80018d2 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	3301      	adds	r3, #1
 80018d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2252      	movs	r2, #82	; 0x52
 80018d6:	5a9b      	ldrh	r3, [r3, r2]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	3b01      	subs	r3, #1
 80018dc:	b299      	uxth	r1, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2252      	movs	r2, #82	; 0x52
 80018e2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2252      	movs	r2, #82	; 0x52
 80018e8:	5a9b      	ldrh	r3, [r3, r2]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1cc      	bne.n	800188a <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	0013      	movs	r3, r2
 80018fa:	2200      	movs	r2, #0
 80018fc:	2140      	movs	r1, #64	; 0x40
 80018fe:	f000 fbe7 	bl	80020d0 <UART_WaitOnFlagUntilTimeout>
 8001902:	1e03      	subs	r3, r0, #0
 8001904:	d001      	beq.n	800190a <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e009      	b.n	800191e <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2220      	movs	r2, #32
 800190e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2270      	movs	r2, #112	; 0x70
 8001914:	2100      	movs	r1, #0
 8001916:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	e000      	b.n	800191e <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 800191c:	2302      	movs	r3, #2
  }
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b008      	add	sp, #32
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b08e      	sub	sp, #56	; 0x38
 800192c:	af00      	add	r7, sp, #0
 800192e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001930:	231b      	movs	r3, #27
 8001932:	2218      	movs	r2, #24
 8001934:	4694      	mov	ip, r2
 8001936:	44bc      	add	ip, r7
 8001938:	4463      	add	r3, ip
 800193a:	2210      	movs	r2, #16
 800193c:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800193e:	2300      	movs	r3, #0
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8001942:	2313      	movs	r3, #19
 8001944:	2218      	movs	r2, #24
 8001946:	4694      	mov	ip, r2
 8001948:	44bc      	add	ip, r7
 800194a:	4463      	add	r3, ip
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	431a      	orrs	r2, r3
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	431a      	orrs	r2, r3
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	4313      	orrs	r3, r2
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4ace      	ldr	r2, [pc, #824]	; (8001cac <UART_SetConfig+0x384>)
 8001974:	4013      	ands	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4ac9      	ldr	r2, [pc, #804]	; (8001cb0 <UART_SetConfig+0x388>)
 800198a:	4013      	ands	r3, r2
 800198c:	0019      	movs	r1, r3
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4ac3      	ldr	r2, [pc, #780]	; (8001cb4 <UART_SetConfig+0x38c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d004      	beq.n	80019b4 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019b0:	4313      	orrs	r3, r2
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	4abf      	ldr	r2, [pc, #764]	; (8001cb8 <UART_SetConfig+0x390>)
 80019bc:	4013      	ands	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019c6:	430a      	orrs	r2, r1
 80019c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4abb      	ldr	r2, [pc, #748]	; (8001cbc <UART_SetConfig+0x394>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d137      	bne.n	8001a44 <UART_SetConfig+0x11c>
 80019d4:	4bba      	ldr	r3, [pc, #744]	; (8001cc0 <UART_SetConfig+0x398>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	220c      	movs	r2, #12
 80019da:	4013      	ands	r3, r2
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d018      	beq.n	8001a12 <UART_SetConfig+0xea>
 80019e0:	d802      	bhi.n	80019e8 <UART_SetConfig+0xc0>
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <UART_SetConfig+0xca>
 80019e6:	e024      	b.n	8001a32 <UART_SetConfig+0x10a>
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d00a      	beq.n	8001a02 <UART_SetConfig+0xda>
 80019ec:	2b0c      	cmp	r3, #12
 80019ee:	d018      	beq.n	8001a22 <UART_SetConfig+0xfa>
 80019f0:	e01f      	b.n	8001a32 <UART_SetConfig+0x10a>
 80019f2:	231b      	movs	r3, #27
 80019f4:	2218      	movs	r2, #24
 80019f6:	4694      	mov	ip, r2
 80019f8:	44bc      	add	ip, r7
 80019fa:	4463      	add	r3, ip
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
 8001a00:	e06e      	b.n	8001ae0 <UART_SetConfig+0x1b8>
 8001a02:	231b      	movs	r3, #27
 8001a04:	2218      	movs	r2, #24
 8001a06:	4694      	mov	ip, r2
 8001a08:	44bc      	add	ip, r7
 8001a0a:	4463      	add	r3, ip
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	e066      	b.n	8001ae0 <UART_SetConfig+0x1b8>
 8001a12:	231b      	movs	r3, #27
 8001a14:	2218      	movs	r2, #24
 8001a16:	4694      	mov	ip, r2
 8001a18:	44bc      	add	ip, r7
 8001a1a:	4463      	add	r3, ip
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	e05e      	b.n	8001ae0 <UART_SetConfig+0x1b8>
 8001a22:	231b      	movs	r3, #27
 8001a24:	2218      	movs	r2, #24
 8001a26:	4694      	mov	ip, r2
 8001a28:	44bc      	add	ip, r7
 8001a2a:	4463      	add	r3, ip
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	e056      	b.n	8001ae0 <UART_SetConfig+0x1b8>
 8001a32:	231b      	movs	r3, #27
 8001a34:	2218      	movs	r2, #24
 8001a36:	4694      	mov	ip, r2
 8001a38:	44bc      	add	ip, r7
 8001a3a:	4463      	add	r3, ip
 8001a3c:	2210      	movs	r2, #16
 8001a3e:	701a      	strb	r2, [r3, #0]
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	e04d      	b.n	8001ae0 <UART_SetConfig+0x1b8>
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a9a      	ldr	r2, [pc, #616]	; (8001cb4 <UART_SetConfig+0x38c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d141      	bne.n	8001ad2 <UART_SetConfig+0x1aa>
 8001a4e:	4b9c      	ldr	r3, [pc, #624]	; (8001cc0 <UART_SetConfig+0x398>)
 8001a50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a52:	23c0      	movs	r3, #192	; 0xc0
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	4013      	ands	r3, r2
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	00d2      	lsls	r2, r2, #3
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d01f      	beq.n	8001aa0 <UART_SetConfig+0x178>
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	00d2      	lsls	r2, r2, #3
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d802      	bhi.n	8001a6e <UART_SetConfig+0x146>
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d009      	beq.n	8001a80 <UART_SetConfig+0x158>
 8001a6c:	e028      	b.n	8001ac0 <UART_SetConfig+0x198>
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00c      	beq.n	8001a90 <UART_SetConfig+0x168>
 8001a76:	22c0      	movs	r2, #192	; 0xc0
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d018      	beq.n	8001ab0 <UART_SetConfig+0x188>
 8001a7e:	e01f      	b.n	8001ac0 <UART_SetConfig+0x198>
 8001a80:	231b      	movs	r3, #27
 8001a82:	2218      	movs	r2, #24
 8001a84:	4694      	mov	ip, r2
 8001a86:	44bc      	add	ip, r7
 8001a88:	4463      	add	r3, ip
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	e027      	b.n	8001ae0 <UART_SetConfig+0x1b8>
 8001a90:	231b      	movs	r3, #27
 8001a92:	2218      	movs	r2, #24
 8001a94:	4694      	mov	ip, r2
 8001a96:	44bc      	add	ip, r7
 8001a98:	4463      	add	r3, ip
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	e01f      	b.n	8001ae0 <UART_SetConfig+0x1b8>
 8001aa0:	231b      	movs	r3, #27
 8001aa2:	2218      	movs	r2, #24
 8001aa4:	4694      	mov	ip, r2
 8001aa6:	44bc      	add	ip, r7
 8001aa8:	4463      	add	r3, ip
 8001aaa:	2204      	movs	r2, #4
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	e017      	b.n	8001ae0 <UART_SetConfig+0x1b8>
 8001ab0:	231b      	movs	r3, #27
 8001ab2:	2218      	movs	r2, #24
 8001ab4:	4694      	mov	ip, r2
 8001ab6:	44bc      	add	ip, r7
 8001ab8:	4463      	add	r3, ip
 8001aba:	2208      	movs	r2, #8
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e00f      	b.n	8001ae0 <UART_SetConfig+0x1b8>
 8001ac0:	231b      	movs	r3, #27
 8001ac2:	2218      	movs	r2, #24
 8001ac4:	4694      	mov	ip, r2
 8001ac6:	44bc      	add	ip, r7
 8001ac8:	4463      	add	r3, ip
 8001aca:	2210      	movs	r2, #16
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	e006      	b.n	8001ae0 <UART_SetConfig+0x1b8>
 8001ad2:	231b      	movs	r3, #27
 8001ad4:	2218      	movs	r2, #24
 8001ad6:	4694      	mov	ip, r2
 8001ad8:	44bc      	add	ip, r7
 8001ada:	4463      	add	r3, ip
 8001adc:	2210      	movs	r2, #16
 8001ade:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a73      	ldr	r2, [pc, #460]	; (8001cb4 <UART_SetConfig+0x38c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d000      	beq.n	8001aec <UART_SetConfig+0x1c4>
 8001aea:	e083      	b.n	8001bf4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001aec:	231b      	movs	r3, #27
 8001aee:	2218      	movs	r2, #24
 8001af0:	4694      	mov	ip, r2
 8001af2:	44bc      	add	ip, r7
 8001af4:	4463      	add	r3, ip
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d00d      	beq.n	8001b18 <UART_SetConfig+0x1f0>
 8001afc:	dc02      	bgt.n	8001b04 <UART_SetConfig+0x1dc>
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <UART_SetConfig+0x1e6>
 8001b02:	e01d      	b.n	8001b40 <UART_SetConfig+0x218>
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d012      	beq.n	8001b2e <UART_SetConfig+0x206>
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d015      	beq.n	8001b38 <UART_SetConfig+0x210>
 8001b0c:	e018      	b.n	8001b40 <UART_SetConfig+0x218>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001b0e:	f7ff fc5b 	bl	80013c8 <HAL_RCC_GetPCLK1Freq>
 8001b12:	0003      	movs	r3, r0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001b16:	e01b      	b.n	8001b50 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b18:	4b69      	ldr	r3, [pc, #420]	; (8001cc0 <UART_SetConfig+0x398>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d002      	beq.n	8001b28 <UART_SetConfig+0x200>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8001b22:	4b68      	ldr	r3, [pc, #416]	; (8001cc4 <UART_SetConfig+0x39c>)
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8001b26:	e013      	b.n	8001b50 <UART_SetConfig+0x228>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001b28:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <UART_SetConfig+0x3a0>)
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001b2c:	e010      	b.n	8001b50 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001b2e:	f7ff fbbd 	bl	80012ac <HAL_RCC_GetSysClockFreq>
 8001b32:	0003      	movs	r3, r0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001b36:	e00b      	b.n	8001b50 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001b3e:	e007      	b.n	8001b50 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001b40:	2313      	movs	r3, #19
 8001b42:	2218      	movs	r2, #24
 8001b44:	4694      	mov	ip, r2
 8001b46:	44bc      	add	ip, r7
 8001b48:	4463      	add	r3, ip
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
        break;
 8001b4e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d100      	bne.n	8001b58 <UART_SetConfig+0x230>
 8001b56:	e1a7      	b.n	8001ea8 <UART_SetConfig+0x580>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	189b      	adds	r3, r3, r2
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d305      	bcc.n	8001b74 <UART_SetConfig+0x24c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d907      	bls.n	8001b84 <UART_SetConfig+0x25c>
      {
        ret = HAL_ERROR;
 8001b74:	2313      	movs	r3, #19
 8001b76:	2218      	movs	r2, #24
 8001b78:	4694      	mov	ip, r2
 8001b7a:	44bc      	add	ip, r7
 8001b7c:	4463      	add	r3, ip
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	e191      	b.n	8001ea8 <UART_SetConfig+0x580>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	6939      	ldr	r1, [r7, #16]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	000b      	movs	r3, r1
 8001b92:	0e1b      	lsrs	r3, r3, #24
 8001b94:	0010      	movs	r0, r2
 8001b96:	0205      	lsls	r5, r0, #8
 8001b98:	431d      	orrs	r5, r3
 8001b9a:	000b      	movs	r3, r1
 8001b9c:	021c      	lsls	r4, r3, #8
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	085b      	lsrs	r3, r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68b8      	ldr	r0, [r7, #8]
 8001bac:	68f9      	ldr	r1, [r7, #12]
 8001bae:	1900      	adds	r0, r0, r4
 8001bb0:	4169      	adcs	r1, r5
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f7fe fb2e 	bl	8000220 <__aeabi_uldivmod>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	000c      	movs	r4, r1
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	4a3f      	ldr	r2, [pc, #252]	; (8001ccc <UART_SetConfig+0x3a4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d908      	bls.n	8001be4 <UART_SetConfig+0x2bc>
 8001bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd4:	4a3e      	ldr	r2, [pc, #248]	; (8001cd0 <UART_SetConfig+0x3a8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d804      	bhi.n	8001be4 <UART_SetConfig+0x2bc>
        {
          huart->Instance->BRR = usartdiv;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	e161      	b.n	8001ea8 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8001be4:	2313      	movs	r3, #19
 8001be6:	2218      	movs	r2, #24
 8001be8:	4694      	mov	ip, r2
 8001bea:	44bc      	add	ip, r7
 8001bec:	4463      	add	r3, ip
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e159      	b.n	8001ea8 <UART_SetConfig+0x580>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	69da      	ldr	r2, [r3, #28]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d000      	beq.n	8001c02 <UART_SetConfig+0x2da>
 8001c00:	e0c4      	b.n	8001d8c <UART_SetConfig+0x464>
  {
    switch (clocksource)
 8001c02:	231b      	movs	r3, #27
 8001c04:	2218      	movs	r2, #24
 8001c06:	4694      	mov	ip, r2
 8001c08:	44bc      	add	ip, r7
 8001c0a:	4463      	add	r3, ip
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d900      	bls.n	8001c14 <UART_SetConfig+0x2ec>
 8001c12:	e087      	b.n	8001d24 <UART_SetConfig+0x3fc>
 8001c14:	009a      	lsls	r2, r3, #2
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <UART_SetConfig+0x3ac>)
 8001c18:	18d3      	adds	r3, r2, r3
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c1e:	f7ff fbd3 	bl	80013c8 <HAL_RCC_GetPCLK1Freq>
 8001c22:	0003      	movs	r3, r0
 8001c24:	005a      	lsls	r2, r3, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	18d2      	adds	r2, r2, r3
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0019      	movs	r1, r3
 8001c34:	0010      	movs	r0, r2
 8001c36:	f7fe fa67 	bl	8000108 <__udivsi3>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001c40:	e078      	b.n	8001d34 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c42:	f7ff fbd7 	bl	80013f4 <HAL_RCC_GetPCLK2Freq>
 8001c46:	0003      	movs	r3, r0
 8001c48:	005a      	lsls	r2, r3, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	18d2      	adds	r2, r2, r3
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	0019      	movs	r1, r3
 8001c58:	0010      	movs	r0, r2
 8001c5a:	f7fe fa55 	bl	8000108 <__udivsi3>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001c64:	e066      	b.n	8001d34 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <UART_SetConfig+0x398>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2210      	movs	r2, #16
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d00e      	beq.n	8001c8e <UART_SetConfig+0x366>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	085b      	lsrs	r3, r3, #1
 8001c76:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <UART_SetConfig+0x3b0>)
 8001c78:	189a      	adds	r2, r3, r2
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	0019      	movs	r1, r3
 8001c80:	0010      	movs	r0, r2
 8001c82:	f7fe fa41 	bl	8000108 <__udivsi3>
 8001c86:	0003      	movs	r3, r0
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8001c8c:	e052      	b.n	8001d34 <UART_SetConfig+0x40c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <UART_SetConfig+0x3b4>)
 8001c96:	189a      	adds	r2, r3, r2
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	0010      	movs	r0, r2
 8001ca0:	f7fe fa32 	bl	8000108 <__udivsi3>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001caa:	e043      	b.n	8001d34 <UART_SetConfig+0x40c>
 8001cac:	efff69f3 	.word	0xefff69f3
 8001cb0:	ffffcfff 	.word	0xffffcfff
 8001cb4:	40004800 	.word	0x40004800
 8001cb8:	fffff4ff 	.word	0xfffff4ff
 8001cbc:	40004400 	.word	0x40004400
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	003d0900 	.word	0x003d0900
 8001cc8:	00f42400 	.word	0x00f42400
 8001ccc:	000002ff 	.word	0x000002ff
 8001cd0:	000fffff 	.word	0x000fffff
 8001cd4:	080034ac 	.word	0x080034ac
 8001cd8:	007a1200 	.word	0x007a1200
 8001cdc:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ce0:	f7ff fae4 	bl	80012ac <HAL_RCC_GetSysClockFreq>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	005a      	lsls	r2, r3, #1
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	085b      	lsrs	r3, r3, #1
 8001cee:	18d2      	adds	r2, r2, r3
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	0010      	movs	r0, r2
 8001cf8:	f7fe fa06 	bl	8000108 <__udivsi3>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001d02:	e017      	b.n	8001d34 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	0252      	lsls	r2, r2, #9
 8001d0e:	189a      	adds	r2, r3, r2
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	0019      	movs	r1, r3
 8001d16:	0010      	movs	r0, r2
 8001d18:	f7fe f9f6 	bl	8000108 <__udivsi3>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001d22:	e007      	b.n	8001d34 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001d24:	2313      	movs	r3, #19
 8001d26:	2218      	movs	r2, #24
 8001d28:	4694      	mov	ip, r2
 8001d2a:	44bc      	add	ip, r7
 8001d2c:	4463      	add	r3, ip
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
        break;
 8001d32:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d36:	2b0f      	cmp	r3, #15
 8001d38:	d920      	bls.n	8001d7c <UART_SetConfig+0x454>
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	4a62      	ldr	r2, [pc, #392]	; (8001ec8 <UART_SetConfig+0x5a0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d81c      	bhi.n	8001d7c <UART_SetConfig+0x454>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	200a      	movs	r0, #10
 8001d48:	2418      	movs	r4, #24
 8001d4a:	193b      	adds	r3, r7, r4
 8001d4c:	181b      	adds	r3, r3, r0
 8001d4e:	210f      	movs	r1, #15
 8001d50:	438a      	bics	r2, r1
 8001d52:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d56:	085b      	lsrs	r3, r3, #1
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	b299      	uxth	r1, r3
 8001d60:	193b      	adds	r3, r7, r4
 8001d62:	181b      	adds	r3, r3, r0
 8001d64:	193a      	adds	r2, r7, r4
 8001d66:	1812      	adds	r2, r2, r0
 8001d68:	8812      	ldrh	r2, [r2, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	193a      	adds	r2, r7, r4
 8001d74:	1812      	adds	r2, r2, r0
 8001d76:	8812      	ldrh	r2, [r2, #0]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	e095      	b.n	8001ea8 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8001d7c:	2313      	movs	r3, #19
 8001d7e:	2218      	movs	r2, #24
 8001d80:	4694      	mov	ip, r2
 8001d82:	44bc      	add	ip, r7
 8001d84:	4463      	add	r3, ip
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	e08d      	b.n	8001ea8 <UART_SetConfig+0x580>
    }
  }
  else
  {
    switch (clocksource)
 8001d8c:	231b      	movs	r3, #27
 8001d8e:	2218      	movs	r2, #24
 8001d90:	4694      	mov	ip, r2
 8001d92:	44bc      	add	ip, r7
 8001d94:	4463      	add	r3, ip
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d86a      	bhi.n	8001e72 <UART_SetConfig+0x54a>
 8001d9c:	009a      	lsls	r2, r3, #2
 8001d9e:	4b4b      	ldr	r3, [pc, #300]	; (8001ecc <UART_SetConfig+0x5a4>)
 8001da0:	18d3      	adds	r3, r2, r3
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001da6:	f7ff fb0f 	bl	80013c8 <HAL_RCC_GetPCLK1Freq>
 8001daa:	0002      	movs	r2, r0
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	18d2      	adds	r2, r2, r3
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	0019      	movs	r1, r3
 8001dba:	0010      	movs	r0, r2
 8001dbc:	f7fe f9a4 	bl	8000108 <__udivsi3>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001dc6:	e05c      	b.n	8001e82 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001dc8:	f7ff fb14 	bl	80013f4 <HAL_RCC_GetPCLK2Freq>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	085b      	lsrs	r3, r3, #1
 8001dd4:	18d2      	adds	r2, r2, r3
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	0019      	movs	r1, r3
 8001ddc:	0010      	movs	r0, r2
 8001dde:	f7fe f993 	bl	8000108 <__udivsi3>
 8001de2:	0003      	movs	r3, r0
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001de8:	e04b      	b.n	8001e82 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dea:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <UART_SetConfig+0x5a8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2210      	movs	r2, #16
 8001df0:	4013      	ands	r3, r2
 8001df2:	d00e      	beq.n	8001e12 <UART_SetConfig+0x4ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	4a36      	ldr	r2, [pc, #216]	; (8001ed4 <UART_SetConfig+0x5ac>)
 8001dfc:	189a      	adds	r2, r3, r2
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	0019      	movs	r1, r3
 8001e04:	0010      	movs	r0, r2
 8001e06:	f7fe f97f 	bl	8000108 <__udivsi3>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8001e10:	e037      	b.n	8001e82 <UART_SetConfig+0x55a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	085b      	lsrs	r3, r3, #1
 8001e18:	4a2f      	ldr	r2, [pc, #188]	; (8001ed8 <UART_SetConfig+0x5b0>)
 8001e1a:	189a      	adds	r2, r3, r2
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0019      	movs	r1, r3
 8001e22:	0010      	movs	r0, r2
 8001e24:	f7fe f970 	bl	8000108 <__udivsi3>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001e2e:	e028      	b.n	8001e82 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e30:	f7ff fa3c 	bl	80012ac <HAL_RCC_GetSysClockFreq>
 8001e34:	0002      	movs	r2, r0
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	18d2      	adds	r2, r2, r3
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	0019      	movs	r1, r3
 8001e44:	0010      	movs	r0, r2
 8001e46:	f7fe f95f 	bl	8000108 <__udivsi3>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001e50:	e017      	b.n	8001e82 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	0212      	lsls	r2, r2, #8
 8001e5c:	189a      	adds	r2, r3, r2
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	0019      	movs	r1, r3
 8001e64:	0010      	movs	r0, r2
 8001e66:	f7fe f94f 	bl	8000108 <__udivsi3>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001e70:	e007      	b.n	8001e82 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001e72:	2313      	movs	r3, #19
 8001e74:	2218      	movs	r2, #24
 8001e76:	4694      	mov	ip, r2
 8001e78:	44bc      	add	ip, r7
 8001e7a:	4463      	add	r3, ip
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
        break;
 8001e80:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	2b0f      	cmp	r3, #15
 8001e86:	d908      	bls.n	8001e9a <UART_SetConfig+0x572>
 8001e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ec8 <UART_SetConfig+0x5a0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d804      	bhi.n	8001e9a <UART_SetConfig+0x572>
    {
      huart->Instance->BRR = usartdiv;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	e006      	b.n	8001ea8 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8001e9a:	2313      	movs	r3, #19
 8001e9c:	2218      	movs	r2, #24
 8001e9e:	4694      	mov	ip, r2
 8001ea0:	44bc      	add	ip, r7
 8001ea2:	4463      	add	r3, ip
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8001eb4:	2313      	movs	r3, #19
 8001eb6:	2218      	movs	r2, #24
 8001eb8:	4694      	mov	ip, r2
 8001eba:	44bc      	add	ip, r7
 8001ebc:	4463      	add	r3, ip
 8001ebe:	781b      	ldrb	r3, [r3, #0]
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b00e      	add	sp, #56	; 0x38
 8001ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec8:	0000ffff 	.word	0x0000ffff
 8001ecc:	080034d0 	.word	0x080034d0
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	003d0900 	.word	0x003d0900
 8001ed8:	00f42400 	.word	0x00f42400

08001edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	d00b      	beq.n	8001f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a4a      	ldr	r2, [pc, #296]	; (8002020 <UART_AdvFeatureConfig+0x144>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	0019      	movs	r1, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d00b      	beq.n	8001f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4a43      	ldr	r2, [pc, #268]	; (8002024 <UART_AdvFeatureConfig+0x148>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d00b      	beq.n	8001f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a3b      	ldr	r2, [pc, #236]	; (8002028 <UART_AdvFeatureConfig+0x14c>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	2208      	movs	r2, #8
 8001f50:	4013      	ands	r3, r2
 8001f52:	d00b      	beq.n	8001f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4a34      	ldr	r2, [pc, #208]	; (800202c <UART_AdvFeatureConfig+0x150>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	2210      	movs	r2, #16
 8001f72:	4013      	ands	r3, r2
 8001f74:	d00b      	beq.n	8001f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	4a2c      	ldr	r2, [pc, #176]	; (8002030 <UART_AdvFeatureConfig+0x154>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	2220      	movs	r2, #32
 8001f94:	4013      	ands	r3, r2
 8001f96:	d00b      	beq.n	8001fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	4a25      	ldr	r2, [pc, #148]	; (8002034 <UART_AdvFeatureConfig+0x158>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	2240      	movs	r2, #64	; 0x40
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d01d      	beq.n	8001ff6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <UART_AdvFeatureConfig+0x15c>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	035b      	lsls	r3, r3, #13
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d10b      	bne.n	8001ff6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a15      	ldr	r2, [pc, #84]	; (800203c <UART_AdvFeatureConfig+0x160>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d00b      	beq.n	8002018 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <UART_AdvFeatureConfig+0x164>)
 8002008:	4013      	ands	r3, r2
 800200a:	0019      	movs	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	605a      	str	r2, [r3, #4]
  }
}
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	b002      	add	sp, #8
 800201e:	bd80      	pop	{r7, pc}
 8002020:	fffdffff 	.word	0xfffdffff
 8002024:	fffeffff 	.word	0xfffeffff
 8002028:	fffbffff 	.word	0xfffbffff
 800202c:	ffff7fff 	.word	0xffff7fff
 8002030:	ffffefff 	.word	0xffffefff
 8002034:	ffffdfff 	.word	0xffffdfff
 8002038:	ffefffff 	.word	0xffefffff
 800203c:	ff9fffff 	.word	0xff9fffff
 8002040:	fff7ffff 	.word	0xfff7ffff

08002044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af02      	add	r7, sp, #8
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002052:	f7fe fa27 	bl	80004a4 <HAL_GetTick>
 8002056:	0003      	movs	r3, r0
 8002058:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2208      	movs	r2, #8
 8002062:	4013      	ands	r3, r2
 8002064:	2b08      	cmp	r3, #8
 8002066:	d10d      	bne.n	8002084 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	0399      	lsls	r1, r3, #14
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <UART_CheckIdleState+0x88>)
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	0013      	movs	r3, r2
 8002076:	2200      	movs	r2, #0
 8002078:	f000 f82a 	bl	80020d0 <UART_WaitOnFlagUntilTimeout>
 800207c:	1e03      	subs	r3, r0, #0
 800207e:	d001      	beq.n	8002084 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e01f      	b.n	80020c4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2204      	movs	r2, #4
 800208c:	4013      	ands	r3, r2
 800208e:	2b04      	cmp	r3, #4
 8002090:	d10d      	bne.n	80020ae <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	03d9      	lsls	r1, r3, #15
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <UART_CheckIdleState+0x88>)
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	0013      	movs	r3, r2
 80020a0:	2200      	movs	r2, #0
 80020a2:	f000 f815 	bl	80020d0 <UART_WaitOnFlagUntilTimeout>
 80020a6:	1e03      	subs	r3, r0, #0
 80020a8:	d001      	beq.n	80020ae <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e00a      	b.n	80020c4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2220      	movs	r2, #32
 80020b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2220      	movs	r2, #32
 80020b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2270      	movs	r2, #112	; 0x70
 80020be:	2100      	movs	r1, #0
 80020c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b004      	add	sp, #16
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	01ffffff 	.word	0x01ffffff

080020d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020e0:	e029      	b.n	8002136 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	3301      	adds	r3, #1
 80020e6:	d026      	beq.n	8002136 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e8:	f7fe f9dc 	bl	80004a4 <HAL_GetTick>
 80020ec:	0002      	movs	r2, r0
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d302      	bcc.n	80020fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d11b      	bne.n	8002136 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4915      	ldr	r1, [pc, #84]	; (8002160 <UART_WaitOnFlagUntilTimeout+0x90>)
 800210a:	400a      	ands	r2, r1
 800210c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	438a      	bics	r2, r1
 800211c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2270      	movs	r2, #112	; 0x70
 800212e:	2100      	movs	r1, #0
 8002130:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e00f      	b.n	8002156 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	4013      	ands	r3, r2
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	425a      	negs	r2, r3
 8002146:	4153      	adcs	r3, r2
 8002148:	b2db      	uxtb	r3, r3
 800214a:	001a      	movs	r2, r3
 800214c:	1dfb      	adds	r3, r7, #7
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d0c6      	beq.n	80020e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b004      	add	sp, #16
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	fffffe5f 	.word	0xfffffe5f

08002164 <SI446X_CB_CMDTIMEOUT>:

// http://stackoverflow.com/questions/10802324/aliasing-a-function-on-a-c-interface-within-a-c-application-on-linux
#if defined(__cplusplus)
extern "C" {
#endif
	static void __empty_callback0(void){}
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <cselect>:
#endif


// CHECK THIS - Bit shifting may be wrong
static inline uint8_t cselect(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0
	CSN_PORT->BSRR = 1 << (SI446X_CSN_BIT + 16); // Bitshifts left to lower half of register.
 8002172:	23a0      	movs	r3, #160	; 0xa0
 8002174:	05db      	lsls	r3, r3, #23
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	0352      	lsls	r2, r2, #13
 800217a:	619a      	str	r2, [r3, #24]
	return 1;
 800217c:	2301      	movs	r3, #1
}
 800217e:	0018      	movs	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <cdeselect>:

static inline uint8_t cdeselect(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	CSN_PORT->BSRR = 1 << (SI446X_CSN_BIT); // Bitshifts left to the upper half of the register.
 8002188:	23a0      	movs	r3, #160	; 0xa0
 800218a:	05db      	lsls	r3, r3, #23
 800218c:	2210      	movs	r2, #16
 800218e:	619a      	str	r2, [r3, #24]
	return 0;
 8002190:	2300      	movs	r3, #0
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <spi_transfer_nr>:


void spi_transfer_nr(uint8_t data)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	0002      	movs	r2, r0
 80021a0:	1dfb      	adds	r3, r7, #7
 80021a2:	701a      	strb	r2, [r3, #0]
	// The following is adapted from: https://stackoverflow.com/questions/56440516/stm32-spi-slow-compute.

    *(volatile uint8_t *)&SPI_PORT->DR = data; // Transmit
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <spi_transfer_nr+0x2c>)
 80021a6:	1dfb      	adds	r3, r7, #7
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	7013      	strb	r3, [r2, #0]
    while((SPI_PORT->SR & (SPI_SR_TXE | SPI_SR_BSY)) != SPI_SR_TXE)
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <spi_transfer_nr+0x30>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2282      	movs	r2, #130	; 0x82
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d1f9      	bne.n	80021ae <spi_transfer_nr+0x16>
        ;
}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	46bd      	mov	sp, r7
 80021be:	b002      	add	sp, #8
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	4001300c 	.word	0x4001300c
 80021c8:	40013000 	.word	0x40013000

080021cc <spi_transfer>:

uint8_t spi_transfer(uint8_t data)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	0002      	movs	r2, r0
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	701a      	strb	r2, [r3, #0]
    *(volatile uint8_t *)&SPI_PORT->DR = data; // Transmit
 80021d8:	4a08      	ldr	r2, [pc, #32]	; (80021fc <spi_transfer+0x30>)
 80021da:	1dfb      	adds	r3, r7, #7
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	7013      	strb	r3, [r2, #0]
    while((SPI_PORT->SR & (SPI_SR_TXE | SPI_SR_BSY)) != SPI_SR_TXE)
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <spi_transfer+0x34>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2282      	movs	r2, #130	; 0x82
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d1f9      	bne.n	80021e2 <spi_transfer+0x16>
        ;

    // Adapted from STM32 HAL files.
    return *(volatile uint8_t *)&SPI_PORT->DR; // Receive
 80021ee:	4b03      	ldr	r3, [pc, #12]	; (80021fc <spi_transfer+0x30>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b2db      	uxtb	r3, r3
}
 80021f4:	0018      	movs	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b002      	add	sp, #8
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	4001300c 	.word	0x4001300c
 8002200:	40013000 	.word	0x40013000

08002204 <receiveResponse>:



// A replacement for getResponse and waitForResponse.
static uint8_t receiveResponse(void* buff, uint8_t len)
{
 8002204:	b5b0      	push	{r4, r5, r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	000a      	movs	r2, r1
 800220e:	1cfb      	adds	r3, r7, #3
 8002210:	701a      	strb	r2, [r3, #0]

	uint8_t cts = 0;
 8002212:	230f      	movs	r3, #15
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]

	while (cts != 0xFF) {
 800221a:	e00d      	b.n	8002238 <receiveResponse+0x34>

		cdeselect();
 800221c:	f7ff ffb2 	bl	8002184 <cdeselect>

		cselect();
 8002220:	f7ff ffa5 	bl	800216e <cselect>
		spi_transfer(0x44);
 8002224:	2044      	movs	r0, #68	; 0x44
 8002226:	f7ff ffd1 	bl	80021cc <spi_transfer>

		cts = spi_transfer(0xFF);
 800222a:	230f      	movs	r3, #15
 800222c:	18fc      	adds	r4, r7, r3
 800222e:	20ff      	movs	r0, #255	; 0xff
 8002230:	f7ff ffcc 	bl	80021cc <spi_transfer>
 8002234:	0003      	movs	r3, r0
 8002236:	7023      	strb	r3, [r4, #0]
	while (cts != 0xFF) {
 8002238:	230f      	movs	r3, #15
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2bff      	cmp	r3, #255	; 0xff
 8002240:	d1ec      	bne.n	800221c <receiveResponse+0x18>
	}

	char buf[4];

	// Get response data
	for(uint8_t i=0;i<len;i++) {
 8002242:	230e      	movs	r3, #14
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	e00e      	b.n	800226a <receiveResponse+0x66>

		((uint8_t*)buff)[i] = spi_transfer(0xFF);
 800224c:	250e      	movs	r5, #14
 800224e:	197b      	adds	r3, r7, r5
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	18d4      	adds	r4, r2, r3
 8002256:	20ff      	movs	r0, #255	; 0xff
 8002258:	f7ff ffb8 	bl	80021cc <spi_transfer>
 800225c:	0003      	movs	r3, r0
 800225e:	7023      	strb	r3, [r4, #0]
	for(uint8_t i=0;i<len;i++) {
 8002260:	197b      	adds	r3, r7, r5
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	197b      	adds	r3, r7, r5
 8002266:	3201      	adds	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	230e      	movs	r3, #14
 800226c:	18fa      	adds	r2, r7, r3
 800226e:	1cfb      	adds	r3, r7, #3
 8002270:	7812      	ldrb	r2, [r2, #0]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d3e9      	bcc.n	800224c <receiveResponse+0x48>

	}

	return cts;
 8002278:	230f      	movs	r3, #15
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	781b      	ldrb	r3, [r3, #0]

}
 800227e:	0018      	movs	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	b004      	add	sp, #16
 8002284:	bdb0      	pop	{r4, r5, r7, pc}

08002286 <getResponse>:



// Read CTS and if its ok then read the command buffer
static uint8_t getResponse(void* buff, uint8_t len)
{
 8002286:	b5b0      	push	{r4, r5, r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	000a      	movs	r2, r1
 8002290:	1cfb      	adds	r3, r7, #3
 8002292:	701a      	strb	r2, [r3, #0]
	uint8_t cts = 0;
 8002294:	230f      	movs	r3, #15
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]

	// SI446X_ATOMIC()
	// { // BEGIN ATOMIC BLOCK.
		CHIPSELECT()
 800229c:	230e      	movs	r3, #14
 800229e:	18fc      	adds	r4, r7, r3
 80022a0:	f7ff ff65 	bl	800216e <cselect>
 80022a4:	0003      	movs	r3, r0
 80022a6:	7023      	strb	r3, [r4, #0]
 80022a8:	e02e      	b.n	8002308 <getResponse+0x82>
		{
			// Send command
			spi_transfer_nr(SI446X_CMD_READ_CMD_BUFF);
 80022aa:	2044      	movs	r0, #68	; 0x44
 80022ac:	f7ff ff74 	bl	8002198 <spi_transfer_nr>

			// Get CTS value
			cts = spi_transfer(0xFF);
 80022b0:	250f      	movs	r5, #15
 80022b2:	197c      	adds	r4, r7, r5
 80022b4:	20ff      	movs	r0, #255	; 0xff
 80022b6:	f7ff ff89 	bl	80021cc <spi_transfer>
 80022ba:	0003      	movs	r3, r0
 80022bc:	7023      	strb	r3, [r4, #0]

			// Print CTS Value
			// HAL_UART_Transmit(&huart2, cts, 1, 0xFFFFFFFF);

			if(cts == 0xFF)
 80022be:	197b      	adds	r3, r7, r5
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2bff      	cmp	r3, #255	; 0xff
 80022c4:	d11a      	bne.n	80022fc <getResponse+0x76>
			{
				// Get response data
				for(uint8_t i=0;i<len;i++)
 80022c6:	230d      	movs	r3, #13
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	e00e      	b.n	80022ee <getResponse+0x68>
					((uint8_t*)buff)[i] = spi_transfer(0xFF);
 80022d0:	250d      	movs	r5, #13
 80022d2:	197b      	adds	r3, r7, r5
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	18d4      	adds	r4, r2, r3
 80022da:	20ff      	movs	r0, #255	; 0xff
 80022dc:	f7ff ff76 	bl	80021cc <spi_transfer>
 80022e0:	0003      	movs	r3, r0
 80022e2:	7023      	strb	r3, [r4, #0]
				for(uint8_t i=0;i<len;i++)
 80022e4:	197b      	adds	r3, r7, r5
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	197b      	adds	r3, r7, r5
 80022ea:	3201      	adds	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	230d      	movs	r3, #13
 80022f0:	18fa      	adds	r2, r7, r3
 80022f2:	1cfb      	adds	r3, r7, #3
 80022f4:	7812      	ldrb	r2, [r2, #0]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d3e9      	bcc.n	80022d0 <getResponse+0x4a>
		CHIPSELECT()
 80022fc:	230e      	movs	r3, #14
 80022fe:	18fc      	adds	r4, r7, r3
 8002300:	f7ff ff40 	bl	8002184 <cdeselect>
 8002304:	0003      	movs	r3, r0
 8002306:	7023      	strb	r3, [r4, #0]
 8002308:	230e      	movs	r3, #14
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1cb      	bne.n	80022aa <getResponse+0x24>
			}
		}
	// } // END OF ATOMIC BLOCK
	return cts;
 8002312:	230f      	movs	r3, #15
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	781b      	ldrb	r3, [r3, #0]
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b004      	add	sp, #16
 800231e:	bdb0      	pop	{r4, r5, r7, pc}

08002320 <waitForResponse>:

// Keep trying to read the command buffer, with timeout of around 500ms
static uint8_t waitForResponse(void* out, uint8_t outLen, uint8_t useTimeout)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	0008      	movs	r0, r1
 800232a:	0011      	movs	r1, r2
 800232c:	1cfb      	adds	r3, r7, #3
 800232e:	1c02      	adds	r2, r0, #0
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	1cbb      	adds	r3, r7, #2
 8002334:	1c0a      	adds	r2, r1, #0
 8002336:	701a      	strb	r2, [r3, #0]
	// With F_CPU at 8MHz and SPI at 4MHz each check takes about 7us + 10us delay
	uint16_t timeout = 500; // This should approximate about the same timeout? However with less checks.
 8002338:	230e      	movs	r3, #14
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	22fa      	movs	r2, #250	; 0xfa
 800233e:	0052      	lsls	r2, r2, #1
 8002340:	801a      	strh	r2, [r3, #0]
	while(!getResponse(out, outLen))
 8002342:	e016      	b.n	8002372 <waitForResponse+0x52>
 8002344:	220e      	movs	r2, #14
 8002346:	18bb      	adds	r3, r7, r2
 8002348:	18ba      	adds	r2, r7, r2
 800234a:	8812      	ldrh	r2, [r2, #0]
 800234c:	801a      	strh	r2, [r3, #0]
	{
		// delay_ms(1); // Hoo boy this is slow. STM32 has no HAL routine for us delay.
		if(useTimeout && !--timeout)
 800234e:	1cbb      	adds	r3, r7, #2
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00d      	beq.n	8002372 <waitForResponse+0x52>
 8002356:	210e      	movs	r1, #14
 8002358:	187b      	adds	r3, r7, r1
 800235a:	187a      	adds	r2, r7, r1
 800235c:	8812      	ldrh	r2, [r2, #0]
 800235e:	3a01      	subs	r2, #1
 8002360:	801a      	strh	r2, [r3, #0]
 8002362:	187b      	adds	r3, r7, r1
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d103      	bne.n	8002372 <waitForResponse+0x52>
		{
			SI446X_CB_CMDTIMEOUT();
 800236a:	f7ff fefb 	bl	8002164 <SI446X_CB_CMDTIMEOUT>
			return 0;
 800236e:	2300      	movs	r3, #0
 8002370:	e009      	b.n	8002386 <waitForResponse+0x66>
	while(!getResponse(out, outLen))
 8002372:	1cfb      	adds	r3, r7, #3
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0011      	movs	r1, r2
 800237a:	0018      	movs	r0, r3
 800237c:	f7ff ff83 	bl	8002286 <getResponse>
 8002380:	1e03      	subs	r3, r0, #0
 8002382:	d0df      	beq.n	8002344 <waitForResponse+0x24>
		}
	}
	return 1;
 8002384:	2301      	movs	r3, #1
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b004      	add	sp, #16
 800238c:	bd80      	pop	{r7, pc}

0800238e <doAPI>:

static void doAPI(void* data, uint8_t len, void* out, uint8_t outLen)
{
 800238e:	b590      	push	{r4, r7, lr}
 8002390:	b087      	sub	sp, #28
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	0008      	movs	r0, r1
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	0019      	movs	r1, r3
 800239c:	230b      	movs	r3, #11
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	1c02      	adds	r2, r0, #0
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	230a      	movs	r3, #10
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	1c0a      	adds	r2, r1, #0
 80023aa:	701a      	strb	r2, [r3, #0]
	//SI446X_NO_INTERRUPT() // DISABLED - Some sort of funky interrupt
	//{
		//if(waitForResponse(NULL, 0, 0)) // Make sure it's ok to send a command (set useTimeout to false) -NJR
		if(receiveResponse(NULL, 0))
 80023ac:	2100      	movs	r1, #0
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7ff ff28 	bl	8002204 <receiveResponse>
 80023b4:	1e03      	subs	r3, r0, #0
 80023b6:	d041      	beq.n	800243c <doAPI+0xae>
		{
			// SI446X_ATOMIC()
			// {
				CHIPSELECT()
 80023b8:	2317      	movs	r3, #23
 80023ba:	18fc      	adds	r4, r7, r3
 80023bc:	f7ff fed7 	bl	800216e <cselect>
 80023c0:	0003      	movs	r3, r0
 80023c2:	7023      	strb	r3, [r4, #0]
 80023c4:	e020      	b.n	8002408 <doAPI+0x7a>
				{
					for(uint8_t i=0;i<len;i++)
 80023c6:	2316      	movs	r3, #22
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e00d      	b.n	80023ec <doAPI+0x5e>
						spi_transfer_nr(((uint8_t*)data)[i]); // (pgm_read_byte(&((uint8_t*)data)[i]));
 80023d0:	2416      	movs	r4, #22
 80023d2:	193b      	adds	r3, r7, r4
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	18d3      	adds	r3, r2, r3
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	0018      	movs	r0, r3
 80023de:	f7ff fedb 	bl	8002198 <spi_transfer_nr>
					for(uint8_t i=0;i<len;i++)
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	781a      	ldrb	r2, [r3, #0]
 80023e6:	193b      	adds	r3, r7, r4
 80023e8:	3201      	adds	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	2316      	movs	r3, #22
 80023ee:	18fa      	adds	r2, r7, r3
 80023f0:	230b      	movs	r3, #11
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d3e9      	bcc.n	80023d0 <doAPI+0x42>
				CHIPSELECT()
 80023fc:	2317      	movs	r3, #23
 80023fe:	18fc      	adds	r4, r7, r3
 8002400:	f7ff fec0 	bl	8002184 <cdeselect>
 8002404:	0003      	movs	r3, r0
 8002406:	7023      	strb	r3, [r4, #0]
 8002408:	2317      	movs	r3, #23
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1d9      	bne.n	80023c6 <doAPI+0x38>
				}
			// }

			if(((uint8_t*)data)[0] == SI446X_CMD_IRCAL) // If we're doing an IRCAL then wait for its completion without a timeout since it can sometimes take a few seconds
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b17      	cmp	r3, #23
 8002418:	d105      	bne.n	8002426 <doAPI+0x98>
				waitForResponse(NULL, 0, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	2000      	movs	r0, #0
 8002420:	f7ff ff7e 	bl	8002320 <waitForResponse>
			else if(out != NULL) // If we have an output buffer then read command response into it
				//waitForResponse(out, outLen, 1);
				receiveResponse(out, outLen);
		}
	//}
}
 8002424:	e00a      	b.n	800243c <doAPI+0xae>
			else if(out != NULL) // If we have an output buffer then read command response into it
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <doAPI+0xae>
				receiveResponse(out, outLen);
 800242c:	230a      	movs	r3, #10
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0011      	movs	r1, r2
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff fee4 	bl	8002204 <receiveResponse>
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b007      	add	sp, #28
 8002442:	bd90      	pop	{r4, r7, pc}

08002444 <Si446x_getInfo>:

	// Si446x_irq_on(1); DISABLED
}

void Si446x_getInfo(si446x_info_t* info)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	uint8_t data[8] = {
 800244c:	2108      	movs	r1, #8
 800244e:	000c      	movs	r4, r1
 8002450:	187b      	adds	r3, r7, r1
 8002452:	0018      	movs	r0, r3
 8002454:	2308      	movs	r3, #8
 8002456:	001a      	movs	r2, r3
 8002458:	2100      	movs	r1, #0
 800245a:	f000 fc0e 	bl	8002c7a <memset>
 800245e:	0021      	movs	r1, r4
 8002460:	187b      	adds	r3, r7, r1
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]
		SI446X_CMD_PART_INFO
	};
	doAPI(data, 1, data, 8);
 8002466:	187a      	adds	r2, r7, r1
 8002468:	000c      	movs	r4, r1
 800246a:	1878      	adds	r0, r7, r1
 800246c:	2308      	movs	r3, #8
 800246e:	2101      	movs	r1, #1
 8002470:	f7ff ff8d 	bl	800238e <doAPI>

	info->chipRev	= data[0];
 8002474:	0021      	movs	r1, r4
 8002476:	187b      	adds	r3, r7, r1
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	701a      	strb	r2, [r3, #0]
	info->part		= (data[1]<<8) | data[2];
 800247e:	187b      	adds	r3, r7, r1
 8002480:	785b      	ldrb	r3, [r3, #1]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	b21a      	sxth	r2, r3
 8002486:	187b      	adds	r3, r7, r1
 8002488:	789b      	ldrb	r3, [r3, #2]
 800248a:	b21b      	sxth	r3, r3
 800248c:	4313      	orrs	r3, r2
 800248e:	b21b      	sxth	r3, r3
 8002490:	b29a      	uxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	805a      	strh	r2, [r3, #2]
	info->partBuild	= data[3];
 8002496:	187b      	adds	r3, r7, r1
 8002498:	78da      	ldrb	r2, [r3, #3]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	711a      	strb	r2, [r3, #4]
	info->id		= (data[4]<<8) | data[5];
 800249e:	187b      	adds	r3, r7, r1
 80024a0:	791b      	ldrb	r3, [r3, #4]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	b21a      	sxth	r2, r3
 80024a6:	187b      	adds	r3, r7, r1
 80024a8:	795b      	ldrb	r3, [r3, #5]
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	80da      	strh	r2, [r3, #6]
	info->customer	= data[6];
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	799a      	ldrb	r2, [r3, #6]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	721a      	strb	r2, [r3, #8]
	info->romId		= data[7];
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	79da      	ldrb	r2, [r3, #7]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	725a      	strb	r2, [r3, #9]

	data[0] = SI446X_CMD_FUNC_INFO;
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	2210      	movs	r2, #16
 80024ca:	701a      	strb	r2, [r3, #0]
	doAPI(data, 1, data, 6);
 80024cc:	187a      	adds	r2, r7, r1
 80024ce:	000c      	movs	r4, r1
 80024d0:	1878      	adds	r0, r7, r1
 80024d2:	2306      	movs	r3, #6
 80024d4:	2101      	movs	r1, #1
 80024d6:	f7ff ff5a 	bl	800238e <doAPI>

	info->revExternal	= data[0];
 80024da:	0021      	movs	r1, r4
 80024dc:	187b      	adds	r3, r7, r1
 80024de:	781a      	ldrb	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	729a      	strb	r2, [r3, #10]
	info->revBranch		= data[1];
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	785a      	ldrb	r2, [r3, #1]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	72da      	strb	r2, [r3, #11]
	info->revInternal	= data[2];
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	789a      	ldrb	r2, [r3, #2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	731a      	strb	r2, [r3, #12]
	info->patch			= (data[3]<<8) | data[4];
 80024f4:	187b      	adds	r3, r7, r1
 80024f6:	78db      	ldrb	r3, [r3, #3]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	b21a      	sxth	r2, r3
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	791b      	ldrb	r3, [r3, #4]
 8002500:	b21b      	sxth	r3, r3
 8002502:	4313      	orrs	r3, r2
 8002504:	b21b      	sxth	r3, r3
 8002506:	b29a      	uxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	81da      	strh	r2, [r3, #14]
	info->func			= data[5];
 800250c:	187b      	adds	r3, r7, r1
 800250e:	795a      	ldrb	r2, [r3, #5]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	741a      	strb	r2, [r3, #16]
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b005      	add	sp, #20
 800251a:	bd90      	pop	{r4, r7, pc}

0800251c <cselect>:
    while((SPI_PORT->SR & (SPI_SR_TXE | SPI_SR_BSY)) != SPI_SR_TXE)
        ;
}
*/
static inline uint8_t cselect(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	GPIOA->BSRR = 1 << (4 + 16); // Bitshifts left to lower half of register. (I.E. Pulls low)
 8002520:	23a0      	movs	r3, #160	; 0xa0
 8002522:	05db      	lsls	r3, r3, #23
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	0352      	lsls	r2, r2, #13
 8002528:	619a      	str	r2, [r3, #24]
	return 1;
 800252a:	2301      	movs	r3, #1
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <cdeselect>:

static inline uint8_t cdeselect(void)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	af00      	add	r7, sp, #0
	GPIOA->BSRR = 1 << (4); // Bitshifts left to the upper half of the register. (I.E. Pulls high)
 8002536:	23a0      	movs	r3, #160	; 0xa0
 8002538:	05db      	lsls	r3, r3, #23
 800253a:	2210      	movs	r2, #16
 800253c:	619a      	str	r2, [r3, #24]
	return 0;
 800253e:	2300      	movs	r3, #0
}
 8002540:	0018      	movs	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b08b      	sub	sp, #44	; 0x2c
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

SystemClock_Config();
 800254e:	f000 f8a3 	bl	8002698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002552:	f000 f97b 	bl	800284c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002556:	f000 f949 	bl	80027ec <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800255a:	f000 f90f 	bl	800277c <MX_SPI1_Init>

  HAL_UART_Transmit(&huart2, "init\n", 5, 0xFFFFFFFF);
 800255e:	2301      	movs	r3, #1
 8002560:	425b      	negs	r3, r3
 8002562:	4948      	ldr	r1, [pc, #288]	; (8002684 <main+0x13c>)
 8002564:	4848      	ldr	r0, [pc, #288]	; (8002688 <main+0x140>)
 8002566:	2205      	movs	r2, #5
 8002568:	f7ff f936 	bl	80017d8 <HAL_UART_Transmit>

  SPI_PORT->CR1 |= SPI_CR1_SPE; // enable spi.
 800256c:	4b47      	ldr	r3, [pc, #284]	; (800268c <main+0x144>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b46      	ldr	r3, [pc, #280]	; (800268c <main+0x144>)
 8002572:	2140      	movs	r1, #64	; 0x40
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

  // si446x_init();

  /* USER CODE BEGIN 2 */
  si446x_info_t info = {};
 8002578:	2414      	movs	r4, #20
 800257a:	193b      	adds	r3, r7, r4
 800257c:	0018      	movs	r0, r3
 800257e:	2312      	movs	r3, #18
 8002580:	001a      	movs	r2, r3
 8002582:	2100      	movs	r1, #0
 8002584:	f000 fb79 	bl	8002c7a <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	// Reset Device
    GPIOB->BSRR = 1 << (6 + 16); // Upper half of BSRR Register corresponds to setting pin LOW.
 8002588:	4b41      	ldr	r3, [pc, #260]	; (8002690 <main+0x148>)
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	03d2      	lsls	r2, r2, #15
 800258e:	619a      	str	r2, [r3, #24]
    HAL_Delay(50);
 8002590:	2032      	movs	r0, #50	; 0x32
 8002592:	f7fd ff91 	bl	80004b8 <HAL_Delay>
    GPIOB->BSRR = 1 << (6); // Upper half of BSRR Register corresponds to setting pin HIGH.
 8002596:	4b3e      	ldr	r3, [pc, #248]	; (8002690 <main+0x148>)
 8002598:	2240      	movs	r2, #64	; 0x40
 800259a:	619a      	str	r2, [r3, #24]
    HAL_Delay(50);
 800259c:	2032      	movs	r0, #50	; 0x32
 800259e:	f7fd ff8b 	bl	80004b8 <HAL_Delay>
    GPIOB->BSRR = 1 << (6 + 16);
 80025a2:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <main+0x148>)
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	03d2      	lsls	r2, r2, #15
 80025a8:	619a      	str	r2, [r3, #24]
    HAL_Delay(50);
 80025aa:	2032      	movs	r0, #50	; 0x32
 80025ac:	f7fd ff84 	bl	80004b8 <HAL_Delay>

	cselect();
 80025b0:	f7ff ffb4 	bl	800251c <cselect>
	spi_transfer_nr(0x01);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f7ff fdef 	bl	8002198 <spi_transfer_nr>
	cdeselect();
 80025ba:	f7ff ffba 	bl	8002532 <cdeselect>

	// HAL_Delay(1);



	HAL_Delay(10);
 80025be:	200a      	movs	r0, #10
 80025c0:	f7fd ff7a 	bl	80004b8 <HAL_Delay>

	//Si446x_init();



	cdeselect();
 80025c4:	f7ff ffb5 	bl	8002532 <cdeselect>

	Si446x_getInfo(&info);
 80025c8:	0021      	movs	r1, r4
 80025ca:	000c      	movs	r4, r1
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	0018      	movs	r0, r3
 80025d0:	f7ff ff38 	bl	8002444 <Si446x_getInfo>

	uint16_t data[6];

	data[0] = (uint16_t)info.chipRev;
 80025d4:	0021      	movs	r1, r4
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	2008      	movs	r0, #8
 80025de:	183b      	adds	r3, r7, r0
 80025e0:	801a      	strh	r2, [r3, #0]
	data[1] = info.part;
 80025e2:	187b      	adds	r3, r7, r1
 80025e4:	885a      	ldrh	r2, [r3, #2]
 80025e6:	183b      	adds	r3, r7, r0
 80025e8:	805a      	strh	r2, [r3, #2]
	data[2] = (uint16_t)info.partBuild;
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	791b      	ldrb	r3, [r3, #4]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	183b      	adds	r3, r7, r0
 80025f2:	809a      	strh	r2, [r3, #4]
	data[3] = info.id;
 80025f4:	187b      	adds	r3, r7, r1
 80025f6:	88da      	ldrh	r2, [r3, #6]
 80025f8:	183b      	adds	r3, r7, r0
 80025fa:	80da      	strh	r2, [r3, #6]
	data[4] = (uint16_t)info.customer;
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	7a1b      	ldrb	r3, [r3, #8]
 8002600:	b29a      	uxth	r2, r3
 8002602:	183b      	adds	r3, r7, r0
 8002604:	811a      	strh	r2, [r3, #8]
	data[5] = (uint16_t)info.romId;
 8002606:	187b      	adds	r3, r7, r1
 8002608:	7a5b      	ldrb	r3, [r3, #9]
 800260a:	b29a      	uxth	r2, r3
 800260c:	183b      	adds	r3, r7, r0
 800260e:	815a      	strh	r2, [r3, #10]

	for (uint8_t i = 0; i < 6; i++) {
 8002610:	2327      	movs	r3, #39	; 0x27
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	e02d      	b.n	8002676 <main+0x12e>
		char str[8];

		for (uint8_t j = 0; j < 8; j++) {
 800261a:	2326      	movs	r3, #38	; 0x26
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	e00a      	b.n	800263a <main+0xf2>
			str[j] = 0x00;
 8002624:	2026      	movs	r0, #38	; 0x26
 8002626:	183b      	adds	r3, r7, r0
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	003a      	movs	r2, r7
 800262c:	2100      	movs	r1, #0
 800262e:	54d1      	strb	r1, [r2, r3]
		for (uint8_t j = 0; j < 8; j++) {
 8002630:	183b      	adds	r3, r7, r0
 8002632:	781a      	ldrb	r2, [r3, #0]
 8002634:	183b      	adds	r3, r7, r0
 8002636:	3201      	adds	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	2326      	movs	r3, #38	; 0x26
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b07      	cmp	r3, #7
 8002642:	d9ef      	bls.n	8002624 <main+0xdc>
		}

		sprintf(str, "%d\n", data[i]);
 8002644:	2427      	movs	r4, #39	; 0x27
 8002646:	193b      	adds	r3, r7, r4
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	2308      	movs	r3, #8
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	0052      	lsls	r2, r2, #1
 8002650:	5ad3      	ldrh	r3, [r2, r3]
 8002652:	001a      	movs	r2, r3
 8002654:	490f      	ldr	r1, [pc, #60]	; (8002694 <main+0x14c>)
 8002656:	003b      	movs	r3, r7
 8002658:	0018      	movs	r0, r3
 800265a:	f000 fb17 	bl	8002c8c <siprintf>

		HAL_UART_Transmit(&huart2, &str, sizeof(str), 0xFFFFFFFF);
 800265e:	2301      	movs	r3, #1
 8002660:	425b      	negs	r3, r3
 8002662:	0039      	movs	r1, r7
 8002664:	4808      	ldr	r0, [pc, #32]	; (8002688 <main+0x140>)
 8002666:	2208      	movs	r2, #8
 8002668:	f7ff f8b6 	bl	80017d8 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 6; i++) {
 800266c:	193b      	adds	r3, r7, r4
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	193b      	adds	r3, r7, r4
 8002672:	3201      	adds	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	2327      	movs	r3, #39	; 0x27
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b05      	cmp	r3, #5
 800267e:	d9cc      	bls.n	800261a <main+0xd2>
	}


   while (1)
 8002680:	e7fe      	b.n	8002680 <main+0x138>
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	080034a0 	.word	0x080034a0
 8002688:	200000ec 	.word	0x200000ec
 800268c:	40013000 	.word	0x40013000
 8002690:	50000400 	.word	0x50000400
 8002694:	080034a8 	.word	0x080034a8

08002698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b099      	sub	sp, #100	; 0x64
 800269c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800269e:	242c      	movs	r4, #44	; 0x2c
 80026a0:	193b      	adds	r3, r7, r4
 80026a2:	0018      	movs	r0, r3
 80026a4:	2334      	movs	r3, #52	; 0x34
 80026a6:	001a      	movs	r2, r3
 80026a8:	2100      	movs	r1, #0
 80026aa:	f000 fae6 	bl	8002c7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ae:	2318      	movs	r3, #24
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	0018      	movs	r0, r3
 80026b4:	2314      	movs	r3, #20
 80026b6:	001a      	movs	r2, r3
 80026b8:	2100      	movs	r1, #0
 80026ba:	f000 fade 	bl	8002c7a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026be:	003b      	movs	r3, r7
 80026c0:	0018      	movs	r0, r3
 80026c2:	2318      	movs	r3, #24
 80026c4:	001a      	movs	r2, r3
 80026c6:	2100      	movs	r1, #0
 80026c8:	f000 fad7 	bl	8002c7a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026cc:	4b29      	ldr	r3, [pc, #164]	; (8002774 <SystemClock_Config+0xdc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a29      	ldr	r2, [pc, #164]	; (8002778 <SystemClock_Config+0xe0>)
 80026d2:	401a      	ands	r2, r3
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <SystemClock_Config+0xdc>)
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	0109      	lsls	r1, r1, #4
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026de:	0021      	movs	r1, r4
 80026e0:	187b      	adds	r3, r7, r1
 80026e2:	2202      	movs	r2, #2
 80026e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	2201      	movs	r2, #1
 80026ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	2210      	movs	r2, #16
 80026f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	2202      	movs	r2, #2
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2200      	movs	r2, #0
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	2280      	movs	r2, #128	; 0x80
 8002702:	02d2      	lsls	r2, r2, #11
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	03d2      	lsls	r2, r2, #15
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800270e:	187b      	adds	r3, r7, r1
 8002710:	0018      	movs	r0, r3
 8002712:	f7fe f927 	bl	8000964 <HAL_RCC_OscConfig>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d001      	beq.n	800271e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800271a:	f000 f901 	bl	8002920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800271e:	2118      	movs	r1, #24
 8002720:	187b      	adds	r3, r7, r1
 8002722:	220f      	movs	r2, #15
 8002724:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002726:	187b      	adds	r3, r7, r1
 8002728:	2203      	movs	r2, #3
 800272a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800272c:	187b      	adds	r3, r7, r1
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002732:	187b      	adds	r3, r7, r1
 8002734:	2200      	movs	r2, #0
 8002736:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002738:	187b      	adds	r3, r7, r1
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800273e:	187b      	adds	r3, r7, r1
 8002740:	2101      	movs	r1, #1
 8002742:	0018      	movs	r0, r3
 8002744:	f7fe fc88 	bl	8001058 <HAL_RCC_ClockConfig>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800274c:	f000 f8e8 	bl	8002920 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002750:	003b      	movs	r3, r7
 8002752:	2202      	movs	r2, #2
 8002754:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002756:	003b      	movs	r3, r7
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800275c:	003b      	movs	r3, r7
 800275e:	0018      	movs	r0, r3
 8002760:	f7fe fe5e 	bl	8001420 <HAL_RCCEx_PeriphCLKConfig>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d001      	beq.n	800276c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002768:	f000 f8da 	bl	8002920 <Error_Handler>
  }
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b019      	add	sp, #100	; 0x64
 8002772:	bd90      	pop	{r4, r7, pc}
 8002774:	40007000 	.word	0x40007000
 8002778:	ffffe7ff 	.word	0xffffe7ff

0800277c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002780:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <MX_SPI1_Init+0x68>)
 8002782:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <MX_SPI1_Init+0x6c>)
 8002784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002786:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <MX_SPI1_Init+0x68>)
 8002788:	2282      	movs	r2, #130	; 0x82
 800278a:	0052      	lsls	r2, r2, #1
 800278c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <MX_SPI1_Init+0x68>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002794:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <MX_SPI1_Init+0x68>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800279a:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <MX_SPI1_Init+0x68>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027a0:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <MX_SPI1_Init+0x68>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027a6:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <MX_SPI1_Init+0x68>)
 80027a8:	2280      	movs	r2, #128	; 0x80
 80027aa:	0092      	lsls	r2, r2, #2
 80027ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027ae:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <MX_SPI1_Init+0x68>)
 80027b0:	2210      	movs	r2, #16
 80027b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <MX_SPI1_Init+0x68>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <MX_SPI1_Init+0x68>)
 80027bc:	2200      	movs	r2, #0
 80027be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <MX_SPI1_Init+0x68>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <MX_SPI1_Init+0x68>)
 80027c8:	2207      	movs	r2, #7
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <MX_SPI1_Init+0x68>)
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7fe ff4e 	bl	8001670 <HAL_SPI_Init>
 80027d4:	1e03      	subs	r3, r0, #0
 80027d6:	d001      	beq.n	80027dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027d8:	f000 f8a2 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	20000094 	.word	0x20000094
 80027e8:	40013000 	.word	0x40013000

080027ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <MX_USART2_UART_Init+0x58>)
 80027f2:	4a15      	ldr	r2, [pc, #84]	; (8002848 <MX_USART2_UART_Init+0x5c>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <MX_USART2_UART_Init+0x58>)
 80027f8:	22e1      	movs	r2, #225	; 0xe1
 80027fa:	0252      	lsls	r2, r2, #9
 80027fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <MX_USART2_UART_Init+0x58>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <MX_USART2_UART_Init+0x58>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_USART2_UART_Init+0x58>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_USART2_UART_Init+0x58>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <MX_USART2_UART_Init+0x58>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_USART2_UART_Init+0x58>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <MX_USART2_UART_Init+0x58>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <MX_USART2_UART_Init+0x58>)
 800282a:	2200      	movs	r2, #0
 800282c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <MX_USART2_UART_Init+0x58>)
 8002830:	0018      	movs	r0, r3
 8002832:	f7fe ff7d 	bl	8001730 <HAL_UART_Init>
 8002836:	1e03      	subs	r3, r0, #0
 8002838:	d001      	beq.n	800283e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800283a:	f000 f871 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	200000ec 	.word	0x200000ec
 8002848:	40004400 	.word	0x40004400

0800284c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b089      	sub	sp, #36	; 0x24
 8002850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002852:	240c      	movs	r4, #12
 8002854:	193b      	adds	r3, r7, r4
 8002856:	0018      	movs	r0, r3
 8002858:	2314      	movs	r3, #20
 800285a:	001a      	movs	r2, r3
 800285c:	2100      	movs	r1, #0
 800285e:	f000 fa0c 	bl	8002c7a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002862:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <MX_GPIO_Init+0xcc>)
 8002864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002866:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <MX_GPIO_Init+0xcc>)
 8002868:	2104      	movs	r1, #4
 800286a:	430a      	orrs	r2, r1
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
 800286e:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <MX_GPIO_Init+0xcc>)
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	2204      	movs	r2, #4
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800287a:	4b27      	ldr	r3, [pc, #156]	; (8002918 <MX_GPIO_Init+0xcc>)
 800287c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <MX_GPIO_Init+0xcc>)
 8002880:	2101      	movs	r1, #1
 8002882:	430a      	orrs	r2, r1
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c
 8002886:	4b24      	ldr	r3, [pc, #144]	; (8002918 <MX_GPIO_Init+0xcc>)
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	2201      	movs	r2, #1
 800288c:	4013      	ands	r3, r2
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002892:	4b21      	ldr	r3, [pc, #132]	; (8002918 <MX_GPIO_Init+0xcc>)
 8002894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <MX_GPIO_Init+0xcc>)
 8002898:	2102      	movs	r1, #2
 800289a:	430a      	orrs	r2, r1
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <MX_GPIO_Init+0xcc>)
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	2202      	movs	r2, #2
 80028a4:	4013      	ands	r3, r2
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SI446x_NSS_GPIO_Port, SI446x_NSS_Pin, GPIO_PIN_SET);
 80028aa:	23a0      	movs	r3, #160	; 0xa0
 80028ac:	05db      	lsls	r3, r3, #23
 80028ae:	2201      	movs	r2, #1
 80028b0:	2110      	movs	r1, #16
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7fe f838 	bl	8000928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SI446x_SDN_Pin, GPIO_PIN_RESET);
 80028b8:	4b18      	ldr	r3, [pc, #96]	; (800291c <MX_GPIO_Init+0xd0>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	2148      	movs	r1, #72	; 0x48
 80028be:	0018      	movs	r0, r3
 80028c0:	f7fe f832 	bl	8000928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SI446x_NSS_Pin */
  GPIO_InitStruct.Pin = SI446x_NSS_Pin;
 80028c4:	193b      	adds	r3, r7, r4
 80028c6:	2210      	movs	r2, #16
 80028c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ca:	193b      	adds	r3, r7, r4
 80028cc:	2201      	movs	r2, #1
 80028ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028d6:	193b      	adds	r3, r7, r4
 80028d8:	2202      	movs	r2, #2
 80028da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SI446x_NSS_GPIO_Port, &GPIO_InitStruct);
 80028dc:	193a      	adds	r2, r7, r4
 80028de:	23a0      	movs	r3, #160	; 0xa0
 80028e0:	05db      	lsls	r3, r3, #23
 80028e2:	0011      	movs	r1, r2
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fd feb9 	bl	800065c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin SI446x_SDN_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SI446x_SDN_Pin;
 80028ea:	0021      	movs	r1, r4
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	2248      	movs	r2, #72	; 0x48
 80028f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	2201      	movs	r2, #1
 80028f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2200      	movs	r2, #0
 8002902:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002904:	187b      	adds	r3, r7, r1
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <MX_GPIO_Init+0xd0>)
 8002908:	0019      	movs	r1, r3
 800290a:	0010      	movs	r0, r2
 800290c:	f7fd fea6 	bl	800065c <HAL_GPIO_Init>

}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b009      	add	sp, #36	; 0x24
 8002916:	bd90      	pop	{r4, r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	50000400 	.word	0x50000400

08002920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b08b      	sub	sp, #44	; 0x2c
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	2314      	movs	r3, #20
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	0018      	movs	r0, r3
 800293a:	2314      	movs	r3, #20
 800293c:	001a      	movs	r2, r3
 800293e:	2100      	movs	r1, #0
 8002940:	f000 f99b 	bl	8002c7a <memset>
  if(hspi->Instance==SPI1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <HAL_SPI_MspInit+0xc4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d14b      	bne.n	80029e6 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800294e:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <HAL_SPI_MspInit+0xc8>)
 8002950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002952:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <HAL_SPI_MspInit+0xc8>)
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	0149      	lsls	r1, r1, #5
 8002958:	430a      	orrs	r2, r1
 800295a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295c:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_SPI_MspInit+0xc8>)
 800295e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002960:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <HAL_SPI_MspInit+0xc8>)
 8002962:	2101      	movs	r1, #1
 8002964:	430a      	orrs	r2, r1
 8002966:	62da      	str	r2, [r3, #44]	; 0x2c
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_SPI_MspInit+0xc8>)
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	2201      	movs	r2, #1
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002974:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <HAL_SPI_MspInit+0xc8>)
 8002976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002978:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <HAL_SPI_MspInit+0xc8>)
 800297a:	2102      	movs	r1, #2
 800297c:	430a      	orrs	r2, r1
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002980:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <HAL_SPI_MspInit+0xc8>)
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	2202      	movs	r2, #2
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800298c:	2414      	movs	r4, #20
 800298e:	193b      	adds	r3, r7, r4
 8002990:	22a0      	movs	r2, #160	; 0xa0
 8002992:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	193b      	adds	r3, r7, r4
 8002996:	2202      	movs	r2, #2
 8002998:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	193b      	adds	r3, r7, r4
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	2203      	movs	r2, #3
 80029a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ac:	193a      	adds	r2, r7, r4
 80029ae:	23a0      	movs	r3, #160	; 0xa0
 80029b0:	05db      	lsls	r3, r3, #23
 80029b2:	0011      	movs	r1, r2
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7fd fe51 	bl	800065c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029ba:	0021      	movs	r1, r4
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	2202      	movs	r2, #2
 80029c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	2203      	movs	r2, #3
 80029d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	2201      	movs	r2, #1
 80029d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <HAL_SPI_MspInit+0xcc>)
 80029de:	0019      	movs	r1, r3
 80029e0:	0010      	movs	r0, r2
 80029e2:	f7fd fe3b 	bl	800065c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b00b      	add	sp, #44	; 0x2c
 80029ec:	bd90      	pop	{r4, r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	40013000 	.word	0x40013000
 80029f4:	40021000 	.word	0x40021000
 80029f8:	50000400 	.word	0x50000400

080029fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	230c      	movs	r3, #12
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	0018      	movs	r0, r3
 8002a0a:	2314      	movs	r3, #20
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	2100      	movs	r1, #0
 8002a10:	f000 f933 	bl	8002c7a <memset>
  if(huart->Instance==USART2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a18      	ldr	r2, [pc, #96]	; (8002a7c <HAL_UART_MspInit+0x80>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d129      	bne.n	8002a72 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_UART_MspInit+0x84>)
 8002a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_UART_MspInit+0x84>)
 8002a24:	2180      	movs	r1, #128	; 0x80
 8002a26:	0289      	lsls	r1, r1, #10
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_UART_MspInit+0x84>)
 8002a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a30:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <HAL_UART_MspInit+0x84>)
 8002a32:	2101      	movs	r1, #1
 8002a34:	430a      	orrs	r2, r1
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_UART_MspInit+0x84>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4013      	ands	r3, r2
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002a44:	210c      	movs	r1, #12
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <HAL_UART_MspInit+0x88>)
 8002a4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2202      	movs	r2, #2
 8002a50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2204      	movs	r2, #4
 8002a62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a64:	187a      	adds	r2, r7, r1
 8002a66:	23a0      	movs	r3, #160	; 0xa0
 8002a68:	05db      	lsls	r3, r3, #23
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7fd fdf5 	bl	800065c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b008      	add	sp, #32
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	40004400 	.word	0x40004400
 8002a80:	40021000 	.word	0x40021000
 8002a84:	00008004 	.word	0x00008004

08002a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a96:	e7fe      	b.n	8002a96 <HardFault_Handler+0x4>

08002a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab0:	f7fd fcec 	bl	800048c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <_sbrk+0x50>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <_sbrk+0x16>
		heap_end = &end;
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <_sbrk+0x50>)
 8002ace:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <_sbrk+0x54>)
 8002ad0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <_sbrk+0x50>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <_sbrk+0x50>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	18d3      	adds	r3, r2, r3
 8002ae0:	466a      	mov	r2, sp
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d907      	bls.n	8002af6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002ae6:	f000 f895 	bl	8002c14 <__errno>
 8002aea:	0003      	movs	r3, r0
 8002aec:	220c      	movs	r2, #12
 8002aee:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002af0:	2301      	movs	r3, #1
 8002af2:	425b      	negs	r3, r3
 8002af4:	e006      	b.n	8002b04 <_sbrk+0x48>
	}

	heap_end += incr;
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <_sbrk+0x50>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	18d2      	adds	r2, r2, r3
 8002afe:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <_sbrk+0x50>)
 8002b00:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002b02:	68fb      	ldr	r3, [r7, #12]
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b004      	add	sp, #16
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000084 	.word	0x20000084
 8002b10:	20000170 	.word	0x20000170

08002b14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002b18:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <SystemInit+0x64>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <SystemInit+0x64>)
 8002b1e:	2180      	movs	r1, #128	; 0x80
 8002b20:	0049      	lsls	r1, r1, #1
 8002b22:	430a      	orrs	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <SystemInit+0x64>)
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <SystemInit+0x64>)
 8002b2c:	4913      	ldr	r1, [pc, #76]	; (8002b7c <SystemInit+0x68>)
 8002b2e:	400a      	ands	r2, r1
 8002b30:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <SystemInit+0x64>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <SystemInit+0x64>)
 8002b38:	4911      	ldr	r1, [pc, #68]	; (8002b80 <SystemInit+0x6c>)
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <SystemInit+0x64>)
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <SystemInit+0x64>)
 8002b44:	2101      	movs	r1, #1
 8002b46:	438a      	bics	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <SystemInit+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <SystemInit+0x64>)
 8002b50:	490c      	ldr	r1, [pc, #48]	; (8002b84 <SystemInit+0x70>)
 8002b52:	400a      	ands	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <SystemInit+0x64>)
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <SystemInit+0x64>)
 8002b5c:	490a      	ldr	r1, [pc, #40]	; (8002b88 <SystemInit+0x74>)
 8002b5e:	400a      	ands	r2, r1
 8002b60:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <SystemInit+0x64>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b68:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <SystemInit+0x78>)
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	0512      	lsls	r2, r2, #20
 8002b6e:	609a      	str	r2, [r3, #8]
#endif
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	88ff400c 	.word	0x88ff400c
 8002b80:	fef6fff6 	.word	0xfef6fff6
 8002b84:	fffbffff 	.word	0xfffbffff
 8002b88:	ff02ffff 	.word	0xff02ffff
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002b90:	4813      	ldr	r0, [pc, #76]	; (8002be0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002b92:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002b94:	4813      	ldr	r0, [pc, #76]	; (8002be4 <LoopForever+0x6>)
    LDR R1, [R0]
 8002b96:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002b98:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <LoopForever+0xa>)
    CMP R1, R2
 8002b9c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002b9e:	d105      	bne.n	8002bac <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8002ba0:	4812      	ldr	r0, [pc, #72]	; (8002bec <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002ba2:	4913      	ldr	r1, [pc, #76]	; (8002bf0 <LoopForever+0x12>)
    STR R1, [R0]
 8002ba4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002ba6:	4813      	ldr	r0, [pc, #76]	; (8002bf4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002ba8:	4913      	ldr	r1, [pc, #76]	; (8002bf8 <LoopForever+0x1a>)
    STR R1, [R0]
 8002baa:	6001      	str	r1, [r0, #0]

08002bac <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002bac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bae:	e003      	b.n	8002bb8 <LoopCopyDataInit>

08002bb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8002bb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002bb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002bb6:	3104      	adds	r1, #4

08002bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002bb8:	4811      	ldr	r0, [pc, #68]	; (8002c00 <LoopForever+0x22>)
  ldr  r3, =_edata
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <LoopForever+0x26>)
  adds  r2, r0, r1
 8002bbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002bbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002bc0:	d3f6      	bcc.n	8002bb0 <CopyDataInit>
  ldr  r2, =_sbss
 8002bc2:	4a11      	ldr	r2, [pc, #68]	; (8002c08 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8002bc4:	e002      	b.n	8002bcc <LoopFillZerobss>

08002bc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002bc6:	2300      	movs	r3, #0
  str  r3, [r2]
 8002bc8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bca:	3204      	adds	r2, #4

08002bcc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <LoopForever+0x2e>)
  cmp  r2, r3
 8002bce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bd0:	d3f9      	bcc.n	8002bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bd2:	f7ff ff9f 	bl	8002b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bd6:	f000 f823 	bl	8002c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bda:	f7ff fcb5 	bl	8002548 <main>

08002bde <LoopForever>:

LoopForever:
    b LoopForever
 8002bde:	e7fe      	b.n	8002bde <LoopForever>
   ldr   r0, =_estack
 8002be0:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8002be4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002be8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002bec:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002bf0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002bf4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002bf8:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8002bfc:	08003558 	.word	0x08003558
  ldr  r0, =_sdata
 8002c00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c04:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8002c08:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8002c0c:	20000170 	.word	0x20000170

08002c10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c10:	e7fe      	b.n	8002c10 <ADC1_COMP_IRQHandler>
	...

08002c14 <__errno>:
 8002c14:	4b01      	ldr	r3, [pc, #4]	; (8002c1c <__errno+0x8>)
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	4770      	bx	lr
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	20000004 	.word	0x20000004

08002c20 <__libc_init_array>:
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	2600      	movs	r6, #0
 8002c24:	4d0c      	ldr	r5, [pc, #48]	; (8002c58 <__libc_init_array+0x38>)
 8002c26:	4c0d      	ldr	r4, [pc, #52]	; (8002c5c <__libc_init_array+0x3c>)
 8002c28:	1b64      	subs	r4, r4, r5
 8002c2a:	10a4      	asrs	r4, r4, #2
 8002c2c:	42a6      	cmp	r6, r4
 8002c2e:	d109      	bne.n	8002c44 <__libc_init_array+0x24>
 8002c30:	2600      	movs	r6, #0
 8002c32:	f000 fc29 	bl	8003488 <_init>
 8002c36:	4d0a      	ldr	r5, [pc, #40]	; (8002c60 <__libc_init_array+0x40>)
 8002c38:	4c0a      	ldr	r4, [pc, #40]	; (8002c64 <__libc_init_array+0x44>)
 8002c3a:	1b64      	subs	r4, r4, r5
 8002c3c:	10a4      	asrs	r4, r4, #2
 8002c3e:	42a6      	cmp	r6, r4
 8002c40:	d105      	bne.n	8002c4e <__libc_init_array+0x2e>
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	00b3      	lsls	r3, r6, #2
 8002c46:	58eb      	ldr	r3, [r5, r3]
 8002c48:	4798      	blx	r3
 8002c4a:	3601      	adds	r6, #1
 8002c4c:	e7ee      	b.n	8002c2c <__libc_init_array+0xc>
 8002c4e:	00b3      	lsls	r3, r6, #2
 8002c50:	58eb      	ldr	r3, [r5, r3]
 8002c52:	4798      	blx	r3
 8002c54:	3601      	adds	r6, #1
 8002c56:	e7f2      	b.n	8002c3e <__libc_init_array+0x1e>
 8002c58:	08003550 	.word	0x08003550
 8002c5c:	08003550 	.word	0x08003550
 8002c60:	08003550 	.word	0x08003550
 8002c64:	08003554 	.word	0x08003554

08002c68 <memcpy>:
 8002c68:	2300      	movs	r3, #0
 8002c6a:	b510      	push	{r4, lr}
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d100      	bne.n	8002c72 <memcpy+0xa>
 8002c70:	bd10      	pop	{r4, pc}
 8002c72:	5ccc      	ldrb	r4, [r1, r3]
 8002c74:	54c4      	strb	r4, [r0, r3]
 8002c76:	3301      	adds	r3, #1
 8002c78:	e7f8      	b.n	8002c6c <memcpy+0x4>

08002c7a <memset>:
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	1812      	adds	r2, r2, r0
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d100      	bne.n	8002c84 <memset+0xa>
 8002c82:	4770      	bx	lr
 8002c84:	7019      	strb	r1, [r3, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	e7f9      	b.n	8002c7e <memset+0x4>
	...

08002c8c <siprintf>:
 8002c8c:	b40e      	push	{r1, r2, r3}
 8002c8e:	b500      	push	{lr}
 8002c90:	490b      	ldr	r1, [pc, #44]	; (8002cc0 <siprintf+0x34>)
 8002c92:	b09c      	sub	sp, #112	; 0x70
 8002c94:	ab1d      	add	r3, sp, #116	; 0x74
 8002c96:	9002      	str	r0, [sp, #8]
 8002c98:	9006      	str	r0, [sp, #24]
 8002c9a:	9107      	str	r1, [sp, #28]
 8002c9c:	9104      	str	r1, [sp, #16]
 8002c9e:	4809      	ldr	r0, [pc, #36]	; (8002cc4 <siprintf+0x38>)
 8002ca0:	4909      	ldr	r1, [pc, #36]	; (8002cc8 <siprintf+0x3c>)
 8002ca2:	cb04      	ldmia	r3!, {r2}
 8002ca4:	9105      	str	r1, [sp, #20]
 8002ca6:	6800      	ldr	r0, [r0, #0]
 8002ca8:	a902      	add	r1, sp, #8
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	f000 f870 	bl	8002d90 <_svfiprintf_r>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	9a02      	ldr	r2, [sp, #8]
 8002cb4:	7013      	strb	r3, [r2, #0]
 8002cb6:	b01c      	add	sp, #112	; 0x70
 8002cb8:	bc08      	pop	{r3}
 8002cba:	b003      	add	sp, #12
 8002cbc:	4718      	bx	r3
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	7fffffff 	.word	0x7fffffff
 8002cc4:	20000004 	.word	0x20000004
 8002cc8:	ffff0208 	.word	0xffff0208

08002ccc <__ssputs_r>:
 8002ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cce:	688e      	ldr	r6, [r1, #8]
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	0007      	movs	r7, r0
 8002cd4:	000c      	movs	r4, r1
 8002cd6:	9203      	str	r2, [sp, #12]
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	429e      	cmp	r6, r3
 8002cdc:	d83c      	bhi.n	8002d58 <__ssputs_r+0x8c>
 8002cde:	2390      	movs	r3, #144	; 0x90
 8002ce0:	898a      	ldrh	r2, [r1, #12]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	421a      	tst	r2, r3
 8002ce6:	d034      	beq.n	8002d52 <__ssputs_r+0x86>
 8002ce8:	2503      	movs	r5, #3
 8002cea:	6909      	ldr	r1, [r1, #16]
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	1a5b      	subs	r3, r3, r1
 8002cf0:	9302      	str	r3, [sp, #8]
 8002cf2:	6963      	ldr	r3, [r4, #20]
 8002cf4:	9802      	ldr	r0, [sp, #8]
 8002cf6:	435d      	muls	r5, r3
 8002cf8:	0feb      	lsrs	r3, r5, #31
 8002cfa:	195d      	adds	r5, r3, r5
 8002cfc:	9b01      	ldr	r3, [sp, #4]
 8002cfe:	106d      	asrs	r5, r5, #1
 8002d00:	3301      	adds	r3, #1
 8002d02:	181b      	adds	r3, r3, r0
 8002d04:	42ab      	cmp	r3, r5
 8002d06:	d900      	bls.n	8002d0a <__ssputs_r+0x3e>
 8002d08:	001d      	movs	r5, r3
 8002d0a:	0553      	lsls	r3, r2, #21
 8002d0c:	d532      	bpl.n	8002d74 <__ssputs_r+0xa8>
 8002d0e:	0029      	movs	r1, r5
 8002d10:	0038      	movs	r0, r7
 8002d12:	f000 fb19 	bl	8003348 <_malloc_r>
 8002d16:	1e06      	subs	r6, r0, #0
 8002d18:	d109      	bne.n	8002d2e <__ssputs_r+0x62>
 8002d1a:	230c      	movs	r3, #12
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	2340      	movs	r3, #64	; 0x40
 8002d20:	2001      	movs	r0, #1
 8002d22:	89a2      	ldrh	r2, [r4, #12]
 8002d24:	4240      	negs	r0, r0
 8002d26:	4313      	orrs	r3, r2
 8002d28:	81a3      	strh	r3, [r4, #12]
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d2e:	9a02      	ldr	r2, [sp, #8]
 8002d30:	6921      	ldr	r1, [r4, #16]
 8002d32:	f7ff ff99 	bl	8002c68 <memcpy>
 8002d36:	89a3      	ldrh	r3, [r4, #12]
 8002d38:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <__ssputs_r+0xc0>)
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	81a3      	strh	r3, [r4, #12]
 8002d42:	9b02      	ldr	r3, [sp, #8]
 8002d44:	6126      	str	r6, [r4, #16]
 8002d46:	18f6      	adds	r6, r6, r3
 8002d48:	6026      	str	r6, [r4, #0]
 8002d4a:	6165      	str	r5, [r4, #20]
 8002d4c:	9e01      	ldr	r6, [sp, #4]
 8002d4e:	1aed      	subs	r5, r5, r3
 8002d50:	60a5      	str	r5, [r4, #8]
 8002d52:	9b01      	ldr	r3, [sp, #4]
 8002d54:	429e      	cmp	r6, r3
 8002d56:	d900      	bls.n	8002d5a <__ssputs_r+0x8e>
 8002d58:	9e01      	ldr	r6, [sp, #4]
 8002d5a:	0032      	movs	r2, r6
 8002d5c:	9903      	ldr	r1, [sp, #12]
 8002d5e:	6820      	ldr	r0, [r4, #0]
 8002d60:	f000 fa95 	bl	800328e <memmove>
 8002d64:	68a3      	ldr	r3, [r4, #8]
 8002d66:	2000      	movs	r0, #0
 8002d68:	1b9b      	subs	r3, r3, r6
 8002d6a:	60a3      	str	r3, [r4, #8]
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	199e      	adds	r6, r3, r6
 8002d70:	6026      	str	r6, [r4, #0]
 8002d72:	e7da      	b.n	8002d2a <__ssputs_r+0x5e>
 8002d74:	002a      	movs	r2, r5
 8002d76:	0038      	movs	r0, r7
 8002d78:	f000 fb44 	bl	8003404 <_realloc_r>
 8002d7c:	1e06      	subs	r6, r0, #0
 8002d7e:	d1e0      	bne.n	8002d42 <__ssputs_r+0x76>
 8002d80:	6921      	ldr	r1, [r4, #16]
 8002d82:	0038      	movs	r0, r7
 8002d84:	f000 fa96 	bl	80032b4 <_free_r>
 8002d88:	e7c7      	b.n	8002d1a <__ssputs_r+0x4e>
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	fffffb7f 	.word	0xfffffb7f

08002d90 <_svfiprintf_r>:
 8002d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d92:	b0a1      	sub	sp, #132	; 0x84
 8002d94:	9003      	str	r0, [sp, #12]
 8002d96:	001d      	movs	r5, r3
 8002d98:	898b      	ldrh	r3, [r1, #12]
 8002d9a:	000f      	movs	r7, r1
 8002d9c:	0016      	movs	r6, r2
 8002d9e:	061b      	lsls	r3, r3, #24
 8002da0:	d511      	bpl.n	8002dc6 <_svfiprintf_r+0x36>
 8002da2:	690b      	ldr	r3, [r1, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10e      	bne.n	8002dc6 <_svfiprintf_r+0x36>
 8002da8:	2140      	movs	r1, #64	; 0x40
 8002daa:	f000 facd 	bl	8003348 <_malloc_r>
 8002dae:	6038      	str	r0, [r7, #0]
 8002db0:	6138      	str	r0, [r7, #16]
 8002db2:	2800      	cmp	r0, #0
 8002db4:	d105      	bne.n	8002dc2 <_svfiprintf_r+0x32>
 8002db6:	230c      	movs	r3, #12
 8002db8:	9a03      	ldr	r2, [sp, #12]
 8002dba:	3801      	subs	r0, #1
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	b021      	add	sp, #132	; 0x84
 8002dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dc2:	2340      	movs	r3, #64	; 0x40
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	ac08      	add	r4, sp, #32
 8002dca:	6163      	str	r3, [r4, #20]
 8002dcc:	3320      	adds	r3, #32
 8002dce:	7663      	strb	r3, [r4, #25]
 8002dd0:	3310      	adds	r3, #16
 8002dd2:	76a3      	strb	r3, [r4, #26]
 8002dd4:	9507      	str	r5, [sp, #28]
 8002dd6:	0035      	movs	r5, r6
 8002dd8:	782b      	ldrb	r3, [r5, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <_svfiprintf_r+0x52>
 8002dde:	2b25      	cmp	r3, #37	; 0x25
 8002de0:	d146      	bne.n	8002e70 <_svfiprintf_r+0xe0>
 8002de2:	1bab      	subs	r3, r5, r6
 8002de4:	9305      	str	r3, [sp, #20]
 8002de6:	d00c      	beq.n	8002e02 <_svfiprintf_r+0x72>
 8002de8:	0032      	movs	r2, r6
 8002dea:	0039      	movs	r1, r7
 8002dec:	9803      	ldr	r0, [sp, #12]
 8002dee:	f7ff ff6d 	bl	8002ccc <__ssputs_r>
 8002df2:	1c43      	adds	r3, r0, #1
 8002df4:	d100      	bne.n	8002df8 <_svfiprintf_r+0x68>
 8002df6:	e0ae      	b.n	8002f56 <_svfiprintf_r+0x1c6>
 8002df8:	6962      	ldr	r2, [r4, #20]
 8002dfa:	9b05      	ldr	r3, [sp, #20]
 8002dfc:	4694      	mov	ip, r2
 8002dfe:	4463      	add	r3, ip
 8002e00:	6163      	str	r3, [r4, #20]
 8002e02:	782b      	ldrb	r3, [r5, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d100      	bne.n	8002e0a <_svfiprintf_r+0x7a>
 8002e08:	e0a5      	b.n	8002f56 <_svfiprintf_r+0x1c6>
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	4252      	negs	r2, r2
 8002e10:	6062      	str	r2, [r4, #4]
 8002e12:	a904      	add	r1, sp, #16
 8002e14:	3254      	adds	r2, #84	; 0x54
 8002e16:	1852      	adds	r2, r2, r1
 8002e18:	1c6e      	adds	r6, r5, #1
 8002e1a:	6023      	str	r3, [r4, #0]
 8002e1c:	60e3      	str	r3, [r4, #12]
 8002e1e:	60a3      	str	r3, [r4, #8]
 8002e20:	7013      	strb	r3, [r2, #0]
 8002e22:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e24:	7831      	ldrb	r1, [r6, #0]
 8002e26:	2205      	movs	r2, #5
 8002e28:	4853      	ldr	r0, [pc, #332]	; (8002f78 <_svfiprintf_r+0x1e8>)
 8002e2a:	f000 fa25 	bl	8003278 <memchr>
 8002e2e:	1c75      	adds	r5, r6, #1
 8002e30:	2800      	cmp	r0, #0
 8002e32:	d11f      	bne.n	8002e74 <_svfiprintf_r+0xe4>
 8002e34:	6822      	ldr	r2, [r4, #0]
 8002e36:	06d3      	lsls	r3, r2, #27
 8002e38:	d504      	bpl.n	8002e44 <_svfiprintf_r+0xb4>
 8002e3a:	2353      	movs	r3, #83	; 0x53
 8002e3c:	a904      	add	r1, sp, #16
 8002e3e:	185b      	adds	r3, r3, r1
 8002e40:	2120      	movs	r1, #32
 8002e42:	7019      	strb	r1, [r3, #0]
 8002e44:	0713      	lsls	r3, r2, #28
 8002e46:	d504      	bpl.n	8002e52 <_svfiprintf_r+0xc2>
 8002e48:	2353      	movs	r3, #83	; 0x53
 8002e4a:	a904      	add	r1, sp, #16
 8002e4c:	185b      	adds	r3, r3, r1
 8002e4e:	212b      	movs	r1, #43	; 0x2b
 8002e50:	7019      	strb	r1, [r3, #0]
 8002e52:	7833      	ldrb	r3, [r6, #0]
 8002e54:	2b2a      	cmp	r3, #42	; 0x2a
 8002e56:	d016      	beq.n	8002e86 <_svfiprintf_r+0xf6>
 8002e58:	0035      	movs	r5, r6
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	200a      	movs	r0, #10
 8002e5e:	68e3      	ldr	r3, [r4, #12]
 8002e60:	782a      	ldrb	r2, [r5, #0]
 8002e62:	1c6e      	adds	r6, r5, #1
 8002e64:	3a30      	subs	r2, #48	; 0x30
 8002e66:	2a09      	cmp	r2, #9
 8002e68:	d94e      	bls.n	8002f08 <_svfiprintf_r+0x178>
 8002e6a:	2900      	cmp	r1, #0
 8002e6c:	d018      	beq.n	8002ea0 <_svfiprintf_r+0x110>
 8002e6e:	e010      	b.n	8002e92 <_svfiprintf_r+0x102>
 8002e70:	3501      	adds	r5, #1
 8002e72:	e7b1      	b.n	8002dd8 <_svfiprintf_r+0x48>
 8002e74:	4b40      	ldr	r3, [pc, #256]	; (8002f78 <_svfiprintf_r+0x1e8>)
 8002e76:	6822      	ldr	r2, [r4, #0]
 8002e78:	1ac0      	subs	r0, r0, r3
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	4083      	lsls	r3, r0
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	6023      	str	r3, [r4, #0]
 8002e82:	002e      	movs	r6, r5
 8002e84:	e7ce      	b.n	8002e24 <_svfiprintf_r+0x94>
 8002e86:	9b07      	ldr	r3, [sp, #28]
 8002e88:	1d19      	adds	r1, r3, #4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	9107      	str	r1, [sp, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	db01      	blt.n	8002e96 <_svfiprintf_r+0x106>
 8002e92:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e94:	e004      	b.n	8002ea0 <_svfiprintf_r+0x110>
 8002e96:	425b      	negs	r3, r3
 8002e98:	60e3      	str	r3, [r4, #12]
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	782b      	ldrb	r3, [r5, #0]
 8002ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8002ea4:	d10a      	bne.n	8002ebc <_svfiprintf_r+0x12c>
 8002ea6:	786b      	ldrb	r3, [r5, #1]
 8002ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8002eaa:	d135      	bne.n	8002f18 <_svfiprintf_r+0x188>
 8002eac:	9b07      	ldr	r3, [sp, #28]
 8002eae:	3502      	adds	r5, #2
 8002eb0:	1d1a      	adds	r2, r3, #4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	9207      	str	r2, [sp, #28]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db2b      	blt.n	8002f12 <_svfiprintf_r+0x182>
 8002eba:	9309      	str	r3, [sp, #36]	; 0x24
 8002ebc:	4e2f      	ldr	r6, [pc, #188]	; (8002f7c <_svfiprintf_r+0x1ec>)
 8002ebe:	7829      	ldrb	r1, [r5, #0]
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	0030      	movs	r0, r6
 8002ec4:	f000 f9d8 	bl	8003278 <memchr>
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	d006      	beq.n	8002eda <_svfiprintf_r+0x14a>
 8002ecc:	2340      	movs	r3, #64	; 0x40
 8002ece:	1b80      	subs	r0, r0, r6
 8002ed0:	4083      	lsls	r3, r0
 8002ed2:	6822      	ldr	r2, [r4, #0]
 8002ed4:	3501      	adds	r5, #1
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	6023      	str	r3, [r4, #0]
 8002eda:	7829      	ldrb	r1, [r5, #0]
 8002edc:	2206      	movs	r2, #6
 8002ede:	4828      	ldr	r0, [pc, #160]	; (8002f80 <_svfiprintf_r+0x1f0>)
 8002ee0:	1c6e      	adds	r6, r5, #1
 8002ee2:	7621      	strb	r1, [r4, #24]
 8002ee4:	f000 f9c8 	bl	8003278 <memchr>
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d03c      	beq.n	8002f66 <_svfiprintf_r+0x1d6>
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <_svfiprintf_r+0x1f4>)
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d125      	bne.n	8002f3e <_svfiprintf_r+0x1ae>
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	9b07      	ldr	r3, [sp, #28]
 8002ef6:	3307      	adds	r3, #7
 8002ef8:	4393      	bics	r3, r2
 8002efa:	3308      	adds	r3, #8
 8002efc:	9307      	str	r3, [sp, #28]
 8002efe:	6963      	ldr	r3, [r4, #20]
 8002f00:	9a04      	ldr	r2, [sp, #16]
 8002f02:	189b      	adds	r3, r3, r2
 8002f04:	6163      	str	r3, [r4, #20]
 8002f06:	e766      	b.n	8002dd6 <_svfiprintf_r+0x46>
 8002f08:	4343      	muls	r3, r0
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	189b      	adds	r3, r3, r2
 8002f0e:	0035      	movs	r5, r6
 8002f10:	e7a6      	b.n	8002e60 <_svfiprintf_r+0xd0>
 8002f12:	2301      	movs	r3, #1
 8002f14:	425b      	negs	r3, r3
 8002f16:	e7d0      	b.n	8002eba <_svfiprintf_r+0x12a>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	200a      	movs	r0, #10
 8002f1c:	001a      	movs	r2, r3
 8002f1e:	3501      	adds	r5, #1
 8002f20:	6063      	str	r3, [r4, #4]
 8002f22:	7829      	ldrb	r1, [r5, #0]
 8002f24:	1c6e      	adds	r6, r5, #1
 8002f26:	3930      	subs	r1, #48	; 0x30
 8002f28:	2909      	cmp	r1, #9
 8002f2a:	d903      	bls.n	8002f34 <_svfiprintf_r+0x1a4>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0c5      	beq.n	8002ebc <_svfiprintf_r+0x12c>
 8002f30:	9209      	str	r2, [sp, #36]	; 0x24
 8002f32:	e7c3      	b.n	8002ebc <_svfiprintf_r+0x12c>
 8002f34:	4342      	muls	r2, r0
 8002f36:	2301      	movs	r3, #1
 8002f38:	1852      	adds	r2, r2, r1
 8002f3a:	0035      	movs	r5, r6
 8002f3c:	e7f1      	b.n	8002f22 <_svfiprintf_r+0x192>
 8002f3e:	ab07      	add	r3, sp, #28
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	003a      	movs	r2, r7
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <_svfiprintf_r+0x1f8>)
 8002f46:	0021      	movs	r1, r4
 8002f48:	9803      	ldr	r0, [sp, #12]
 8002f4a:	e000      	b.n	8002f4e <_svfiprintf_r+0x1be>
 8002f4c:	bf00      	nop
 8002f4e:	9004      	str	r0, [sp, #16]
 8002f50:	9b04      	ldr	r3, [sp, #16]
 8002f52:	3301      	adds	r3, #1
 8002f54:	d1d3      	bne.n	8002efe <_svfiprintf_r+0x16e>
 8002f56:	89bb      	ldrh	r3, [r7, #12]
 8002f58:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002f5a:	065b      	lsls	r3, r3, #25
 8002f5c:	d400      	bmi.n	8002f60 <_svfiprintf_r+0x1d0>
 8002f5e:	e72e      	b.n	8002dbe <_svfiprintf_r+0x2e>
 8002f60:	2001      	movs	r0, #1
 8002f62:	4240      	negs	r0, r0
 8002f64:	e72b      	b.n	8002dbe <_svfiprintf_r+0x2e>
 8002f66:	ab07      	add	r3, sp, #28
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	003a      	movs	r2, r7
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <_svfiprintf_r+0x1f8>)
 8002f6e:	0021      	movs	r1, r4
 8002f70:	9803      	ldr	r0, [sp, #12]
 8002f72:	f000 f879 	bl	8003068 <_printf_i>
 8002f76:	e7ea      	b.n	8002f4e <_svfiprintf_r+0x1be>
 8002f78:	08003515 	.word	0x08003515
 8002f7c:	0800351b 	.word	0x0800351b
 8002f80:	0800351f 	.word	0x0800351f
 8002f84:	00000000 	.word	0x00000000
 8002f88:	08002ccd 	.word	0x08002ccd

08002f8c <_printf_common>:
 8002f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f8e:	0015      	movs	r5, r2
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	688a      	ldr	r2, [r1, #8]
 8002f94:	690b      	ldr	r3, [r1, #16]
 8002f96:	9000      	str	r0, [sp, #0]
 8002f98:	000c      	movs	r4, r1
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	da00      	bge.n	8002fa0 <_printf_common+0x14>
 8002f9e:	0013      	movs	r3, r2
 8002fa0:	0022      	movs	r2, r4
 8002fa2:	602b      	str	r3, [r5, #0]
 8002fa4:	3243      	adds	r2, #67	; 0x43
 8002fa6:	7812      	ldrb	r2, [r2, #0]
 8002fa8:	2a00      	cmp	r2, #0
 8002faa:	d001      	beq.n	8002fb0 <_printf_common+0x24>
 8002fac:	3301      	adds	r3, #1
 8002fae:	602b      	str	r3, [r5, #0]
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	069b      	lsls	r3, r3, #26
 8002fb4:	d502      	bpl.n	8002fbc <_printf_common+0x30>
 8002fb6:	682b      	ldr	r3, [r5, #0]
 8002fb8:	3302      	adds	r3, #2
 8002fba:	602b      	str	r3, [r5, #0]
 8002fbc:	2706      	movs	r7, #6
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	401f      	ands	r7, r3
 8002fc2:	d027      	beq.n	8003014 <_printf_common+0x88>
 8002fc4:	0023      	movs	r3, r4
 8002fc6:	3343      	adds	r3, #67	; 0x43
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	1e5a      	subs	r2, r3, #1
 8002fcc:	4193      	sbcs	r3, r2
 8002fce:	6822      	ldr	r2, [r4, #0]
 8002fd0:	0692      	lsls	r2, r2, #26
 8002fd2:	d430      	bmi.n	8003036 <_printf_common+0xaa>
 8002fd4:	0022      	movs	r2, r4
 8002fd6:	9901      	ldr	r1, [sp, #4]
 8002fd8:	3243      	adds	r2, #67	; 0x43
 8002fda:	9800      	ldr	r0, [sp, #0]
 8002fdc:	9e08      	ldr	r6, [sp, #32]
 8002fde:	47b0      	blx	r6
 8002fe0:	1c43      	adds	r3, r0, #1
 8002fe2:	d025      	beq.n	8003030 <_printf_common+0xa4>
 8002fe4:	2306      	movs	r3, #6
 8002fe6:	6820      	ldr	r0, [r4, #0]
 8002fe8:	682a      	ldr	r2, [r5, #0]
 8002fea:	68e1      	ldr	r1, [r4, #12]
 8002fec:	4003      	ands	r3, r0
 8002fee:	2500      	movs	r5, #0
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d103      	bne.n	8002ffc <_printf_common+0x70>
 8002ff4:	1a8d      	subs	r5, r1, r2
 8002ff6:	43eb      	mvns	r3, r5
 8002ff8:	17db      	asrs	r3, r3, #31
 8002ffa:	401d      	ands	r5, r3
 8002ffc:	68a3      	ldr	r3, [r4, #8]
 8002ffe:	6922      	ldr	r2, [r4, #16]
 8003000:	4293      	cmp	r3, r2
 8003002:	dd01      	ble.n	8003008 <_printf_common+0x7c>
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	18ed      	adds	r5, r5, r3
 8003008:	2700      	movs	r7, #0
 800300a:	42bd      	cmp	r5, r7
 800300c:	d120      	bne.n	8003050 <_printf_common+0xc4>
 800300e:	2000      	movs	r0, #0
 8003010:	e010      	b.n	8003034 <_printf_common+0xa8>
 8003012:	3701      	adds	r7, #1
 8003014:	68e3      	ldr	r3, [r4, #12]
 8003016:	682a      	ldr	r2, [r5, #0]
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	42bb      	cmp	r3, r7
 800301c:	ddd2      	ble.n	8002fc4 <_printf_common+0x38>
 800301e:	0022      	movs	r2, r4
 8003020:	2301      	movs	r3, #1
 8003022:	3219      	adds	r2, #25
 8003024:	9901      	ldr	r1, [sp, #4]
 8003026:	9800      	ldr	r0, [sp, #0]
 8003028:	9e08      	ldr	r6, [sp, #32]
 800302a:	47b0      	blx	r6
 800302c:	1c43      	adds	r3, r0, #1
 800302e:	d1f0      	bne.n	8003012 <_printf_common+0x86>
 8003030:	2001      	movs	r0, #1
 8003032:	4240      	negs	r0, r0
 8003034:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003036:	2030      	movs	r0, #48	; 0x30
 8003038:	18e1      	adds	r1, r4, r3
 800303a:	3143      	adds	r1, #67	; 0x43
 800303c:	7008      	strb	r0, [r1, #0]
 800303e:	0021      	movs	r1, r4
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	3145      	adds	r1, #69	; 0x45
 8003044:	7809      	ldrb	r1, [r1, #0]
 8003046:	18a2      	adds	r2, r4, r2
 8003048:	3243      	adds	r2, #67	; 0x43
 800304a:	3302      	adds	r3, #2
 800304c:	7011      	strb	r1, [r2, #0]
 800304e:	e7c1      	b.n	8002fd4 <_printf_common+0x48>
 8003050:	0022      	movs	r2, r4
 8003052:	2301      	movs	r3, #1
 8003054:	321a      	adds	r2, #26
 8003056:	9901      	ldr	r1, [sp, #4]
 8003058:	9800      	ldr	r0, [sp, #0]
 800305a:	9e08      	ldr	r6, [sp, #32]
 800305c:	47b0      	blx	r6
 800305e:	1c43      	adds	r3, r0, #1
 8003060:	d0e6      	beq.n	8003030 <_printf_common+0xa4>
 8003062:	3701      	adds	r7, #1
 8003064:	e7d1      	b.n	800300a <_printf_common+0x7e>
	...

08003068 <_printf_i>:
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	b089      	sub	sp, #36	; 0x24
 800306c:	9204      	str	r2, [sp, #16]
 800306e:	000a      	movs	r2, r1
 8003070:	3243      	adds	r2, #67	; 0x43
 8003072:	9305      	str	r3, [sp, #20]
 8003074:	9003      	str	r0, [sp, #12]
 8003076:	9202      	str	r2, [sp, #8]
 8003078:	7e0a      	ldrb	r2, [r1, #24]
 800307a:	000c      	movs	r4, r1
 800307c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800307e:	2a6e      	cmp	r2, #110	; 0x6e
 8003080:	d100      	bne.n	8003084 <_printf_i+0x1c>
 8003082:	e086      	b.n	8003192 <_printf_i+0x12a>
 8003084:	d81f      	bhi.n	80030c6 <_printf_i+0x5e>
 8003086:	2a63      	cmp	r2, #99	; 0x63
 8003088:	d033      	beq.n	80030f2 <_printf_i+0x8a>
 800308a:	d808      	bhi.n	800309e <_printf_i+0x36>
 800308c:	2a00      	cmp	r2, #0
 800308e:	d100      	bne.n	8003092 <_printf_i+0x2a>
 8003090:	e08c      	b.n	80031ac <_printf_i+0x144>
 8003092:	2a58      	cmp	r2, #88	; 0x58
 8003094:	d04d      	beq.n	8003132 <_printf_i+0xca>
 8003096:	0025      	movs	r5, r4
 8003098:	3542      	adds	r5, #66	; 0x42
 800309a:	702a      	strb	r2, [r5, #0]
 800309c:	e030      	b.n	8003100 <_printf_i+0x98>
 800309e:	2a64      	cmp	r2, #100	; 0x64
 80030a0:	d001      	beq.n	80030a6 <_printf_i+0x3e>
 80030a2:	2a69      	cmp	r2, #105	; 0x69
 80030a4:	d1f7      	bne.n	8003096 <_printf_i+0x2e>
 80030a6:	6819      	ldr	r1, [r3, #0]
 80030a8:	6825      	ldr	r5, [r4, #0]
 80030aa:	1d0a      	adds	r2, r1, #4
 80030ac:	0628      	lsls	r0, r5, #24
 80030ae:	d529      	bpl.n	8003104 <_printf_i+0x9c>
 80030b0:	6808      	ldr	r0, [r1, #0]
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	2800      	cmp	r0, #0
 80030b6:	da03      	bge.n	80030c0 <_printf_i+0x58>
 80030b8:	232d      	movs	r3, #45	; 0x2d
 80030ba:	9a02      	ldr	r2, [sp, #8]
 80030bc:	4240      	negs	r0, r0
 80030be:	7013      	strb	r3, [r2, #0]
 80030c0:	4e6b      	ldr	r6, [pc, #428]	; (8003270 <_printf_i+0x208>)
 80030c2:	270a      	movs	r7, #10
 80030c4:	e04f      	b.n	8003166 <_printf_i+0xfe>
 80030c6:	2a73      	cmp	r2, #115	; 0x73
 80030c8:	d074      	beq.n	80031b4 <_printf_i+0x14c>
 80030ca:	d808      	bhi.n	80030de <_printf_i+0x76>
 80030cc:	2a6f      	cmp	r2, #111	; 0x6f
 80030ce:	d01f      	beq.n	8003110 <_printf_i+0xa8>
 80030d0:	2a70      	cmp	r2, #112	; 0x70
 80030d2:	d1e0      	bne.n	8003096 <_printf_i+0x2e>
 80030d4:	2220      	movs	r2, #32
 80030d6:	6809      	ldr	r1, [r1, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	6022      	str	r2, [r4, #0]
 80030dc:	e003      	b.n	80030e6 <_printf_i+0x7e>
 80030de:	2a75      	cmp	r2, #117	; 0x75
 80030e0:	d016      	beq.n	8003110 <_printf_i+0xa8>
 80030e2:	2a78      	cmp	r2, #120	; 0x78
 80030e4:	d1d7      	bne.n	8003096 <_printf_i+0x2e>
 80030e6:	0022      	movs	r2, r4
 80030e8:	2178      	movs	r1, #120	; 0x78
 80030ea:	3245      	adds	r2, #69	; 0x45
 80030ec:	7011      	strb	r1, [r2, #0]
 80030ee:	4e61      	ldr	r6, [pc, #388]	; (8003274 <_printf_i+0x20c>)
 80030f0:	e022      	b.n	8003138 <_printf_i+0xd0>
 80030f2:	0025      	movs	r5, r4
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	3542      	adds	r5, #66	; 0x42
 80030f8:	1d11      	adds	r1, r2, #4
 80030fa:	6019      	str	r1, [r3, #0]
 80030fc:	6813      	ldr	r3, [r2, #0]
 80030fe:	702b      	strb	r3, [r5, #0]
 8003100:	2301      	movs	r3, #1
 8003102:	e065      	b.n	80031d0 <_printf_i+0x168>
 8003104:	6808      	ldr	r0, [r1, #0]
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	0669      	lsls	r1, r5, #25
 800310a:	d5d3      	bpl.n	80030b4 <_printf_i+0x4c>
 800310c:	b200      	sxth	r0, r0
 800310e:	e7d1      	b.n	80030b4 <_printf_i+0x4c>
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	6825      	ldr	r5, [r4, #0]
 8003114:	1d08      	adds	r0, r1, #4
 8003116:	6018      	str	r0, [r3, #0]
 8003118:	6808      	ldr	r0, [r1, #0]
 800311a:	062e      	lsls	r6, r5, #24
 800311c:	d505      	bpl.n	800312a <_printf_i+0xc2>
 800311e:	4e54      	ldr	r6, [pc, #336]	; (8003270 <_printf_i+0x208>)
 8003120:	2708      	movs	r7, #8
 8003122:	2a6f      	cmp	r2, #111	; 0x6f
 8003124:	d01b      	beq.n	800315e <_printf_i+0xf6>
 8003126:	270a      	movs	r7, #10
 8003128:	e019      	b.n	800315e <_printf_i+0xf6>
 800312a:	066d      	lsls	r5, r5, #25
 800312c:	d5f7      	bpl.n	800311e <_printf_i+0xb6>
 800312e:	b280      	uxth	r0, r0
 8003130:	e7f5      	b.n	800311e <_printf_i+0xb6>
 8003132:	3145      	adds	r1, #69	; 0x45
 8003134:	4e4e      	ldr	r6, [pc, #312]	; (8003270 <_printf_i+0x208>)
 8003136:	700a      	strb	r2, [r1, #0]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	6822      	ldr	r2, [r4, #0]
 800313c:	1d01      	adds	r1, r0, #4
 800313e:	6800      	ldr	r0, [r0, #0]
 8003140:	6019      	str	r1, [r3, #0]
 8003142:	0615      	lsls	r5, r2, #24
 8003144:	d521      	bpl.n	800318a <_printf_i+0x122>
 8003146:	07d3      	lsls	r3, r2, #31
 8003148:	d502      	bpl.n	8003150 <_printf_i+0xe8>
 800314a:	2320      	movs	r3, #32
 800314c:	431a      	orrs	r2, r3
 800314e:	6022      	str	r2, [r4, #0]
 8003150:	2710      	movs	r7, #16
 8003152:	2800      	cmp	r0, #0
 8003154:	d103      	bne.n	800315e <_printf_i+0xf6>
 8003156:	2320      	movs	r3, #32
 8003158:	6822      	ldr	r2, [r4, #0]
 800315a:	439a      	bics	r2, r3
 800315c:	6022      	str	r2, [r4, #0]
 800315e:	0023      	movs	r3, r4
 8003160:	2200      	movs	r2, #0
 8003162:	3343      	adds	r3, #67	; 0x43
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	6863      	ldr	r3, [r4, #4]
 8003168:	60a3      	str	r3, [r4, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db58      	blt.n	8003220 <_printf_i+0x1b8>
 800316e:	2204      	movs	r2, #4
 8003170:	6821      	ldr	r1, [r4, #0]
 8003172:	4391      	bics	r1, r2
 8003174:	6021      	str	r1, [r4, #0]
 8003176:	2800      	cmp	r0, #0
 8003178:	d154      	bne.n	8003224 <_printf_i+0x1bc>
 800317a:	9d02      	ldr	r5, [sp, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d05a      	beq.n	8003236 <_printf_i+0x1ce>
 8003180:	0025      	movs	r5, r4
 8003182:	7833      	ldrb	r3, [r6, #0]
 8003184:	3542      	adds	r5, #66	; 0x42
 8003186:	702b      	strb	r3, [r5, #0]
 8003188:	e055      	b.n	8003236 <_printf_i+0x1ce>
 800318a:	0655      	lsls	r5, r2, #25
 800318c:	d5db      	bpl.n	8003146 <_printf_i+0xde>
 800318e:	b280      	uxth	r0, r0
 8003190:	e7d9      	b.n	8003146 <_printf_i+0xde>
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	680d      	ldr	r5, [r1, #0]
 8003196:	1d10      	adds	r0, r2, #4
 8003198:	6949      	ldr	r1, [r1, #20]
 800319a:	6018      	str	r0, [r3, #0]
 800319c:	6813      	ldr	r3, [r2, #0]
 800319e:	062e      	lsls	r6, r5, #24
 80031a0:	d501      	bpl.n	80031a6 <_printf_i+0x13e>
 80031a2:	6019      	str	r1, [r3, #0]
 80031a4:	e002      	b.n	80031ac <_printf_i+0x144>
 80031a6:	066d      	lsls	r5, r5, #25
 80031a8:	d5fb      	bpl.n	80031a2 <_printf_i+0x13a>
 80031aa:	8019      	strh	r1, [r3, #0]
 80031ac:	2300      	movs	r3, #0
 80031ae:	9d02      	ldr	r5, [sp, #8]
 80031b0:	6123      	str	r3, [r4, #16]
 80031b2:	e04f      	b.n	8003254 <_printf_i+0x1ec>
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	1d11      	adds	r1, r2, #4
 80031b8:	6019      	str	r1, [r3, #0]
 80031ba:	6815      	ldr	r5, [r2, #0]
 80031bc:	2100      	movs	r1, #0
 80031be:	6862      	ldr	r2, [r4, #4]
 80031c0:	0028      	movs	r0, r5
 80031c2:	f000 f859 	bl	8003278 <memchr>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d001      	beq.n	80031ce <_printf_i+0x166>
 80031ca:	1b40      	subs	r0, r0, r5
 80031cc:	6060      	str	r0, [r4, #4]
 80031ce:	6863      	ldr	r3, [r4, #4]
 80031d0:	6123      	str	r3, [r4, #16]
 80031d2:	2300      	movs	r3, #0
 80031d4:	9a02      	ldr	r2, [sp, #8]
 80031d6:	7013      	strb	r3, [r2, #0]
 80031d8:	e03c      	b.n	8003254 <_printf_i+0x1ec>
 80031da:	6923      	ldr	r3, [r4, #16]
 80031dc:	002a      	movs	r2, r5
 80031de:	9904      	ldr	r1, [sp, #16]
 80031e0:	9803      	ldr	r0, [sp, #12]
 80031e2:	9d05      	ldr	r5, [sp, #20]
 80031e4:	47a8      	blx	r5
 80031e6:	1c43      	adds	r3, r0, #1
 80031e8:	d03e      	beq.n	8003268 <_printf_i+0x200>
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	079b      	lsls	r3, r3, #30
 80031ee:	d415      	bmi.n	800321c <_printf_i+0x1b4>
 80031f0:	9b07      	ldr	r3, [sp, #28]
 80031f2:	68e0      	ldr	r0, [r4, #12]
 80031f4:	4298      	cmp	r0, r3
 80031f6:	da39      	bge.n	800326c <_printf_i+0x204>
 80031f8:	0018      	movs	r0, r3
 80031fa:	e037      	b.n	800326c <_printf_i+0x204>
 80031fc:	0022      	movs	r2, r4
 80031fe:	2301      	movs	r3, #1
 8003200:	3219      	adds	r2, #25
 8003202:	9904      	ldr	r1, [sp, #16]
 8003204:	9803      	ldr	r0, [sp, #12]
 8003206:	9e05      	ldr	r6, [sp, #20]
 8003208:	47b0      	blx	r6
 800320a:	1c43      	adds	r3, r0, #1
 800320c:	d02c      	beq.n	8003268 <_printf_i+0x200>
 800320e:	3501      	adds	r5, #1
 8003210:	68e3      	ldr	r3, [r4, #12]
 8003212:	9a07      	ldr	r2, [sp, #28]
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	42ab      	cmp	r3, r5
 8003218:	dcf0      	bgt.n	80031fc <_printf_i+0x194>
 800321a:	e7e9      	b.n	80031f0 <_printf_i+0x188>
 800321c:	2500      	movs	r5, #0
 800321e:	e7f7      	b.n	8003210 <_printf_i+0x1a8>
 8003220:	2800      	cmp	r0, #0
 8003222:	d0ad      	beq.n	8003180 <_printf_i+0x118>
 8003224:	9d02      	ldr	r5, [sp, #8]
 8003226:	0039      	movs	r1, r7
 8003228:	f7fc fff4 	bl	8000214 <__aeabi_uidivmod>
 800322c:	5c73      	ldrb	r3, [r6, r1]
 800322e:	3d01      	subs	r5, #1
 8003230:	702b      	strb	r3, [r5, #0]
 8003232:	2800      	cmp	r0, #0
 8003234:	d1f7      	bne.n	8003226 <_printf_i+0x1be>
 8003236:	2f08      	cmp	r7, #8
 8003238:	d109      	bne.n	800324e <_printf_i+0x1e6>
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	07db      	lsls	r3, r3, #31
 800323e:	d506      	bpl.n	800324e <_printf_i+0x1e6>
 8003240:	6863      	ldr	r3, [r4, #4]
 8003242:	6922      	ldr	r2, [r4, #16]
 8003244:	4293      	cmp	r3, r2
 8003246:	dc02      	bgt.n	800324e <_printf_i+0x1e6>
 8003248:	2330      	movs	r3, #48	; 0x30
 800324a:	3d01      	subs	r5, #1
 800324c:	702b      	strb	r3, [r5, #0]
 800324e:	9b02      	ldr	r3, [sp, #8]
 8003250:	1b5b      	subs	r3, r3, r5
 8003252:	6123      	str	r3, [r4, #16]
 8003254:	9b05      	ldr	r3, [sp, #20]
 8003256:	aa07      	add	r2, sp, #28
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	0021      	movs	r1, r4
 800325c:	9b04      	ldr	r3, [sp, #16]
 800325e:	9803      	ldr	r0, [sp, #12]
 8003260:	f7ff fe94 	bl	8002f8c <_printf_common>
 8003264:	1c43      	adds	r3, r0, #1
 8003266:	d1b8      	bne.n	80031da <_printf_i+0x172>
 8003268:	2001      	movs	r0, #1
 800326a:	4240      	negs	r0, r0
 800326c:	b009      	add	sp, #36	; 0x24
 800326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003270:	08003526 	.word	0x08003526
 8003274:	08003537 	.word	0x08003537

08003278 <memchr>:
 8003278:	b2c9      	uxtb	r1, r1
 800327a:	1882      	adds	r2, r0, r2
 800327c:	4290      	cmp	r0, r2
 800327e:	d101      	bne.n	8003284 <memchr+0xc>
 8003280:	2000      	movs	r0, #0
 8003282:	4770      	bx	lr
 8003284:	7803      	ldrb	r3, [r0, #0]
 8003286:	428b      	cmp	r3, r1
 8003288:	d0fb      	beq.n	8003282 <memchr+0xa>
 800328a:	3001      	adds	r0, #1
 800328c:	e7f6      	b.n	800327c <memchr+0x4>

0800328e <memmove>:
 800328e:	b510      	push	{r4, lr}
 8003290:	4288      	cmp	r0, r1
 8003292:	d902      	bls.n	800329a <memmove+0xc>
 8003294:	188b      	adds	r3, r1, r2
 8003296:	4298      	cmp	r0, r3
 8003298:	d303      	bcc.n	80032a2 <memmove+0x14>
 800329a:	2300      	movs	r3, #0
 800329c:	e007      	b.n	80032ae <memmove+0x20>
 800329e:	5c8b      	ldrb	r3, [r1, r2]
 80032a0:	5483      	strb	r3, [r0, r2]
 80032a2:	3a01      	subs	r2, #1
 80032a4:	d2fb      	bcs.n	800329e <memmove+0x10>
 80032a6:	bd10      	pop	{r4, pc}
 80032a8:	5ccc      	ldrb	r4, [r1, r3]
 80032aa:	54c4      	strb	r4, [r0, r3]
 80032ac:	3301      	adds	r3, #1
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d1fa      	bne.n	80032a8 <memmove+0x1a>
 80032b2:	e7f8      	b.n	80032a6 <memmove+0x18>

080032b4 <_free_r>:
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	0005      	movs	r5, r0
 80032b8:	2900      	cmp	r1, #0
 80032ba:	d010      	beq.n	80032de <_free_r+0x2a>
 80032bc:	1f0c      	subs	r4, r1, #4
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	da00      	bge.n	80032c6 <_free_r+0x12>
 80032c4:	18e4      	adds	r4, r4, r3
 80032c6:	0028      	movs	r0, r5
 80032c8:	f000 f8d4 	bl	8003474 <__malloc_lock>
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <_free_r+0x90>)
 80032ce:	6813      	ldr	r3, [r2, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <_free_r+0x2c>
 80032d4:	6063      	str	r3, [r4, #4]
 80032d6:	6014      	str	r4, [r2, #0]
 80032d8:	0028      	movs	r0, r5
 80032da:	f000 f8cc 	bl	8003476 <__malloc_unlock>
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	42a3      	cmp	r3, r4
 80032e2:	d909      	bls.n	80032f8 <_free_r+0x44>
 80032e4:	6821      	ldr	r1, [r4, #0]
 80032e6:	1860      	adds	r0, r4, r1
 80032e8:	4283      	cmp	r3, r0
 80032ea:	d1f3      	bne.n	80032d4 <_free_r+0x20>
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	1841      	adds	r1, r0, r1
 80032f2:	6021      	str	r1, [r4, #0]
 80032f4:	e7ee      	b.n	80032d4 <_free_r+0x20>
 80032f6:	0013      	movs	r3, r2
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	2a00      	cmp	r2, #0
 80032fc:	d001      	beq.n	8003302 <_free_r+0x4e>
 80032fe:	42a2      	cmp	r2, r4
 8003300:	d9f9      	bls.n	80032f6 <_free_r+0x42>
 8003302:	6819      	ldr	r1, [r3, #0]
 8003304:	1858      	adds	r0, r3, r1
 8003306:	42a0      	cmp	r0, r4
 8003308:	d10b      	bne.n	8003322 <_free_r+0x6e>
 800330a:	6820      	ldr	r0, [r4, #0]
 800330c:	1809      	adds	r1, r1, r0
 800330e:	1858      	adds	r0, r3, r1
 8003310:	6019      	str	r1, [r3, #0]
 8003312:	4282      	cmp	r2, r0
 8003314:	d1e0      	bne.n	80032d8 <_free_r+0x24>
 8003316:	6810      	ldr	r0, [r2, #0]
 8003318:	6852      	ldr	r2, [r2, #4]
 800331a:	1841      	adds	r1, r0, r1
 800331c:	6019      	str	r1, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	e7da      	b.n	80032d8 <_free_r+0x24>
 8003322:	42a0      	cmp	r0, r4
 8003324:	d902      	bls.n	800332c <_free_r+0x78>
 8003326:	230c      	movs	r3, #12
 8003328:	602b      	str	r3, [r5, #0]
 800332a:	e7d5      	b.n	80032d8 <_free_r+0x24>
 800332c:	6821      	ldr	r1, [r4, #0]
 800332e:	1860      	adds	r0, r4, r1
 8003330:	4282      	cmp	r2, r0
 8003332:	d103      	bne.n	800333c <_free_r+0x88>
 8003334:	6810      	ldr	r0, [r2, #0]
 8003336:	6852      	ldr	r2, [r2, #4]
 8003338:	1841      	adds	r1, r0, r1
 800333a:	6021      	str	r1, [r4, #0]
 800333c:	6062      	str	r2, [r4, #4]
 800333e:	605c      	str	r4, [r3, #4]
 8003340:	e7ca      	b.n	80032d8 <_free_r+0x24>
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	20000088 	.word	0x20000088

08003348 <_malloc_r>:
 8003348:	2303      	movs	r3, #3
 800334a:	b570      	push	{r4, r5, r6, lr}
 800334c:	1ccd      	adds	r5, r1, #3
 800334e:	439d      	bics	r5, r3
 8003350:	3508      	adds	r5, #8
 8003352:	0006      	movs	r6, r0
 8003354:	2d0c      	cmp	r5, #12
 8003356:	d21e      	bcs.n	8003396 <_malloc_r+0x4e>
 8003358:	250c      	movs	r5, #12
 800335a:	42a9      	cmp	r1, r5
 800335c:	d81d      	bhi.n	800339a <_malloc_r+0x52>
 800335e:	0030      	movs	r0, r6
 8003360:	f000 f888 	bl	8003474 <__malloc_lock>
 8003364:	4a25      	ldr	r2, [pc, #148]	; (80033fc <_malloc_r+0xb4>)
 8003366:	6814      	ldr	r4, [r2, #0]
 8003368:	0021      	movs	r1, r4
 800336a:	2900      	cmp	r1, #0
 800336c:	d119      	bne.n	80033a2 <_malloc_r+0x5a>
 800336e:	4c24      	ldr	r4, [pc, #144]	; (8003400 <_malloc_r+0xb8>)
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d103      	bne.n	800337e <_malloc_r+0x36>
 8003376:	0030      	movs	r0, r6
 8003378:	f000 f86a 	bl	8003450 <_sbrk_r>
 800337c:	6020      	str	r0, [r4, #0]
 800337e:	0029      	movs	r1, r5
 8003380:	0030      	movs	r0, r6
 8003382:	f000 f865 	bl	8003450 <_sbrk_r>
 8003386:	1c43      	adds	r3, r0, #1
 8003388:	d12b      	bne.n	80033e2 <_malloc_r+0x9a>
 800338a:	230c      	movs	r3, #12
 800338c:	0030      	movs	r0, r6
 800338e:	6033      	str	r3, [r6, #0]
 8003390:	f000 f871 	bl	8003476 <__malloc_unlock>
 8003394:	e003      	b.n	800339e <_malloc_r+0x56>
 8003396:	2d00      	cmp	r5, #0
 8003398:	dadf      	bge.n	800335a <_malloc_r+0x12>
 800339a:	230c      	movs	r3, #12
 800339c:	6033      	str	r3, [r6, #0]
 800339e:	2000      	movs	r0, #0
 80033a0:	bd70      	pop	{r4, r5, r6, pc}
 80033a2:	680b      	ldr	r3, [r1, #0]
 80033a4:	1b5b      	subs	r3, r3, r5
 80033a6:	d419      	bmi.n	80033dc <_malloc_r+0x94>
 80033a8:	2b0b      	cmp	r3, #11
 80033aa:	d903      	bls.n	80033b4 <_malloc_r+0x6c>
 80033ac:	600b      	str	r3, [r1, #0]
 80033ae:	18cc      	adds	r4, r1, r3
 80033b0:	6025      	str	r5, [r4, #0]
 80033b2:	e003      	b.n	80033bc <_malloc_r+0x74>
 80033b4:	684b      	ldr	r3, [r1, #4]
 80033b6:	428c      	cmp	r4, r1
 80033b8:	d10d      	bne.n	80033d6 <_malloc_r+0x8e>
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	0030      	movs	r0, r6
 80033be:	f000 f85a 	bl	8003476 <__malloc_unlock>
 80033c2:	0020      	movs	r0, r4
 80033c4:	2207      	movs	r2, #7
 80033c6:	300b      	adds	r0, #11
 80033c8:	1d23      	adds	r3, r4, #4
 80033ca:	4390      	bics	r0, r2
 80033cc:	1ac3      	subs	r3, r0, r3
 80033ce:	d0e7      	beq.n	80033a0 <_malloc_r+0x58>
 80033d0:	425a      	negs	r2, r3
 80033d2:	50e2      	str	r2, [r4, r3]
 80033d4:	e7e4      	b.n	80033a0 <_malloc_r+0x58>
 80033d6:	6063      	str	r3, [r4, #4]
 80033d8:	000c      	movs	r4, r1
 80033da:	e7ef      	b.n	80033bc <_malloc_r+0x74>
 80033dc:	000c      	movs	r4, r1
 80033de:	6849      	ldr	r1, [r1, #4]
 80033e0:	e7c3      	b.n	800336a <_malloc_r+0x22>
 80033e2:	2303      	movs	r3, #3
 80033e4:	1cc4      	adds	r4, r0, #3
 80033e6:	439c      	bics	r4, r3
 80033e8:	42a0      	cmp	r0, r4
 80033ea:	d0e1      	beq.n	80033b0 <_malloc_r+0x68>
 80033ec:	1a21      	subs	r1, r4, r0
 80033ee:	0030      	movs	r0, r6
 80033f0:	f000 f82e 	bl	8003450 <_sbrk_r>
 80033f4:	1c43      	adds	r3, r0, #1
 80033f6:	d1db      	bne.n	80033b0 <_malloc_r+0x68>
 80033f8:	e7c7      	b.n	800338a <_malloc_r+0x42>
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	20000088 	.word	0x20000088
 8003400:	2000008c 	.word	0x2000008c

08003404 <_realloc_r>:
 8003404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003406:	0007      	movs	r7, r0
 8003408:	000d      	movs	r5, r1
 800340a:	0016      	movs	r6, r2
 800340c:	2900      	cmp	r1, #0
 800340e:	d105      	bne.n	800341c <_realloc_r+0x18>
 8003410:	0011      	movs	r1, r2
 8003412:	f7ff ff99 	bl	8003348 <_malloc_r>
 8003416:	0004      	movs	r4, r0
 8003418:	0020      	movs	r0, r4
 800341a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800341c:	2a00      	cmp	r2, #0
 800341e:	d103      	bne.n	8003428 <_realloc_r+0x24>
 8003420:	f7ff ff48 	bl	80032b4 <_free_r>
 8003424:	0034      	movs	r4, r6
 8003426:	e7f7      	b.n	8003418 <_realloc_r+0x14>
 8003428:	f000 f826 	bl	8003478 <_malloc_usable_size_r>
 800342c:	002c      	movs	r4, r5
 800342e:	42b0      	cmp	r0, r6
 8003430:	d2f2      	bcs.n	8003418 <_realloc_r+0x14>
 8003432:	0031      	movs	r1, r6
 8003434:	0038      	movs	r0, r7
 8003436:	f7ff ff87 	bl	8003348 <_malloc_r>
 800343a:	1e04      	subs	r4, r0, #0
 800343c:	d0ec      	beq.n	8003418 <_realloc_r+0x14>
 800343e:	0029      	movs	r1, r5
 8003440:	0032      	movs	r2, r6
 8003442:	f7ff fc11 	bl	8002c68 <memcpy>
 8003446:	0029      	movs	r1, r5
 8003448:	0038      	movs	r0, r7
 800344a:	f7ff ff33 	bl	80032b4 <_free_r>
 800344e:	e7e3      	b.n	8003418 <_realloc_r+0x14>

08003450 <_sbrk_r>:
 8003450:	2300      	movs	r3, #0
 8003452:	b570      	push	{r4, r5, r6, lr}
 8003454:	4c06      	ldr	r4, [pc, #24]	; (8003470 <_sbrk_r+0x20>)
 8003456:	0005      	movs	r5, r0
 8003458:	0008      	movs	r0, r1
 800345a:	6023      	str	r3, [r4, #0]
 800345c:	f7ff fb2e 	bl	8002abc <_sbrk>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d103      	bne.n	800346c <_sbrk_r+0x1c>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d000      	beq.n	800346c <_sbrk_r+0x1c>
 800346a:	602b      	str	r3, [r5, #0]
 800346c:	bd70      	pop	{r4, r5, r6, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	2000016c 	.word	0x2000016c

08003474 <__malloc_lock>:
 8003474:	4770      	bx	lr

08003476 <__malloc_unlock>:
 8003476:	4770      	bx	lr

08003478 <_malloc_usable_size_r>:
 8003478:	1f0b      	subs	r3, r1, #4
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	1f18      	subs	r0, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	da01      	bge.n	8003486 <_malloc_usable_size_r+0xe>
 8003482:	580b      	ldr	r3, [r1, r0]
 8003484:	18c0      	adds	r0, r0, r3
 8003486:	4770      	bx	lr

08003488 <_init>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr

08003494 <_fini>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr
