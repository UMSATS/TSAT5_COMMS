
CommSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002944  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002a04  08002a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a70  08002a70  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a78  08002a78  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a78  08002a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000004  08002a84  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000064  200000fc  08002a84  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b7d  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001349  00000000  00000000  00026ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b8  00000000  00000000  00027ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  000286b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fc72  00000000  00000000  00028db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006912  00000000  00000000  00038a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00060b93  00000000  00000000  0003f334  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009fec7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ad0  00000000  00000000  0009ff44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029ec 	.word	0x080029ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080029ec 	.word	0x080029ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_Init+0x3c>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_Init+0x3c>)
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000450:	2000      	movs	r0, #0
 8000452:	f000 f811 	bl	8000478 <HAL_InitTick>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d003      	beq.n	8000462 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e001      	b.n	8000466 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000462:	f002 f95f 	bl	8002724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
}
 800046a:	0018      	movs	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_InitTick+0x50>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	23fa      	movs	r3, #250	; 0xfa
 800048e:	0099      	lsls	r1, r3, #2
 8000490:	0010      	movs	r0, r2
 8000492:	f7ff fe39 	bl	8000108 <__udivsi3>
 8000496:	0003      	movs	r3, r0
 8000498:	0018      	movs	r0, r3
 800049a:	f000 f8f2 	bl	8000682 <HAL_SYSTICK_Config>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d004      	beq.n	80004ac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80004a2:	230f      	movs	r3, #15
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e006      	b.n	80004ba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	2200      	movs	r2, #0
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 f8cf 	bl	8000658 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80004ba:	230f      	movs	r3, #15
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	781b      	ldrb	r3, [r3, #0]
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000000 	.word	0x20000000

080004cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  uwTick++;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_IncTick+0x14>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <HAL_IncTick+0x14>)
 80004d8:	601a      	str	r2, [r3, #0]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000020 	.word	0x20000020

080004e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  return uwTick;
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <HAL_GetTick+0x10>)
 80004ea:	681b      	ldr	r3, [r3, #0]
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	20000020 	.word	0x20000020

080004f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000500:	f7ff fff0 	bl	80004e4 <HAL_GetTick>
 8000504:	0003      	movs	r3, r0
 8000506:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3301      	adds	r3, #1
 8000510:	d002      	beq.n	8000518 <HAL_Delay+0x20>
  {
    wait++;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	f7ff ffe3 	bl	80004e4 <HAL_GetTick>
 800051e:	0002      	movs	r2, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	429a      	cmp	r2, r3
 8000528:	d8f7      	bhi.n	800051a <HAL_Delay+0x22>
  {
  }
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b004      	add	sp, #16
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000542:	1dfb      	adds	r3, r7, #7
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b7f      	cmp	r3, #127	; 0x7f
 8000548:	d932      	bls.n	80005b0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800054a:	4a2f      	ldr	r2, [pc, #188]	; (8000608 <NVIC_SetPriority+0xd4>)
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	0019      	movs	r1, r3
 8000552:	230f      	movs	r3, #15
 8000554:	400b      	ands	r3, r1
 8000556:	3b08      	subs	r3, #8
 8000558:	089b      	lsrs	r3, r3, #2
 800055a:	3306      	adds	r3, #6
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	18d3      	adds	r3, r2, r3
 8000560:	3304      	adds	r3, #4
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	1dfa      	adds	r2, r7, #7
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	0011      	movs	r1, r2
 800056a:	2203      	movs	r2, #3
 800056c:	400a      	ands	r2, r1
 800056e:	00d2      	lsls	r2, r2, #3
 8000570:	21ff      	movs	r1, #255	; 0xff
 8000572:	4091      	lsls	r1, r2
 8000574:	000a      	movs	r2, r1
 8000576:	43d2      	mvns	r2, r2
 8000578:	401a      	ands	r2, r3
 800057a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	019b      	lsls	r3, r3, #6
 8000580:	22ff      	movs	r2, #255	; 0xff
 8000582:	401a      	ands	r2, r3
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	0018      	movs	r0, r3
 800058a:	2303      	movs	r3, #3
 800058c:	4003      	ands	r3, r0
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000592:	481d      	ldr	r0, [pc, #116]	; (8000608 <NVIC_SetPriority+0xd4>)
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	001c      	movs	r4, r3
 800059a:	230f      	movs	r3, #15
 800059c:	4023      	ands	r3, r4
 800059e:	3b08      	subs	r3, #8
 80005a0:	089b      	lsrs	r3, r3, #2
 80005a2:	430a      	orrs	r2, r1
 80005a4:	3306      	adds	r3, #6
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	18c3      	adds	r3, r0, r3
 80005aa:	3304      	adds	r3, #4
 80005ac:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005ae:	e027      	b.n	8000600 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005b0:	4a16      	ldr	r2, [pc, #88]	; (800060c <NVIC_SetPriority+0xd8>)
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b25b      	sxtb	r3, r3
 80005b8:	089b      	lsrs	r3, r3, #2
 80005ba:	33c0      	adds	r3, #192	; 0xc0
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	589b      	ldr	r3, [r3, r2]
 80005c0:	1dfa      	adds	r2, r7, #7
 80005c2:	7812      	ldrb	r2, [r2, #0]
 80005c4:	0011      	movs	r1, r2
 80005c6:	2203      	movs	r2, #3
 80005c8:	400a      	ands	r2, r1
 80005ca:	00d2      	lsls	r2, r2, #3
 80005cc:	21ff      	movs	r1, #255	; 0xff
 80005ce:	4091      	lsls	r1, r2
 80005d0:	000a      	movs	r2, r1
 80005d2:	43d2      	mvns	r2, r2
 80005d4:	401a      	ands	r2, r3
 80005d6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	019b      	lsls	r3, r3, #6
 80005dc:	22ff      	movs	r2, #255	; 0xff
 80005de:	401a      	ands	r2, r3
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	0018      	movs	r0, r3
 80005e6:	2303      	movs	r3, #3
 80005e8:	4003      	ands	r3, r0
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ee:	4807      	ldr	r0, [pc, #28]	; (800060c <NVIC_SetPriority+0xd8>)
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b25b      	sxtb	r3, r3
 80005f6:	089b      	lsrs	r3, r3, #2
 80005f8:	430a      	orrs	r2, r1
 80005fa:	33c0      	adds	r3, #192	; 0xc0
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	501a      	str	r2, [r3, r0]
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b003      	add	sp, #12
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	e000ed00 	.word	0xe000ed00
 800060c:	e000e100 	.word	0xe000e100

08000610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <SysTick_Config+0x40>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d901      	bls.n	8000626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000622:	2301      	movs	r3, #1
 8000624:	e010      	b.n	8000648 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <SysTick_Config+0x44>)
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	3a01      	subs	r2, #1
 800062c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800062e:	2301      	movs	r3, #1
 8000630:	425b      	negs	r3, r3
 8000632:	2103      	movs	r1, #3
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff7d 	bl	8000534 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <SysTick_Config+0x44>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <SysTick_Config+0x44>)
 8000642:	2207      	movs	r2, #7
 8000644:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000646:	2300      	movs	r3, #0
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	b002      	add	sp, #8
 800064e:	bd80      	pop	{r7, pc}
 8000650:	00ffffff 	.word	0x00ffffff
 8000654:	e000e010 	.word	0xe000e010

08000658 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
 8000662:	210f      	movs	r1, #15
 8000664:	187b      	adds	r3, r7, r1
 8000666:	1c02      	adds	r2, r0, #0
 8000668:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	187b      	adds	r3, r7, r1
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b25b      	sxtb	r3, r3
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff ff5d 	bl	8000534 <NVIC_SetPriority>
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b004      	add	sp, #16
 8000680:	bd80      	pop	{r7, pc}

08000682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	0018      	movs	r0, r3
 800068e:	f7ff ffbf 	bl	8000610 <SysTick_Config>
 8000692:	0003      	movs	r3, r0
}
 8000694:	0018      	movs	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	b002      	add	sp, #8
 800069a:	bd80      	pop	{r7, pc}

0800069c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80006b2:	e143      	b.n	800093c <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2101      	movs	r1, #1
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	4091      	lsls	r1, r2
 80006be:	000a      	movs	r2, r1
 80006c0:	4013      	ands	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d100      	bne.n	80006cc <HAL_GPIO_Init+0x30>
 80006ca:	e134      	b.n	8000936 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d003      	beq.n	80006dc <HAL_GPIO_Init+0x40>
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b12      	cmp	r3, #18
 80006da:	d123      	bne.n	8000724 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	08da      	lsrs	r2, r3, #3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3208      	adds	r2, #8
 80006e4:	0092      	lsls	r2, r2, #2
 80006e6:	58d3      	ldr	r3, [r2, r3]
 80006e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	2207      	movs	r2, #7
 80006ee:	4013      	ands	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	220f      	movs	r2, #15
 80006f4:	409a      	lsls	r2, r3
 80006f6:	0013      	movs	r3, r2
 80006f8:	43da      	mvns	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	4013      	ands	r3, r2
 80006fe:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	691a      	ldr	r2, [r3, #16]
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	2107      	movs	r1, #7
 8000708:	400b      	ands	r3, r1
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	409a      	lsls	r2, r3
 800070e:	0013      	movs	r3, r2
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	4313      	orrs	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	08da      	lsrs	r2, r3, #3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3208      	adds	r2, #8
 800071e:	0092      	lsls	r2, r2, #2
 8000720:	6939      	ldr	r1, [r7, #16]
 8000722:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d00b      	beq.n	8000744 <HAL_GPIO_Init+0xa8>
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d007      	beq.n	8000744 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000738:	2b11      	cmp	r3, #17
 800073a:	d003      	beq.n	8000744 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	2b12      	cmp	r3, #18
 8000742:	d130      	bne.n	80007a6 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	2203      	movs	r2, #3
 8000750:	409a      	lsls	r2, r3
 8000752:	0013      	movs	r3, r2
 8000754:	43da      	mvns	r2, r3
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	4013      	ands	r3, r2
 800075a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	68da      	ldr	r2, [r3, #12]
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	409a      	lsls	r2, r3
 8000766:	0013      	movs	r3, r2
 8000768:	693a      	ldr	r2, [r7, #16]
 800076a:	4313      	orrs	r3, r2
 800076c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800077a:	2201      	movs	r2, #1
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	409a      	lsls	r2, r3
 8000780:	0013      	movs	r3, r2
 8000782:	43da      	mvns	r2, r3
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	4013      	ands	r3, r2
 8000788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	091b      	lsrs	r3, r3, #4
 8000790:	2201      	movs	r2, #1
 8000792:	401a      	ands	r2, r3
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	409a      	lsls	r2, r3
 8000798:	0013      	movs	r3, r2
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	4313      	orrs	r3, r2
 800079e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	2203      	movs	r2, #3
 80007b2:	409a      	lsls	r2, r3
 80007b4:	0013      	movs	r3, r2
 80007b6:	43da      	mvns	r2, r3
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	4013      	ands	r3, r2
 80007bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	2203      	movs	r2, #3
 80007c4:	401a      	ands	r2, r3
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	409a      	lsls	r2, r3
 80007cc:	0013      	movs	r3, r2
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	2203      	movs	r2, #3
 80007e6:	409a      	lsls	r2, r3
 80007e8:	0013      	movs	r3, r2
 80007ea:	43da      	mvns	r2, r3
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	4013      	ands	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	689a      	ldr	r2, [r3, #8]
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	409a      	lsls	r2, r3
 80007fc:	0013      	movs	r3, r2
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	4313      	orrs	r3, r2
 8000802:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685a      	ldr	r2, [r3, #4]
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	055b      	lsls	r3, r3, #21
 8000812:	4013      	ands	r3, r2
 8000814:	d100      	bne.n	8000818 <HAL_GPIO_Init+0x17c>
 8000816:	e08e      	b.n	8000936 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000818:	4b4e      	ldr	r3, [pc, #312]	; (8000954 <HAL_GPIO_Init+0x2b8>)
 800081a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081c:	4b4d      	ldr	r3, [pc, #308]	; (8000954 <HAL_GPIO_Init+0x2b8>)
 800081e:	2101      	movs	r1, #1
 8000820:	430a      	orrs	r2, r1
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000824:	4a4c      	ldr	r2, [pc, #304]	; (8000958 <HAL_GPIO_Init+0x2bc>)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	089b      	lsrs	r3, r3, #2
 800082a:	3302      	adds	r3, #2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	589b      	ldr	r3, [r3, r2]
 8000830:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	2203      	movs	r2, #3
 8000836:	4013      	ands	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	220f      	movs	r2, #15
 800083c:	409a      	lsls	r2, r3
 800083e:	0013      	movs	r3, r2
 8000840:	43da      	mvns	r2, r3
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	23a0      	movs	r3, #160	; 0xa0
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	429a      	cmp	r2, r3
 8000850:	d00d      	beq.n	800086e <HAL_GPIO_Init+0x1d2>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a41      	ldr	r2, [pc, #260]	; (800095c <HAL_GPIO_Init+0x2c0>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d007      	beq.n	800086a <HAL_GPIO_Init+0x1ce>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a40      	ldr	r2, [pc, #256]	; (8000960 <HAL_GPIO_Init+0x2c4>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d101      	bne.n	8000866 <HAL_GPIO_Init+0x1ca>
 8000862:	2302      	movs	r3, #2
 8000864:	e004      	b.n	8000870 <HAL_GPIO_Init+0x1d4>
 8000866:	2306      	movs	r3, #6
 8000868:	e002      	b.n	8000870 <HAL_GPIO_Init+0x1d4>
 800086a:	2301      	movs	r3, #1
 800086c:	e000      	b.n	8000870 <HAL_GPIO_Init+0x1d4>
 800086e:	2300      	movs	r3, #0
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	2103      	movs	r1, #3
 8000874:	400a      	ands	r2, r1
 8000876:	0092      	lsls	r2, r2, #2
 8000878:	4093      	lsls	r3, r2
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	4313      	orrs	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000880:	4935      	ldr	r1, [pc, #212]	; (8000958 <HAL_GPIO_Init+0x2bc>)
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	089b      	lsrs	r3, r3, #2
 8000886:	3302      	adds	r3, #2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800088e:	4b35      	ldr	r3, [pc, #212]	; (8000964 <HAL_GPIO_Init+0x2c8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	43da      	mvns	r2, r3
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	4013      	ands	r3, r2
 800089c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685a      	ldr	r2, [r3, #4]
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	025b      	lsls	r3, r3, #9
 80008a6:	4013      	ands	r3, r2
 80008a8:	d003      	beq.n	80008b2 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <HAL_GPIO_Init+0x2c8>)
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80008b8:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <HAL_GPIO_Init+0x2c8>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	43da      	mvns	r2, r3
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685a      	ldr	r2, [r3, #4]
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	029b      	lsls	r3, r3, #10
 80008d0:	4013      	ands	r3, r2
 80008d2:	d003      	beq.n	80008dc <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4313      	orrs	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80008dc:	4b21      	ldr	r3, [pc, #132]	; (8000964 <HAL_GPIO_Init+0x2c8>)
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008e2:	4b20      	ldr	r3, [pc, #128]	; (8000964 <HAL_GPIO_Init+0x2c8>)
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	43da      	mvns	r2, r3
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685a      	ldr	r2, [r3, #4]
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	035b      	lsls	r3, r3, #13
 80008fa:	4013      	ands	r3, r2
 80008fc:	d003      	beq.n	8000906 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4313      	orrs	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <HAL_GPIO_Init+0x2c8>)
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_GPIO_Init+0x2c8>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	43da      	mvns	r2, r3
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	4013      	ands	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685a      	ldr	r2, [r3, #4]
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	039b      	lsls	r3, r3, #14
 8000924:	4013      	ands	r3, r2
 8000926:	d003      	beq.n	8000930 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_GPIO_Init+0x2c8>)
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	40da      	lsrs	r2, r3
 8000944:	1e13      	subs	r3, r2, #0
 8000946:	d000      	beq.n	800094a <HAL_GPIO_Init+0x2ae>
 8000948:	e6b4      	b.n	80006b4 <HAL_GPIO_Init+0x18>
  }
}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b006      	add	sp, #24
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	40021000 	.word	0x40021000
 8000958:	40010000 	.word	0x40010000
 800095c:	50000400 	.word	0x50000400
 8000960:	50000800 	.word	0x50000800
 8000964:	40010400 	.word	0x40010400

08000968 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	0008      	movs	r0, r1
 8000972:	0011      	movs	r1, r2
 8000974:	1cbb      	adds	r3, r7, #2
 8000976:	1c02      	adds	r2, r0, #0
 8000978:	801a      	strh	r2, [r3, #0]
 800097a:	1c7b      	adds	r3, r7, #1
 800097c:	1c0a      	adds	r2, r1, #0
 800097e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000980:	1c7b      	adds	r3, r7, #1
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d004      	beq.n	8000992 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000988:	1cbb      	adds	r3, r7, #2
 800098a:	881a      	ldrh	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000990:	e003      	b.n	800099a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000992:	1cbb      	adds	r3, r7, #2
 8000994:	881a      	ldrh	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009a4:	b5b0      	push	{r4, r5, r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d102      	bne.n	80009b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	f000 fb6a 	bl	800108c <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009b8:	4bc7      	ldr	r3, [pc, #796]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	220c      	movs	r2, #12
 80009be:	4013      	ands	r3, r2
 80009c0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009c2:	4bc5      	ldr	r3, [pc, #788]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 80009c4:	68da      	ldr	r2, [r3, #12]
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	025b      	lsls	r3, r3, #9
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2201      	movs	r2, #1
 80009d4:	4013      	ands	r3, r2
 80009d6:	d100      	bne.n	80009da <HAL_RCC_OscConfig+0x36>
 80009d8:	e07d      	b.n	8000ad6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	2b08      	cmp	r3, #8
 80009de:	d007      	beq.n	80009f0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	2b0c      	cmp	r3, #12
 80009e4:	d112      	bne.n	8000a0c <HAL_RCC_OscConfig+0x68>
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	025b      	lsls	r3, r3, #9
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d10d      	bne.n	8000a0c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009f0:	4bb9      	ldr	r3, [pc, #740]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	029b      	lsls	r3, r3, #10
 80009f8:	4013      	ands	r3, r2
 80009fa:	d100      	bne.n	80009fe <HAL_RCC_OscConfig+0x5a>
 80009fc:	e06a      	b.n	8000ad4 <HAL_RCC_OscConfig+0x130>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d166      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	f000 fb40 	bl	800108c <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	025b      	lsls	r3, r3, #9
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d107      	bne.n	8000a28 <HAL_RCC_OscConfig+0x84>
 8000a18:	4baf      	ldr	r3, [pc, #700]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4bae      	ldr	r3, [pc, #696]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	0249      	lsls	r1, r1, #9
 8000a22:	430a      	orrs	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	e027      	b.n	8000a78 <HAL_RCC_OscConfig+0xd4>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	23a0      	movs	r3, #160	; 0xa0
 8000a2e:	02db      	lsls	r3, r3, #11
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d10e      	bne.n	8000a52 <HAL_RCC_OscConfig+0xae>
 8000a34:	4ba8      	ldr	r3, [pc, #672]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4ba7      	ldr	r3, [pc, #668]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	02c9      	lsls	r1, r1, #11
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	4ba5      	ldr	r3, [pc, #660]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	4ba4      	ldr	r3, [pc, #656]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	0249      	lsls	r1, r1, #9
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	e012      	b.n	8000a78 <HAL_RCC_OscConfig+0xd4>
 8000a52:	4ba1      	ldr	r3, [pc, #644]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4ba0      	ldr	r3, [pc, #640]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000a58:	49a0      	ldr	r1, [pc, #640]	; (8000cdc <HAL_RCC_OscConfig+0x338>)
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	4b9e      	ldr	r3, [pc, #632]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	025b      	lsls	r3, r3, #9
 8000a66:	4013      	ands	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4b9a      	ldr	r3, [pc, #616]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b99      	ldr	r3, [pc, #612]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000a72:	499b      	ldr	r1, [pc, #620]	; (8000ce0 <HAL_RCC_OscConfig+0x33c>)
 8000a74:	400a      	ands	r2, r1
 8000a76:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d014      	beq.n	8000aaa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a80:	f7ff fd30 	bl	80004e4 <HAL_GetTick>
 8000a84:	0003      	movs	r3, r0
 8000a86:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a88:	e008      	b.n	8000a9c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a8a:	f7ff fd2b 	bl	80004e4 <HAL_GetTick>
 8000a8e:	0002      	movs	r2, r0
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	2b64      	cmp	r3, #100	; 0x64
 8000a96:	d901      	bls.n	8000a9c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	e2f7      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a9c:	4b8e      	ldr	r3, [pc, #568]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	029b      	lsls	r3, r3, #10
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	d0f0      	beq.n	8000a8a <HAL_RCC_OscConfig+0xe6>
 8000aa8:	e015      	b.n	8000ad6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aaa:	f7ff fd1b 	bl	80004e4 <HAL_GetTick>
 8000aae:	0003      	movs	r3, r0
 8000ab0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ab2:	e008      	b.n	8000ac6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ab4:	f7ff fd16 	bl	80004e4 <HAL_GetTick>
 8000ab8:	0002      	movs	r2, r0
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	2b64      	cmp	r3, #100	; 0x64
 8000ac0:	d901      	bls.n	8000ac6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	e2e2      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ac6:	4b84      	ldr	r3, [pc, #528]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	029b      	lsls	r3, r3, #10
 8000ace:	4013      	ands	r3, r2
 8000ad0:	d1f0      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x110>
 8000ad2:	e000      	b.n	8000ad6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2202      	movs	r2, #2
 8000adc:	4013      	ands	r3, r2
 8000ade:	d100      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x13e>
 8000ae0:	e098      	b.n	8000c14 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	2220      	movs	r2, #32
 8000aec:	4013      	ands	r3, r2
 8000aee:	d009      	beq.n	8000b04 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000af0:	4b79      	ldr	r3, [pc, #484]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b78      	ldr	r3, [pc, #480]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000af6:	2120      	movs	r1, #32
 8000af8:	430a      	orrs	r2, r1
 8000afa:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	2220      	movs	r2, #32
 8000b00:	4393      	bics	r3, r2
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d005      	beq.n	8000b16 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	2b0c      	cmp	r3, #12
 8000b0e:	d13d      	bne.n	8000b8c <HAL_RCC_OscConfig+0x1e8>
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d13a      	bne.n	8000b8c <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000b16:	4b70      	ldr	r3, [pc, #448]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	d004      	beq.n	8000b2a <HAL_RCC_OscConfig+0x186>
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d101      	bne.n	8000b2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e2b0      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b2a:	4b6b      	ldr	r3, [pc, #428]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	4a6d      	ldr	r2, [pc, #436]	; (8000ce4 <HAL_RCC_OscConfig+0x340>)
 8000b30:	4013      	ands	r3, r2
 8000b32:	0019      	movs	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	021a      	lsls	r2, r3, #8
 8000b3a:	4b67      	ldr	r3, [pc, #412]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b40:	4b65      	ldr	r3, [pc, #404]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2209      	movs	r2, #9
 8000b46:	4393      	bics	r3, r2
 8000b48:	0019      	movs	r1, r3
 8000b4a:	4b63      	ldr	r3, [pc, #396]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b52:	f000 fbcb 	bl	80012ec <HAL_RCC_GetSysClockFreq>
 8000b56:	0001      	movs	r1, r0
 8000b58:	4b5f      	ldr	r3, [pc, #380]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	091b      	lsrs	r3, r3, #4
 8000b5e:	220f      	movs	r2, #15
 8000b60:	4013      	ands	r3, r2
 8000b62:	4a61      	ldr	r2, [pc, #388]	; (8000ce8 <HAL_RCC_OscConfig+0x344>)
 8000b64:	5cd3      	ldrb	r3, [r2, r3]
 8000b66:	000a      	movs	r2, r1
 8000b68:	40da      	lsrs	r2, r3
 8000b6a:	4b60      	ldr	r3, [pc, #384]	; (8000cec <HAL_RCC_OscConfig+0x348>)
 8000b6c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000b6e:	2513      	movs	r5, #19
 8000b70:	197c      	adds	r4, r7, r5
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff fc80 	bl	8000478 <HAL_InitTick>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000b7c:	197b      	adds	r3, r7, r5
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d047      	beq.n	8000c14 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8000b84:	2313      	movs	r3, #19
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	e27f      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d027      	beq.n	8000be2 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b92:	4b51      	ldr	r3, [pc, #324]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2209      	movs	r2, #9
 8000b98:	4393      	bics	r3, r2
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fc9e 	bl	80004e4 <HAL_GetTick>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000bac:	e008      	b.n	8000bc0 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bae:	f7ff fc99 	bl	80004e4 <HAL_GetTick>
 8000bb2:	0002      	movs	r2, r0
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d901      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e265      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000bc0:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d0f1      	beq.n	8000bae <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bca:	4b43      	ldr	r3, [pc, #268]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	4a45      	ldr	r2, [pc, #276]	; (8000ce4 <HAL_RCC_OscConfig+0x340>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	021a      	lsls	r2, r3, #8
 8000bda:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	e018      	b.n	8000c14 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000be2:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000be8:	2101      	movs	r1, #1
 8000bea:	438a      	bics	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bee:	f7ff fc79 	bl	80004e4 <HAL_GetTick>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bf8:	f7ff fc74 	bl	80004e4 <HAL_GetTick>
 8000bfc:	0002      	movs	r2, r0
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e240      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000c0a:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2204      	movs	r2, #4
 8000c10:	4013      	ands	r3, r2
 8000c12:	d1f1      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2210      	movs	r2, #16
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d100      	bne.n	8000c20 <HAL_RCC_OscConfig+0x27c>
 8000c1e:	e09e      	b.n	8000d5e <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d13f      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c26:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4013      	ands	r3, r2
 8000c30:	d005      	beq.n	8000c3e <HAL_RCC_OscConfig+0x29a>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e226      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	4a2b      	ldr	r2, [pc, #172]	; (8000cf0 <HAL_RCC_OscConfig+0x34c>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	0019      	movs	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a1a      	ldr	r2, [r3, #32]
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	021b      	lsls	r3, r3, #8
 8000c58:	0a19      	lsrs	r1, r3, #8
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	061a      	lsls	r2, r3, #24
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000c62:	430a      	orrs	r2, r1
 8000c64:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a1b      	ldr	r3, [r3, #32]
 8000c6a:	0b5b      	lsrs	r3, r3, #13
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	0212      	lsls	r2, r2, #8
 8000c72:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	091b      	lsrs	r3, r3, #4
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	400b      	ands	r3, r1
 8000c7e:	491a      	ldr	r1, [pc, #104]	; (8000ce8 <HAL_RCC_OscConfig+0x344>)
 8000c80:	5ccb      	ldrb	r3, [r1, r3]
 8000c82:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_RCC_OscConfig+0x348>)
 8000c86:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000c88:	2513      	movs	r5, #19
 8000c8a:	197c      	adds	r4, r7, r5
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff fbf3 	bl	8000478 <HAL_InitTick>
 8000c92:	0003      	movs	r3, r0
 8000c94:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000c96:	197b      	adds	r3, r7, r5
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d05f      	beq.n	8000d5e <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8000c9e:	2313      	movs	r3, #19
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	e1f2      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d03d      	beq.n	8000d2a <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	0049      	lsls	r1, r1, #1
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fc12 	bl	80004e4 <HAL_GetTick>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000cc4:	e016      	b.n	8000cf4 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cc6:	f7ff fc0d 	bl	80004e4 <HAL_GetTick>
 8000cca:	0002      	movs	r2, r0
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d90f      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e1d9      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	fffeffff 	.word	0xfffeffff
 8000ce0:	fffbffff 	.word	0xfffbffff
 8000ce4:	ffffe0ff 	.word	0xffffe0ff
 8000ce8:	08002a4c 	.word	0x08002a4c
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000cf4:	4bca      	ldr	r3, [pc, #808]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d0e2      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d00:	4bc7      	ldr	r3, [pc, #796]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	4ac7      	ldr	r2, [pc, #796]	; (8001024 <HAL_RCC_OscConfig+0x680>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	0019      	movs	r1, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a1a      	ldr	r2, [r3, #32]
 8000d0e:	4bc4      	ldr	r3, [pc, #784]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000d10:	430a      	orrs	r2, r1
 8000d12:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d14:	4bc2      	ldr	r3, [pc, #776]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	021b      	lsls	r3, r3, #8
 8000d1a:	0a19      	lsrs	r1, r3, #8
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	061a      	lsls	r2, r3, #24
 8000d22:	4bbf      	ldr	r3, [pc, #764]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000d24:	430a      	orrs	r2, r1
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	e019      	b.n	8000d5e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d2a:	4bbd      	ldr	r3, [pc, #756]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4bbc      	ldr	r3, [pc, #752]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000d30:	49bd      	ldr	r1, [pc, #756]	; (8001028 <HAL_RCC_OscConfig+0x684>)
 8000d32:	400a      	ands	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d36:	f7ff fbd5 	bl	80004e4 <HAL_GetTick>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d40:	f7ff fbd0 	bl	80004e4 <HAL_GetTick>
 8000d44:	0002      	movs	r2, r0
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e19c      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000d52:	4bb3      	ldr	r3, [pc, #716]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d1f0      	bne.n	8000d40 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2208      	movs	r2, #8
 8000d64:	4013      	ands	r3, r2
 8000d66:	d036      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d019      	beq.n	8000da4 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d70:	4bab      	ldr	r3, [pc, #684]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000d72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d74:	4baa      	ldr	r3, [pc, #680]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000d76:	2101      	movs	r1, #1
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fbb2 	bl	80004e4 <HAL_GetTick>
 8000d80:	0003      	movs	r3, r0
 8000d82:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000d84:	e008      	b.n	8000d98 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d86:	f7ff fbad 	bl	80004e4 <HAL_GetTick>
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e179      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000d98:	4ba1      	ldr	r3, [pc, #644]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	4013      	ands	r3, r2
 8000da0:	d0f1      	beq.n	8000d86 <HAL_RCC_OscConfig+0x3e2>
 8000da2:	e018      	b.n	8000dd6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000da4:	4b9e      	ldr	r3, [pc, #632]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000da6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000da8:	4b9d      	ldr	r3, [pc, #628]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000daa:	2101      	movs	r1, #1
 8000dac:	438a      	bics	r2, r1
 8000dae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db0:	f7ff fb98 	bl	80004e4 <HAL_GetTick>
 8000db4:	0003      	movs	r3, r0
 8000db6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000db8:	e008      	b.n	8000dcc <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dba:	f7ff fb93 	bl	80004e4 <HAL_GetTick>
 8000dbe:	0002      	movs	r2, r0
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e15f      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000dcc:	4b94      	ldr	r3, [pc, #592]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d1f1      	bne.n	8000dba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2204      	movs	r2, #4
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d100      	bne.n	8000de2 <HAL_RCC_OscConfig+0x43e>
 8000de0:	e0af      	b.n	8000f42 <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000de2:	2323      	movs	r3, #35	; 0x23
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dea:	4b8d      	ldr	r3, [pc, #564]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	055b      	lsls	r3, r3, #21
 8000df2:	4013      	ands	r3, r2
 8000df4:	d10a      	bne.n	8000e0c <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b8a      	ldr	r3, [pc, #552]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dfa:	4b89      	ldr	r3, [pc, #548]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	0549      	lsls	r1, r1, #21
 8000e00:	430a      	orrs	r2, r1
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8000e04:	2323      	movs	r3, #35	; 0x23
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0c:	4b87      	ldr	r3, [pc, #540]	; (800102c <HAL_RCC_OscConfig+0x688>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4013      	ands	r3, r2
 8000e16:	d11a      	bne.n	8000e4e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e18:	4b84      	ldr	r3, [pc, #528]	; (800102c <HAL_RCC_OscConfig+0x688>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b83      	ldr	r3, [pc, #524]	; (800102c <HAL_RCC_OscConfig+0x688>)
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	0049      	lsls	r1, r1, #1
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e26:	f7ff fb5d 	bl	80004e4 <HAL_GetTick>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e30:	f7ff fb58 	bl	80004e4 <HAL_GetTick>
 8000e34:	0002      	movs	r2, r0
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b64      	cmp	r3, #100	; 0x64
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e124      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e42:	4b7a      	ldr	r3, [pc, #488]	; (800102c <HAL_RCC_OscConfig+0x688>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d0f0      	beq.n	8000e30 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d107      	bne.n	8000e6a <HAL_RCC_OscConfig+0x4c6>
 8000e5a:	4b71      	ldr	r3, [pc, #452]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e5e:	4b70      	ldr	r3, [pc, #448]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	0049      	lsls	r1, r1, #1
 8000e64:	430a      	orrs	r2, r1
 8000e66:	651a      	str	r2, [r3, #80]	; 0x50
 8000e68:	e031      	b.n	8000ece <HAL_RCC_OscConfig+0x52a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10c      	bne.n	8000e8c <HAL_RCC_OscConfig+0x4e8>
 8000e72:	4b6b      	ldr	r3, [pc, #428]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000e74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e76:	4b6a      	ldr	r3, [pc, #424]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000e78:	496b      	ldr	r1, [pc, #428]	; (8001028 <HAL_RCC_OscConfig+0x684>)
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	651a      	str	r2, [r3, #80]	; 0x50
 8000e7e:	4b68      	ldr	r3, [pc, #416]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e82:	4b67      	ldr	r3, [pc, #412]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000e84:	496a      	ldr	r1, [pc, #424]	; (8001030 <HAL_RCC_OscConfig+0x68c>)
 8000e86:	400a      	ands	r2, r1
 8000e88:	651a      	str	r2, [r3, #80]	; 0x50
 8000e8a:	e020      	b.n	8000ece <HAL_RCC_OscConfig+0x52a>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	23a0      	movs	r3, #160	; 0xa0
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d10e      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x512>
 8000e98:	4b61      	ldr	r3, [pc, #388]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000e9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e9c:	4b60      	ldr	r3, [pc, #384]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	00c9      	lsls	r1, r1, #3
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	651a      	str	r2, [r3, #80]	; 0x50
 8000ea6:	4b5e      	ldr	r3, [pc, #376]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000ea8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eaa:	4b5d      	ldr	r3, [pc, #372]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	0049      	lsls	r1, r1, #1
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	651a      	str	r2, [r3, #80]	; 0x50
 8000eb4:	e00b      	b.n	8000ece <HAL_RCC_OscConfig+0x52a>
 8000eb6:	4b5a      	ldr	r3, [pc, #360]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000eb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eba:	4b59      	ldr	r3, [pc, #356]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000ebc:	495a      	ldr	r1, [pc, #360]	; (8001028 <HAL_RCC_OscConfig+0x684>)
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	651a      	str	r2, [r3, #80]	; 0x50
 8000ec2:	4b57      	ldr	r3, [pc, #348]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000ec4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ec6:	4b56      	ldr	r3, [pc, #344]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000ec8:	4959      	ldr	r1, [pc, #356]	; (8001030 <HAL_RCC_OscConfig+0x68c>)
 8000eca:	400a      	ands	r2, r1
 8000ecc:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d015      	beq.n	8000f02 <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fb05 	bl	80004e4 <HAL_GetTick>
 8000eda:	0003      	movs	r3, r0
 8000edc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ede:	e009      	b.n	8000ef4 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fb00 	bl	80004e4 <HAL_GetTick>
 8000ee4:	0002      	movs	r2, r0
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	4a52      	ldr	r2, [pc, #328]	; (8001034 <HAL_RCC_OscConfig+0x690>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e0cb      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ef4:	4b4a      	ldr	r3, [pc, #296]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000ef6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4013      	ands	r3, r2
 8000efe:	d0ef      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x53c>
 8000f00:	e014      	b.n	8000f2c <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f02:	f7ff faef 	bl	80004e4 <HAL_GetTick>
 8000f06:	0003      	movs	r3, r0
 8000f08:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f0a:	e009      	b.n	8000f20 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0c:	f7ff faea 	bl	80004e4 <HAL_GetTick>
 8000f10:	0002      	movs	r2, r0
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	4a47      	ldr	r2, [pc, #284]	; (8001034 <HAL_RCC_OscConfig+0x690>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e0b5      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f20:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d1ef      	bne.n	8000f0c <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f2c:	2323      	movs	r3, #35	; 0x23
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d105      	bne.n	8000f42 <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f36:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f3a:	4b39      	ldr	r3, [pc, #228]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000f3c:	493e      	ldr	r1, [pc, #248]	; (8001038 <HAL_RCC_OscConfig+0x694>)
 8000f3e:	400a      	ands	r2, r1
 8000f40:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d100      	bne.n	8000f4c <HAL_RCC_OscConfig+0x5a8>
 8000f4a:	e09e      	b.n	800108a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	2b0c      	cmp	r3, #12
 8000f50:	d100      	bne.n	8000f54 <HAL_RCC_OscConfig+0x5b0>
 8000f52:	e077      	b.n	8001044 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d145      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f5c:	4b30      	ldr	r3, [pc, #192]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000f62:	4936      	ldr	r1, [pc, #216]	; (800103c <HAL_RCC_OscConfig+0x698>)
 8000f64:	400a      	ands	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fabc 	bl	80004e4 <HAL_GetTick>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f72:	f7ff fab7 	bl	80004e4 <HAL_GetTick>
 8000f76:	0002      	movs	r2, r0
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e083      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	049b      	lsls	r3, r3, #18
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d1f0      	bne.n	8000f72 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	4a2a      	ldr	r2, [pc, #168]	; (8001040 <HAL_RCC_OscConfig+0x69c>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	0019      	movs	r1, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000fac:	430a      	orrs	r2, r1
 8000fae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	0449      	lsls	r1, r1, #17
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fa91 	bl	80004e4 <HAL_GetTick>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc8:	f7ff fa8c 	bl	80004e4 <HAL_GetTick>
 8000fcc:	0002      	movs	r2, r0
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e058      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	049b      	lsls	r3, r3, #18
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d0f0      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x624>
 8000fe6:	e050      	b.n	800108a <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8000fee:	4913      	ldr	r1, [pc, #76]	; (800103c <HAL_RCC_OscConfig+0x698>)
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fa76 	bl	80004e4 <HAL_GetTick>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ffe:	f7ff fa71 	bl	80004e4 <HAL_GetTick>
 8001002:	0002      	movs	r2, r0
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e03d      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_RCC_OscConfig+0x67c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	049b      	lsls	r3, r3, #18
 8001018:	4013      	ands	r3, r2
 800101a:	d1f0      	bne.n	8000ffe <HAL_RCC_OscConfig+0x65a>
 800101c:	e035      	b.n	800108a <HAL_RCC_OscConfig+0x6e6>
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	40021000 	.word	0x40021000
 8001024:	ffff1fff 	.word	0xffff1fff
 8001028:	fffffeff 	.word	0xfffffeff
 800102c:	40007000 	.word	0x40007000
 8001030:	fffffbff 	.word	0xfffffbff
 8001034:	00001388 	.word	0x00001388
 8001038:	efffffff 	.word	0xefffffff
 800103c:	feffffff 	.word	0xfeffffff
 8001040:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e01d      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_RCC_OscConfig+0x6f0>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	025b      	lsls	r3, r3, #9
 800105c:	401a      	ands	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	429a      	cmp	r2, r3
 8001064:	d10f      	bne.n	8001086 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	23f0      	movs	r3, #240	; 0xf0
 800106a:	039b      	lsls	r3, r3, #14
 800106c:	401a      	ands	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001072:	429a      	cmp	r2, r3
 8001074:	d107      	bne.n	8001086 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	23c0      	movs	r3, #192	; 0xc0
 800107a:	041b      	lsls	r3, r3, #16
 800107c:	401a      	ands	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001082:	429a      	cmp	r2, r3
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b00a      	add	sp, #40	; 0x28
 8001092:	bdb0      	pop	{r4, r5, r7, pc}
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e10d      	b.n	80012c8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010ac:	4b88      	ldr	r3, [pc, #544]	; (80012d0 <HAL_RCC_ClockConfig+0x238>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4013      	ands	r3, r2
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d911      	bls.n	80010de <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ba:	4b85      	ldr	r3, [pc, #532]	; (80012d0 <HAL_RCC_ClockConfig+0x238>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2201      	movs	r2, #1
 80010c0:	4393      	bics	r3, r2
 80010c2:	0019      	movs	r1, r3
 80010c4:	4b82      	ldr	r3, [pc, #520]	; (80012d0 <HAL_RCC_ClockConfig+0x238>)
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010cc:	4b80      	ldr	r3, [pc, #512]	; (80012d0 <HAL_RCC_ClockConfig+0x238>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2201      	movs	r2, #1
 80010d2:	4013      	ands	r3, r2
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d001      	beq.n	80010de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e0f4      	b.n	80012c8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2202      	movs	r2, #2
 80010e4:	4013      	ands	r3, r2
 80010e6:	d009      	beq.n	80010fc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e8:	4b7a      	ldr	r3, [pc, #488]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	22f0      	movs	r2, #240	; 0xf0
 80010ee:	4393      	bics	r3, r2
 80010f0:	0019      	movs	r1, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	4b77      	ldr	r3, [pc, #476]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 80010f8:	430a      	orrs	r2, r1
 80010fa:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2201      	movs	r2, #1
 8001102:	4013      	ands	r3, r2
 8001104:	d100      	bne.n	8001108 <HAL_RCC_ClockConfig+0x70>
 8001106:	e089      	b.n	800121c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d107      	bne.n	8001120 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001110:	4b70      	ldr	r3, [pc, #448]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	029b      	lsls	r3, r3, #10
 8001118:	4013      	ands	r3, r2
 800111a:	d120      	bne.n	800115e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e0d3      	b.n	80012c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b03      	cmp	r3, #3
 8001126:	d107      	bne.n	8001138 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001128:	4b6a      	ldr	r3, [pc, #424]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	049b      	lsls	r3, r3, #18
 8001130:	4013      	ands	r3, r2
 8001132:	d114      	bne.n	800115e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e0c7      	b.n	80012c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d106      	bne.n	800114e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001140:	4b64      	ldr	r3, [pc, #400]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2204      	movs	r2, #4
 8001146:	4013      	ands	r3, r2
 8001148:	d109      	bne.n	800115e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e0bc      	b.n	80012c8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800114e:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4013      	ands	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e0b4      	b.n	80012c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2203      	movs	r2, #3
 8001164:	4393      	bics	r3, r2
 8001166:	0019      	movs	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 800116e:	430a      	orrs	r2, r1
 8001170:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001172:	f7ff f9b7 	bl	80004e4 <HAL_GetTick>
 8001176:	0003      	movs	r3, r0
 8001178:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d111      	bne.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001182:	e009      	b.n	8001198 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001184:	f7ff f9ae 	bl	80004e4 <HAL_GetTick>
 8001188:	0002      	movs	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <HAL_RCC_ClockConfig+0x240>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e097      	b.n	80012c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001198:	4b4e      	ldr	r3, [pc, #312]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	220c      	movs	r2, #12
 800119e:	4013      	ands	r3, r2
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d1ef      	bne.n	8001184 <HAL_RCC_ClockConfig+0xec>
 80011a4:	e03a      	b.n	800121c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d111      	bne.n	80011d2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ae:	e009      	b.n	80011c4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b0:	f7ff f998 	bl	80004e4 <HAL_GetTick>
 80011b4:	0002      	movs	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	4a47      	ldr	r2, [pc, #284]	; (80012d8 <HAL_RCC_ClockConfig+0x240>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e081      	b.n	80012c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c4:	4b43      	ldr	r3, [pc, #268]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	220c      	movs	r2, #12
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b0c      	cmp	r3, #12
 80011ce:	d1ef      	bne.n	80011b0 <HAL_RCC_ClockConfig+0x118>
 80011d0:	e024      	b.n	800121c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d11b      	bne.n	8001212 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011da:	e009      	b.n	80011f0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011dc:	f7ff f982 	bl	80004e4 <HAL_GetTick>
 80011e0:	0002      	movs	r2, r0
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	4a3c      	ldr	r2, [pc, #240]	; (80012d8 <HAL_RCC_ClockConfig+0x240>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e06b      	b.n	80012c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011f0:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	220c      	movs	r2, #12
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d1ef      	bne.n	80011dc <HAL_RCC_ClockConfig+0x144>
 80011fc:	e00e      	b.n	800121c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011fe:	f7ff f971 	bl	80004e4 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	4a33      	ldr	r2, [pc, #204]	; (80012d8 <HAL_RCC_ClockConfig+0x240>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e05a      	b.n	80012c8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	220c      	movs	r2, #12
 8001218:	4013      	ands	r3, r2
 800121a:	d1f0      	bne.n	80011fe <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800121c:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <HAL_RCC_ClockConfig+0x238>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	4013      	ands	r3, r2
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d211      	bcs.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <HAL_RCC_ClockConfig+0x238>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	4393      	bics	r3, r2
 8001232:	0019      	movs	r1, r3
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_RCC_ClockConfig+0x238>)
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <HAL_RCC_ClockConfig+0x238>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2201      	movs	r2, #1
 8001242:	4013      	ands	r3, r2
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d001      	beq.n	800124e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e03c      	b.n	80012c8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2204      	movs	r2, #4
 8001254:	4013      	ands	r3, r2
 8001256:	d009      	beq.n	800126c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <HAL_RCC_ClockConfig+0x244>)
 800125e:	4013      	ands	r3, r2
 8001260:	0019      	movs	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 8001268:	430a      	orrs	r2, r1
 800126a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2208      	movs	r2, #8
 8001272:	4013      	ands	r3, r2
 8001274:	d00a      	beq.n	800128c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <HAL_RCC_ClockConfig+0x248>)
 800127c:	4013      	ands	r3, r2
 800127e:	0019      	movs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	00da      	lsls	r2, r3, #3
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 8001288:	430a      	orrs	r2, r1
 800128a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800128c:	f000 f82e 	bl	80012ec <HAL_RCC_GetSysClockFreq>
 8001290:	0001      	movs	r1, r0
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_RCC_ClockConfig+0x23c>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	220f      	movs	r2, #15
 800129a:	4013      	ands	r3, r2
 800129c:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <HAL_RCC_ClockConfig+0x24c>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	000a      	movs	r2, r1
 80012a2:	40da      	lsrs	r2, r3
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_RCC_ClockConfig+0x250>)
 80012a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80012a8:	250b      	movs	r5, #11
 80012aa:	197c      	adds	r4, r7, r5
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff f8e3 	bl	8000478 <HAL_InitTick>
 80012b2:	0003      	movs	r3, r0
 80012b4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80012b6:	197b      	adds	r3, r7, r5
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80012be:	230b      	movs	r3, #11
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	e000      	b.n	80012c8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b004      	add	sp, #16
 80012ce:	bdb0      	pop	{r4, r5, r7, pc}
 80012d0:	40022000 	.word	0x40022000
 80012d4:	40021000 	.word	0x40021000
 80012d8:	00001388 	.word	0x00001388
 80012dc:	fffff8ff 	.word	0xfffff8ff
 80012e0:	ffffc7ff 	.word	0xffffc7ff
 80012e4:	08002a4c 	.word	0x08002a4c
 80012e8:	20000000 	.word	0x20000000

080012ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80012f2:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	220c      	movs	r2, #12
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d00e      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x34>
 8001302:	2b0c      	cmp	r3, #12
 8001304:	d00f      	beq.n	8001326 <HAL_RCC_GetSysClockFreq+0x3a>
 8001306:	2b04      	cmp	r3, #4
 8001308:	d157      	bne.n	80013ba <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800130a:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2210      	movs	r2, #16
 8001310:	4013      	ands	r3, r2
 8001312:	d002      	beq.n	800131a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001314:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001316:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001318:	e05d      	b.n	80013d6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800131c:	613b      	str	r3, [r7, #16]
      break;
 800131e:	e05a      	b.n	80013d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001320:	4b32      	ldr	r3, [pc, #200]	; (80013ec <HAL_RCC_GetSysClockFreq+0x100>)
 8001322:	613b      	str	r3, [r7, #16]
      break;
 8001324:	e057      	b.n	80013d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	0c9b      	lsrs	r3, r3, #18
 800132a:	220f      	movs	r2, #15
 800132c:	4013      	ands	r3, r2
 800132e:	4a30      	ldr	r2, [pc, #192]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	0d9b      	lsrs	r3, r3, #22
 8001338:	2203      	movs	r2, #3
 800133a:	4013      	ands	r3, r2
 800133c:	3301      	adds	r3, #1
 800133e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	025b      	lsls	r3, r3, #9
 8001348:	4013      	ands	r3, r2
 800134a:	d00f      	beq.n	800136c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	000a      	movs	r2, r1
 8001350:	0152      	lsls	r2, r2, #5
 8001352:	1a52      	subs	r2, r2, r1
 8001354:	0193      	lsls	r3, r2, #6
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	185b      	adds	r3, r3, r1
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	0018      	movs	r0, r3
 8001362:	f7fe fed1 	bl	8000108 <__udivsi3>
 8001366:	0003      	movs	r3, r0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e023      	b.n	80013b4 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2210      	movs	r2, #16
 8001372:	4013      	ands	r3, r2
 8001374:	d00f      	beq.n	8001396 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	000a      	movs	r2, r1
 800137a:	0152      	lsls	r2, r2, #5
 800137c:	1a52      	subs	r2, r2, r1
 800137e:	0193      	lsls	r3, r2, #6
 8001380:	1a9b      	subs	r3, r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	185b      	adds	r3, r3, r1
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	0018      	movs	r0, r3
 800138c:	f7fe febc 	bl	8000108 <__udivsi3>
 8001390:	0003      	movs	r3, r0
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	e00e      	b.n	80013b4 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001396:	68b9      	ldr	r1, [r7, #8]
 8001398:	000a      	movs	r2, r1
 800139a:	0152      	lsls	r2, r2, #5
 800139c:	1a52      	subs	r2, r2, r1
 800139e:	0193      	lsls	r3, r2, #6
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	185b      	adds	r3, r3, r1
 80013a6:	029b      	lsls	r3, r3, #10
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f7fe feac 	bl	8000108 <__udivsi3>
 80013b0:	0003      	movs	r3, r0
 80013b2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
      break;
 80013b8:	e00d      	b.n	80013d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	0b5b      	lsrs	r3, r3, #13
 80013c0:	2207      	movs	r2, #7
 80013c2:	4013      	ands	r3, r2
 80013c4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	2280      	movs	r2, #128	; 0x80
 80013cc:	0212      	lsls	r2, r2, #8
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
      break;
 80013d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80013d6:	693b      	ldr	r3, [r7, #16]
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b006      	add	sp, #24
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	003d0900 	.word	0x003d0900
 80013e8:	00f42400 	.word	0x00f42400
 80013ec:	007a1200 	.word	0x007a1200
 80013f0:	08002a64 	.word	0x08002a64

080013f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013f8:	4b02      	ldr	r3, [pc, #8]	; (8001404 <HAL_RCC_GetHCLKFreq+0x10>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	20000000 	.word	0x20000000

08001408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800140c:	f7ff fff2 	bl	80013f4 <HAL_RCC_GetHCLKFreq>
 8001410:	0001      	movs	r1, r0
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	2207      	movs	r2, #7
 800141a:	4013      	ands	r3, r2
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_RCC_GetPCLK1Freq+0x28>)
 800141e:	5cd3      	ldrb	r3, [r2, r3]
 8001420:	40d9      	lsrs	r1, r3
 8001422:	000b      	movs	r3, r1
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	40021000 	.word	0x40021000
 8001430:	08002a5c 	.word	0x08002a5c

08001434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001438:	f7ff ffdc 	bl	80013f4 <HAL_RCC_GetHCLKFreq>
 800143c:	0001      	movs	r1, r0
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	0adb      	lsrs	r3, r3, #11
 8001444:	2207      	movs	r2, #7
 8001446:	4013      	ands	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <HAL_RCC_GetPCLK2Freq+0x28>)
 800144a:	5cd3      	ldrb	r3, [r2, r3]
 800144c:	40d9      	lsrs	r1, r3
 800144e:	000b      	movs	r3, r1
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	40021000 	.word	0x40021000
 800145c:	08002a5c 	.word	0x08002a5c

08001460 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2220      	movs	r2, #32
 800146e:	4013      	ands	r3, r2
 8001470:	d100      	bne.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8001472:	e0c7      	b.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001474:	2317      	movs	r3, #23
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147c:	4b82      	ldr	r3, [pc, #520]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800147e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	055b      	lsls	r3, r3, #21
 8001484:	4013      	ands	r3, r2
 8001486:	d10a      	bne.n	800149e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	4b7f      	ldr	r3, [pc, #508]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800148a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800148c:	4b7e      	ldr	r3, [pc, #504]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	0549      	lsls	r1, r1, #21
 8001492:	430a      	orrs	r2, r1
 8001494:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001496:	2317      	movs	r3, #23
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b7b      	ldr	r3, [pc, #492]	; (800168c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4013      	ands	r3, r2
 80014a8:	d11a      	bne.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014aa:	4b78      	ldr	r3, [pc, #480]	; (800168c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b77      	ldr	r3, [pc, #476]	; (800168c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	0049      	lsls	r1, r1, #1
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b8:	f7ff f814 	bl	80004e4 <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	e008      	b.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff f80f 	bl	80004e4 <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b64      	cmp	r3, #100	; 0x64
 80014ce:	d901      	bls.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e0d4      	b.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	4b6d      	ldr	r3, [pc, #436]	; (800168c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4013      	ands	r3, r2
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80014e0:	4b69      	ldr	r3, [pc, #420]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	23c0      	movs	r3, #192	; 0xc0
 80014e6:	039b      	lsls	r3, r3, #14
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	23c0      	movs	r3, #192	; 0xc0
 80014f2:	039b      	lsls	r3, r3, #14
 80014f4:	4013      	ands	r3, r2
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d013      	beq.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	23c0      	movs	r3, #192	; 0xc0
 8001502:	029b      	lsls	r3, r3, #10
 8001504:	401a      	ands	r2, r3
 8001506:	23c0      	movs	r3, #192	; 0xc0
 8001508:	029b      	lsls	r3, r3, #10
 800150a:	429a      	cmp	r2, r3
 800150c:	d10a      	bne.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800150e:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	029b      	lsls	r3, r3, #10
 8001516:	401a      	ands	r2, r3
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	029b      	lsls	r3, r3, #10
 800151c:	429a      	cmp	r2, r3
 800151e:	d101      	bne.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0ac      	b.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001524:	4b58      	ldr	r3, [pc, #352]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001526:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001528:	23c0      	movs	r3, #192	; 0xc0
 800152a:	029b      	lsls	r3, r3, #10
 800152c:	4013      	ands	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d03b      	beq.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	23c0      	movs	r3, #192	; 0xc0
 800153c:	029b      	lsls	r3, r3, #10
 800153e:	4013      	ands	r3, r2
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	429a      	cmp	r2, r3
 8001544:	d033      	beq.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2220      	movs	r2, #32
 800154c:	4013      	ands	r3, r2
 800154e:	d02e      	beq.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001550:	4b4d      	ldr	r3, [pc, #308]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001554:	4a4e      	ldr	r2, [pc, #312]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001556:	4013      	ands	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800155a:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800155c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800155e:	4b4a      	ldr	r3, [pc, #296]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	0309      	lsls	r1, r1, #12
 8001564:	430a      	orrs	r2, r1
 8001566:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001568:	4b47      	ldr	r3, [pc, #284]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800156a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800156c:	4b46      	ldr	r3, [pc, #280]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800156e:	4949      	ldr	r1, [pc, #292]	; (8001694 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001570:	400a      	ands	r2, r1
 8001572:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001574:	4b44      	ldr	r3, [pc, #272]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4013      	ands	r3, r2
 8001582:	d014      	beq.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7fe ffae 	bl	80004e4 <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800158c:	e009      	b.n	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7fe ffa9 	bl	80004e4 <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	4a3f      	ldr	r2, [pc, #252]	; (8001698 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e06d      	b.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015a2:	4b39      	ldr	r3, [pc, #228]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4013      	ands	r3, r2
 80015ac:	d0ef      	beq.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	23c0      	movs	r3, #192	; 0xc0
 80015b4:	029b      	lsls	r3, r3, #10
 80015b6:	401a      	ands	r2, r3
 80015b8:	23c0      	movs	r3, #192	; 0xc0
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	429a      	cmp	r2, r3
 80015be:	d10c      	bne.n	80015da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80015c0:	4b31      	ldr	r3, [pc, #196]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a35      	ldr	r2, [pc, #212]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	23c0      	movs	r3, #192	; 0xc0
 80015d0:	039b      	lsls	r3, r3, #14
 80015d2:	401a      	ands	r2, r3
 80015d4:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015d6:	430a      	orrs	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	23c0      	movs	r3, #192	; 0xc0
 80015e4:	029b      	lsls	r3, r3, #10
 80015e6:	401a      	ands	r2, r3
 80015e8:	4b27      	ldr	r3, [pc, #156]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015ea:	430a      	orrs	r2, r1
 80015ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ee:	2317      	movs	r3, #23
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d105      	bne.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80015fe:	4928      	ldr	r1, [pc, #160]	; (80016a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001600:	400a      	ands	r2, r1
 8001602:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2202      	movs	r2, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d009      	beq.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	220c      	movs	r2, #12
 8001614:	4393      	bics	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800161e:	430a      	orrs	r2, r1
 8001620:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2204      	movs	r2, #4
 8001628:	4013      	ands	r3, r2
 800162a:	d009      	beq.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001632:	4013      	ands	r3, r2
 8001634:	0019      	movs	r1, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800163c:	430a      	orrs	r2, r1
 800163e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2208      	movs	r2, #8
 8001646:	4013      	ands	r3, r2
 8001648:	d009      	beq.n	800165e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001650:	4013      	ands	r3, r2
 8001652:	0019      	movs	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800165a:	430a      	orrs	r2, r1
 800165c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	4013      	ands	r3, r2
 8001666:	d009      	beq.n	800167c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800166e:	4013      	ands	r3, r2
 8001670:	0019      	movs	r1, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001678:	430a      	orrs	r2, r1
 800167a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	0018      	movs	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	b006      	add	sp, #24
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	40021000 	.word	0x40021000
 800168c:	40007000 	.word	0x40007000
 8001690:	fffcffff 	.word	0xfffcffff
 8001694:	fff7ffff 	.word	0xfff7ffff
 8001698:	00001388 	.word	0x00001388
 800169c:	ffcfffff 	.word	0xffcfffff
 80016a0:	efffffff 	.word	0xefffffff
 80016a4:	fffff3ff 	.word	0xfffff3ff
 80016a8:	ffffcfff 	.word	0xffffcfff
 80016ac:	fff3ffff 	.word	0xfff3ffff

080016b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e051      	b.n	8001766 <HAL_SPI_Init+0xb6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2251      	movs	r2, #81	; 0x51
 80016cc:	5c9b      	ldrb	r3, [r3, r2]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d107      	bne.n	80016e4 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2250      	movs	r2, #80	; 0x50
 80016d8:	2100      	movs	r1, #0
 80016da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	0018      	movs	r0, r3
 80016e0:	f001 f834 	bl	800274c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2251      	movs	r2, #81	; 0x51
 80016e8:	2102      	movs	r1, #2
 80016ea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2140      	movs	r1, #64	; 0x40
 80016f8:	438a      	bics	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	431a      	orrs	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6999      	ldr	r1, [r3, #24]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	400b      	ands	r3, r1
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	431a      	orrs	r2, r3
 8001730:	0011      	movs	r1, r2
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	0c1b      	lsrs	r3, r3, #16
 8001744:	2204      	movs	r2, #4
 8001746:	4013      	ands	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2251      	movs	r2, #81	; 0x51
 8001760:	2101      	movs	r1, #1
 8001762:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b002      	add	sp, #8
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b088      	sub	sp, #32
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	1dbb      	adds	r3, r7, #6
 800177c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800177e:	231f      	movs	r3, #31
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2250      	movs	r2, #80	; 0x50
 800178a:	5c9b      	ldrb	r3, [r3, r2]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_SPI_Transmit+0x26>
 8001790:	2302      	movs	r3, #2
 8001792:	e136      	b.n	8001a02 <HAL_SPI_Transmit+0x294>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2250      	movs	r2, #80	; 0x50
 8001798:	2101      	movs	r1, #1
 800179a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800179c:	f7fe fea2 	bl	80004e4 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80017a4:	2316      	movs	r3, #22
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	1dba      	adds	r2, r7, #6
 80017aa:	8812      	ldrh	r2, [r2, #0]
 80017ac:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2251      	movs	r2, #81	; 0x51
 80017b2:	5c9b      	ldrb	r3, [r3, r2]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d004      	beq.n	80017c4 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80017ba:	231f      	movs	r3, #31
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	2202      	movs	r2, #2
 80017c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80017c2:	e113      	b.n	80019ec <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_SPI_Transmit+0x64>
 80017ca:	1dbb      	adds	r3, r7, #6
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d104      	bne.n	80017dc <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80017d2:	231f      	movs	r3, #31
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80017da:	e107      	b.n	80019ec <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2251      	movs	r2, #81	; 0x51
 80017e0:	2103      	movs	r1, #3
 80017e2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1dba      	adds	r2, r7, #6
 80017f4:	8812      	ldrh	r2, [r2, #0]
 80017f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1dba      	adds	r2, r7, #6
 80017fc:	8812      	ldrh	r2, [r2, #0]
 80017fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	429a      	cmp	r2, r3
 8001828:	d108      	bne.n	800183c <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	01c9      	lsls	r1, r1, #7
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2240      	movs	r2, #64	; 0x40
 8001844:	4013      	ands	r3, r2
 8001846:	2b40      	cmp	r3, #64	; 0x40
 8001848:	d007      	beq.n	800185a <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2140      	movs	r1, #64	; 0x40
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	429a      	cmp	r2, r3
 8001864:	d14e      	bne.n	8001904 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <HAL_SPI_Transmit+0x10a>
 800186e:	2316      	movs	r3, #22
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d13f      	bne.n	80018f8 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	881a      	ldrh	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	1c9a      	adds	r2, r3, #2
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001892:	b29b      	uxth	r3, r3
 8001894:	3b01      	subs	r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800189c:	e02c      	b.n	80018f8 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2202      	movs	r2, #2
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d112      	bne.n	80018d2 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	881a      	ldrh	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	1c9a      	adds	r2, r3, #2
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80018d0:	e012      	b.n	80018f8 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018d2:	f7fe fe07 	bl	80004e4 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d802      	bhi.n	80018e8 <HAL_SPI_Transmit+0x17a>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	d102      	bne.n	80018ee <HAL_SPI_Transmit+0x180>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d104      	bne.n	80018f8 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 80018ee:	231f      	movs	r3, #31
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	2203      	movs	r2, #3
 80018f4:	701a      	strb	r2, [r3, #0]
          goto error;
 80018f6:	e079      	b.n	80019ec <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1cd      	bne.n	800189e <HAL_SPI_Transmit+0x130>
 8001902:	e04f      	b.n	80019a4 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <HAL_SPI_Transmit+0x1a8>
 800190c:	2316      	movs	r3, #22
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d141      	bne.n	800199a <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	330c      	adds	r3, #12
 8001920:	7812      	ldrb	r2, [r2, #0]
 8001922:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001932:	b29b      	uxth	r3, r3
 8001934:	3b01      	subs	r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800193c:	e02d      	b.n	800199a <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	2b02      	cmp	r3, #2
 800194a:	d113      	bne.n	8001974 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	330c      	adds	r3, #12
 8001956:	7812      	ldrb	r2, [r2, #0]
 8001958:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001968:	b29b      	uxth	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	86da      	strh	r2, [r3, #54]	; 0x36
 8001972:	e012      	b.n	800199a <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001974:	f7fe fdb6 	bl	80004e4 <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d802      	bhi.n	800198a <HAL_SPI_Transmit+0x21c>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	d102      	bne.n	8001990 <HAL_SPI_Transmit+0x222>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d104      	bne.n	800199a <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8001990:	231f      	movs	r3, #31
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	2203      	movs	r2, #3
 8001996:	701a      	strb	r2, [r3, #0]
          goto error;
 8001998:	e028      	b.n	80019ec <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1cc      	bne.n	800193e <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	6839      	ldr	r1, [r7, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	0018      	movs	r0, r3
 80019ac:	f000 f89e 	bl	8001aec <SPI_EndRxTxTransaction>
 80019b0:	1e03      	subs	r3, r0, #0
 80019b2:	d002      	beq.n	80019ba <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2220      	movs	r2, #32
 80019b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10a      	bne.n	80019d8 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d004      	beq.n	80019ea <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80019e0:	231f      	movs	r3, #31
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e000      	b.n	80019ec <HAL_SPI_Transmit+0x27e>
  }

error:
 80019ea:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2251      	movs	r2, #81	; 0x51
 80019f0:	2101      	movs	r1, #1
 80019f2:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2250      	movs	r2, #80	; 0x50
 80019f8:	2100      	movs	r1, #0
 80019fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80019fc:	231f      	movs	r3, #31
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	781b      	ldrb	r3, [r3, #0]
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b008      	add	sp, #32
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	1dfb      	adds	r3, r7, #7
 8001a1a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a1c:	e050      	b.n	8001ac0 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	d04d      	beq.n	8001ac0 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001a24:	f7fe fd5e 	bl	80004e4 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d902      	bls.n	8001a3a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d142      	bne.n	8001ac0 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	21e0      	movs	r1, #224	; 0xe0
 8001a46:	438a      	bics	r2, r1
 8001a48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	2382      	movs	r3, #130	; 0x82
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d113      	bne.n	8001a7e <SPI_WaitFlagStateUntilTimeout+0x72>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d005      	beq.n	8001a6e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d107      	bne.n	8001a7e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2140      	movs	r1, #64	; 0x40
 8001a7a:	438a      	bics	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d110      	bne.n	8001aac <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4914      	ldr	r1, [pc, #80]	; (8001ae8 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8001a96:	400a      	ands	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	0189      	lsls	r1, r1, #6
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2251      	movs	r2, #81	; 0x51
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2250      	movs	r2, #80	; 0x50
 8001ab8:	2100      	movs	r1, #0
 8001aba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e00f      	b.n	8001ae0 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	425a      	negs	r2, r3
 8001ad0:	4153      	adcs	r3, r2
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d19f      	bne.n	8001a1e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b004      	add	sp, #16
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	ffffdfff 	.word	0xffffdfff

08001aec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	2382      	movs	r3, #130	; 0x82
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d112      	bne.n	8001b2a <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	f7ff ff7b 	bl	8001a0c <SPI_WaitFlagStateUntilTimeout>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d020      	beq.n	8001b5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	2220      	movs	r2, #32
 8001b20:	431a      	orrs	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e019      	b.n	8001b5e <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2251      	movs	r2, #81	; 0x51
 8001b2e:	5c9b      	ldrb	r3, [r3, r2]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	d112      	bne.n	8001b5c <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	0013      	movs	r3, r2
 8001b40:	2200      	movs	r2, #0
 8001b42:	2101      	movs	r1, #1
 8001b44:	f7ff ff62 	bl	8001a0c <SPI_WaitFlagStateUntilTimeout>
 8001b48:	1e03      	subs	r3, r0, #0
 8001b4a:	d007      	beq.n	8001b5c <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b50:	2220      	movs	r2, #32
 8001b52:	431a      	orrs	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e000      	b.n	8001b5e <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b004      	add	sp, #16
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e044      	b.n	8001c04 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d107      	bne.n	8001b92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2270      	movs	r2, #112	; 0x70
 8001b86:	2100      	movs	r1, #0
 8001b88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 fe21 	bl	80027d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2224      	movs	r2, #36	; 0x24
 8001b96:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 f830 	bl	8001c10 <UART_SetConfig>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e024      	b.n	8001c04 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f000 fafd 	bl	80021c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	490d      	ldr	r1, [pc, #52]	; (8001c0c <HAL_UART_Init+0xa4>)
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	212a      	movs	r1, #42	; 0x2a
 8001be6:	438a      	bics	r2, r1
 8001be8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f000 fb95 	bl	800232c <UART_CheckIdleState>
 8001c02:	0003      	movs	r3, r0
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	ffffb7ff 	.word	0xffffb7ff

08001c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c10:	b5b0      	push	{r4, r5, r7, lr}
 8001c12:	b08e      	sub	sp, #56	; 0x38
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001c18:	231b      	movs	r3, #27
 8001c1a:	2218      	movs	r2, #24
 8001c1c:	4694      	mov	ip, r2
 8001c1e:	44bc      	add	ip, r7
 8001c20:	4463      	add	r3, ip
 8001c22:	2210      	movs	r2, #16
 8001c24:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c2a:	2313      	movs	r3, #19
 8001c2c:	2218      	movs	r2, #24
 8001c2e:	4694      	mov	ip, r2
 8001c30:	44bc      	add	ip, r7
 8001c32:	4463      	add	r3, ip
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4ace      	ldr	r2, [pc, #824]	; (8001f94 <UART_SetConfig+0x384>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	0019      	movs	r1, r3
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4ac9      	ldr	r2, [pc, #804]	; (8001f98 <UART_SetConfig+0x388>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4ac3      	ldr	r2, [pc, #780]	; (8001f9c <UART_SetConfig+0x38c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d004      	beq.n	8001c9c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	4abf      	ldr	r2, [pc, #764]	; (8001fa0 <UART_SetConfig+0x390>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4abb      	ldr	r2, [pc, #748]	; (8001fa4 <UART_SetConfig+0x394>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d137      	bne.n	8001d2c <UART_SetConfig+0x11c>
 8001cbc:	4bba      	ldr	r3, [pc, #744]	; (8001fa8 <UART_SetConfig+0x398>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	220c      	movs	r2, #12
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d018      	beq.n	8001cfa <UART_SetConfig+0xea>
 8001cc8:	d802      	bhi.n	8001cd0 <UART_SetConfig+0xc0>
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <UART_SetConfig+0xca>
 8001cce:	e024      	b.n	8001d1a <UART_SetConfig+0x10a>
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d00a      	beq.n	8001cea <UART_SetConfig+0xda>
 8001cd4:	2b0c      	cmp	r3, #12
 8001cd6:	d018      	beq.n	8001d0a <UART_SetConfig+0xfa>
 8001cd8:	e01f      	b.n	8001d1a <UART_SetConfig+0x10a>
 8001cda:	231b      	movs	r3, #27
 8001cdc:	2218      	movs	r2, #24
 8001cde:	4694      	mov	ip, r2
 8001ce0:	44bc      	add	ip, r7
 8001ce2:	4463      	add	r3, ip
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	e06e      	b.n	8001dc8 <UART_SetConfig+0x1b8>
 8001cea:	231b      	movs	r3, #27
 8001cec:	2218      	movs	r2, #24
 8001cee:	4694      	mov	ip, r2
 8001cf0:	44bc      	add	ip, r7
 8001cf2:	4463      	add	r3, ip
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	e066      	b.n	8001dc8 <UART_SetConfig+0x1b8>
 8001cfa:	231b      	movs	r3, #27
 8001cfc:	2218      	movs	r2, #24
 8001cfe:	4694      	mov	ip, r2
 8001d00:	44bc      	add	ip, r7
 8001d02:	4463      	add	r3, ip
 8001d04:	2204      	movs	r2, #4
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	e05e      	b.n	8001dc8 <UART_SetConfig+0x1b8>
 8001d0a:	231b      	movs	r3, #27
 8001d0c:	2218      	movs	r2, #24
 8001d0e:	4694      	mov	ip, r2
 8001d10:	44bc      	add	ip, r7
 8001d12:	4463      	add	r3, ip
 8001d14:	2208      	movs	r2, #8
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	e056      	b.n	8001dc8 <UART_SetConfig+0x1b8>
 8001d1a:	231b      	movs	r3, #27
 8001d1c:	2218      	movs	r2, #24
 8001d1e:	4694      	mov	ip, r2
 8001d20:	44bc      	add	ip, r7
 8001d22:	4463      	add	r3, ip
 8001d24:	2210      	movs	r2, #16
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	e04d      	b.n	8001dc8 <UART_SetConfig+0x1b8>
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a9a      	ldr	r2, [pc, #616]	; (8001f9c <UART_SetConfig+0x38c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d141      	bne.n	8001dba <UART_SetConfig+0x1aa>
 8001d36:	4b9c      	ldr	r3, [pc, #624]	; (8001fa8 <UART_SetConfig+0x398>)
 8001d38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d3a:	23c0      	movs	r3, #192	; 0xc0
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2280      	movs	r2, #128	; 0x80
 8001d42:	00d2      	lsls	r2, r2, #3
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d01f      	beq.n	8001d88 <UART_SetConfig+0x178>
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	00d2      	lsls	r2, r2, #3
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d802      	bhi.n	8001d56 <UART_SetConfig+0x146>
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <UART_SetConfig+0x158>
 8001d54:	e028      	b.n	8001da8 <UART_SetConfig+0x198>
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00c      	beq.n	8001d78 <UART_SetConfig+0x168>
 8001d5e:	22c0      	movs	r2, #192	; 0xc0
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d018      	beq.n	8001d98 <UART_SetConfig+0x188>
 8001d66:	e01f      	b.n	8001da8 <UART_SetConfig+0x198>
 8001d68:	231b      	movs	r3, #27
 8001d6a:	2218      	movs	r2, #24
 8001d6c:	4694      	mov	ip, r2
 8001d6e:	44bc      	add	ip, r7
 8001d70:	4463      	add	r3, ip
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	e027      	b.n	8001dc8 <UART_SetConfig+0x1b8>
 8001d78:	231b      	movs	r3, #27
 8001d7a:	2218      	movs	r2, #24
 8001d7c:	4694      	mov	ip, r2
 8001d7e:	44bc      	add	ip, r7
 8001d80:	4463      	add	r3, ip
 8001d82:	2202      	movs	r2, #2
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	e01f      	b.n	8001dc8 <UART_SetConfig+0x1b8>
 8001d88:	231b      	movs	r3, #27
 8001d8a:	2218      	movs	r2, #24
 8001d8c:	4694      	mov	ip, r2
 8001d8e:	44bc      	add	ip, r7
 8001d90:	4463      	add	r3, ip
 8001d92:	2204      	movs	r2, #4
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	e017      	b.n	8001dc8 <UART_SetConfig+0x1b8>
 8001d98:	231b      	movs	r3, #27
 8001d9a:	2218      	movs	r2, #24
 8001d9c:	4694      	mov	ip, r2
 8001d9e:	44bc      	add	ip, r7
 8001da0:	4463      	add	r3, ip
 8001da2:	2208      	movs	r2, #8
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	e00f      	b.n	8001dc8 <UART_SetConfig+0x1b8>
 8001da8:	231b      	movs	r3, #27
 8001daa:	2218      	movs	r2, #24
 8001dac:	4694      	mov	ip, r2
 8001dae:	44bc      	add	ip, r7
 8001db0:	4463      	add	r3, ip
 8001db2:	2210      	movs	r2, #16
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	e006      	b.n	8001dc8 <UART_SetConfig+0x1b8>
 8001dba:	231b      	movs	r3, #27
 8001dbc:	2218      	movs	r2, #24
 8001dbe:	4694      	mov	ip, r2
 8001dc0:	44bc      	add	ip, r7
 8001dc2:	4463      	add	r3, ip
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a73      	ldr	r2, [pc, #460]	; (8001f9c <UART_SetConfig+0x38c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d000      	beq.n	8001dd4 <UART_SetConfig+0x1c4>
 8001dd2:	e083      	b.n	8001edc <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001dd4:	231b      	movs	r3, #27
 8001dd6:	2218      	movs	r2, #24
 8001dd8:	4694      	mov	ip, r2
 8001dda:	44bc      	add	ip, r7
 8001ddc:	4463      	add	r3, ip
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d00d      	beq.n	8001e00 <UART_SetConfig+0x1f0>
 8001de4:	dc02      	bgt.n	8001dec <UART_SetConfig+0x1dc>
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <UART_SetConfig+0x1e6>
 8001dea:	e01d      	b.n	8001e28 <UART_SetConfig+0x218>
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d012      	beq.n	8001e16 <UART_SetConfig+0x206>
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d015      	beq.n	8001e20 <UART_SetConfig+0x210>
 8001df4:	e018      	b.n	8001e28 <UART_SetConfig+0x218>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001df6:	f7ff fb07 	bl	8001408 <HAL_RCC_GetPCLK1Freq>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001dfe:	e01b      	b.n	8001e38 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e00:	4b69      	ldr	r3, [pc, #420]	; (8001fa8 <UART_SetConfig+0x398>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2210      	movs	r2, #16
 8001e06:	4013      	ands	r3, r2
 8001e08:	d002      	beq.n	8001e10 <UART_SetConfig+0x200>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8001e0a:	4b68      	ldr	r3, [pc, #416]	; (8001fac <UART_SetConfig+0x39c>)
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8001e0e:	e013      	b.n	8001e38 <UART_SetConfig+0x228>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001e10:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <UART_SetConfig+0x3a0>)
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001e14:	e010      	b.n	8001e38 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001e16:	f7ff fa69 	bl	80012ec <HAL_RCC_GetSysClockFreq>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001e1e:	e00b      	b.n	8001e38 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001e26:	e007      	b.n	8001e38 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001e28:	2313      	movs	r3, #19
 8001e2a:	2218      	movs	r2, #24
 8001e2c:	4694      	mov	ip, r2
 8001e2e:	44bc      	add	ip, r7
 8001e30:	4463      	add	r3, ip
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
        break;
 8001e36:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d100      	bne.n	8001e40 <UART_SetConfig+0x230>
 8001e3e:	e1a7      	b.n	8002190 <UART_SetConfig+0x580>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	0013      	movs	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	189b      	adds	r3, r3, r2
 8001e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d305      	bcc.n	8001e5c <UART_SetConfig+0x24c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d907      	bls.n	8001e6c <UART_SetConfig+0x25c>
      {
        ret = HAL_ERROR;
 8001e5c:	2313      	movs	r3, #19
 8001e5e:	2218      	movs	r2, #24
 8001e60:	4694      	mov	ip, r2
 8001e62:	44bc      	add	ip, r7
 8001e64:	4463      	add	r3, ip
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	e191      	b.n	8002190 <UART_SetConfig+0x580>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	6939      	ldr	r1, [r7, #16]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	000b      	movs	r3, r1
 8001e7a:	0e1b      	lsrs	r3, r3, #24
 8001e7c:	0010      	movs	r0, r2
 8001e7e:	0205      	lsls	r5, r0, #8
 8001e80:	431d      	orrs	r5, r3
 8001e82:	000b      	movs	r3, r1
 8001e84:	021c      	lsls	r4, r3, #8
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	085b      	lsrs	r3, r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68b8      	ldr	r0, [r7, #8]
 8001e94:	68f9      	ldr	r1, [r7, #12]
 8001e96:	1900      	adds	r0, r0, r4
 8001e98:	4169      	adcs	r1, r5
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f7fe f9ba 	bl	8000220 <__aeabi_uldivmod>
 8001eac:	0003      	movs	r3, r0
 8001eae:	000c      	movs	r4, r1
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb4:	4a3f      	ldr	r2, [pc, #252]	; (8001fb4 <UART_SetConfig+0x3a4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d908      	bls.n	8001ecc <UART_SetConfig+0x2bc>
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	4a3e      	ldr	r2, [pc, #248]	; (8001fb8 <UART_SetConfig+0x3a8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d804      	bhi.n	8001ecc <UART_SetConfig+0x2bc>
        {
          huart->Instance->BRR = usartdiv;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	e161      	b.n	8002190 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8001ecc:	2313      	movs	r3, #19
 8001ece:	2218      	movs	r2, #24
 8001ed0:	4694      	mov	ip, r2
 8001ed2:	44bc      	add	ip, r7
 8001ed4:	4463      	add	r3, ip
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	e159      	b.n	8002190 <UART_SetConfig+0x580>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	69da      	ldr	r2, [r3, #28]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d000      	beq.n	8001eea <UART_SetConfig+0x2da>
 8001ee8:	e0c4      	b.n	8002074 <UART_SetConfig+0x464>
  {
    switch (clocksource)
 8001eea:	231b      	movs	r3, #27
 8001eec:	2218      	movs	r2, #24
 8001eee:	4694      	mov	ip, r2
 8001ef0:	44bc      	add	ip, r7
 8001ef2:	4463      	add	r3, ip
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d900      	bls.n	8001efc <UART_SetConfig+0x2ec>
 8001efa:	e087      	b.n	800200c <UART_SetConfig+0x3fc>
 8001efc:	009a      	lsls	r2, r3, #2
 8001efe:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <UART_SetConfig+0x3ac>)
 8001f00:	18d3      	adds	r3, r2, r3
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f06:	f7ff fa7f 	bl	8001408 <HAL_RCC_GetPCLK1Freq>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	005a      	lsls	r2, r3, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	085b      	lsrs	r3, r3, #1
 8001f14:	18d2      	adds	r2, r2, r3
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	0010      	movs	r0, r2
 8001f1e:	f7fe f8f3 	bl	8000108 <__udivsi3>
 8001f22:	0003      	movs	r3, r0
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001f28:	e078      	b.n	800201c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f2a:	f7ff fa83 	bl	8001434 <HAL_RCC_GetPCLK2Freq>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	005a      	lsls	r2, r3, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	085b      	lsrs	r3, r3, #1
 8001f38:	18d2      	adds	r2, r2, r3
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	0019      	movs	r1, r3
 8001f40:	0010      	movs	r0, r2
 8001f42:	f7fe f8e1 	bl	8000108 <__udivsi3>
 8001f46:	0003      	movs	r3, r0
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001f4c:	e066      	b.n	800201c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <UART_SetConfig+0x398>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2210      	movs	r2, #16
 8001f54:	4013      	ands	r3, r2
 8001f56:	d00e      	beq.n	8001f76 <UART_SetConfig+0x366>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <UART_SetConfig+0x3b0>)
 8001f60:	189a      	adds	r2, r3, r2
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	0019      	movs	r1, r3
 8001f68:	0010      	movs	r0, r2
 8001f6a:	f7fe f8cd 	bl	8000108 <__udivsi3>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8001f74:	e052      	b.n	800201c <UART_SetConfig+0x40c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <UART_SetConfig+0x3b4>)
 8001f7e:	189a      	adds	r2, r3, r2
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	0019      	movs	r1, r3
 8001f86:	0010      	movs	r0, r2
 8001f88:	f7fe f8be 	bl	8000108 <__udivsi3>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001f92:	e043      	b.n	800201c <UART_SetConfig+0x40c>
 8001f94:	efff69f3 	.word	0xefff69f3
 8001f98:	ffffcfff 	.word	0xffffcfff
 8001f9c:	40004800 	.word	0x40004800
 8001fa0:	fffff4ff 	.word	0xfffff4ff
 8001fa4:	40004400 	.word	0x40004400
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	003d0900 	.word	0x003d0900
 8001fb0:	00f42400 	.word	0x00f42400
 8001fb4:	000002ff 	.word	0x000002ff
 8001fb8:	000fffff 	.word	0x000fffff
 8001fbc:	08002a04 	.word	0x08002a04
 8001fc0:	007a1200 	.word	0x007a1200
 8001fc4:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fc8:	f7ff f990 	bl	80012ec <HAL_RCC_GetSysClockFreq>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	005a      	lsls	r2, r3, #1
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	18d2      	adds	r2, r2, r3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	0019      	movs	r1, r3
 8001fde:	0010      	movs	r0, r2
 8001fe0:	f7fe f892 	bl	8000108 <__udivsi3>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001fea:	e017      	b.n	800201c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	085b      	lsrs	r3, r3, #1
 8001ff2:	2280      	movs	r2, #128	; 0x80
 8001ff4:	0252      	lsls	r2, r2, #9
 8001ff6:	189a      	adds	r2, r3, r2
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	0010      	movs	r0, r2
 8002000:	f7fe f882 	bl	8000108 <__udivsi3>
 8002004:	0003      	movs	r3, r0
 8002006:	b29b      	uxth	r3, r3
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800200a:	e007      	b.n	800201c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800200c:	2313      	movs	r3, #19
 800200e:	2218      	movs	r2, #24
 8002010:	4694      	mov	ip, r2
 8002012:	44bc      	add	ip, r7
 8002014:	4463      	add	r3, ip
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
        break;
 800201a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800201c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201e:	2b0f      	cmp	r3, #15
 8002020:	d920      	bls.n	8002064 <UART_SetConfig+0x454>
 8002022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002024:	4a62      	ldr	r2, [pc, #392]	; (80021b0 <UART_SetConfig+0x5a0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d81c      	bhi.n	8002064 <UART_SetConfig+0x454>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202c:	b29a      	uxth	r2, r3
 800202e:	200a      	movs	r0, #10
 8002030:	2418      	movs	r4, #24
 8002032:	193b      	adds	r3, r7, r4
 8002034:	181b      	adds	r3, r3, r0
 8002036:	210f      	movs	r1, #15
 8002038:	438a      	bics	r2, r1
 800203a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	085b      	lsrs	r3, r3, #1
 8002040:	b29b      	uxth	r3, r3
 8002042:	2207      	movs	r2, #7
 8002044:	4013      	ands	r3, r2
 8002046:	b299      	uxth	r1, r3
 8002048:	193b      	adds	r3, r7, r4
 800204a:	181b      	adds	r3, r3, r0
 800204c:	193a      	adds	r2, r7, r4
 800204e:	1812      	adds	r2, r2, r0
 8002050:	8812      	ldrh	r2, [r2, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	193a      	adds	r2, r7, r4
 800205c:	1812      	adds	r2, r2, r0
 800205e:	8812      	ldrh	r2, [r2, #0]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	e095      	b.n	8002190 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8002064:	2313      	movs	r3, #19
 8002066:	2218      	movs	r2, #24
 8002068:	4694      	mov	ip, r2
 800206a:	44bc      	add	ip, r7
 800206c:	4463      	add	r3, ip
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	e08d      	b.n	8002190 <UART_SetConfig+0x580>
    }
  }
  else
  {
    switch (clocksource)
 8002074:	231b      	movs	r3, #27
 8002076:	2218      	movs	r2, #24
 8002078:	4694      	mov	ip, r2
 800207a:	44bc      	add	ip, r7
 800207c:	4463      	add	r3, ip
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d86a      	bhi.n	800215a <UART_SetConfig+0x54a>
 8002084:	009a      	lsls	r2, r3, #2
 8002086:	4b4b      	ldr	r3, [pc, #300]	; (80021b4 <UART_SetConfig+0x5a4>)
 8002088:	18d3      	adds	r3, r2, r3
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800208e:	f7ff f9bb 	bl	8001408 <HAL_RCC_GetPCLK1Freq>
 8002092:	0002      	movs	r2, r0
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	18d2      	adds	r2, r2, r3
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0019      	movs	r1, r3
 80020a2:	0010      	movs	r0, r2
 80020a4:	f7fe f830 	bl	8000108 <__udivsi3>
 80020a8:	0003      	movs	r3, r0
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80020ae:	e05c      	b.n	800216a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80020b0:	f7ff f9c0 	bl	8001434 <HAL_RCC_GetPCLK2Freq>
 80020b4:	0002      	movs	r2, r0
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	18d2      	adds	r2, r2, r3
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	0019      	movs	r1, r3
 80020c4:	0010      	movs	r0, r2
 80020c6:	f7fe f81f 	bl	8000108 <__udivsi3>
 80020ca:	0003      	movs	r3, r0
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80020d0:	e04b      	b.n	800216a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020d2:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <UART_SetConfig+0x5a8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2210      	movs	r2, #16
 80020d8:	4013      	ands	r3, r2
 80020da:	d00e      	beq.n	80020fa <UART_SetConfig+0x4ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	085b      	lsrs	r3, r3, #1
 80020e2:	4a36      	ldr	r2, [pc, #216]	; (80021bc <UART_SetConfig+0x5ac>)
 80020e4:	189a      	adds	r2, r3, r2
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	0019      	movs	r1, r3
 80020ec:	0010      	movs	r0, r2
 80020ee:	f7fe f80b 	bl	8000108 <__udivsi3>
 80020f2:	0003      	movs	r3, r0
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80020f8:	e037      	b.n	800216a <UART_SetConfig+0x55a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	085b      	lsrs	r3, r3, #1
 8002100:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <UART_SetConfig+0x5b0>)
 8002102:	189a      	adds	r2, r3, r2
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	0019      	movs	r1, r3
 800210a:	0010      	movs	r0, r2
 800210c:	f7fd fffc 	bl	8000108 <__udivsi3>
 8002110:	0003      	movs	r3, r0
 8002112:	b29b      	uxth	r3, r3
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002116:	e028      	b.n	800216a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002118:	f7ff f8e8 	bl	80012ec <HAL_RCC_GetSysClockFreq>
 800211c:	0002      	movs	r2, r0
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	085b      	lsrs	r3, r3, #1
 8002124:	18d2      	adds	r2, r2, r3
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	0019      	movs	r1, r3
 800212c:	0010      	movs	r0, r2
 800212e:	f7fd ffeb 	bl	8000108 <__udivsi3>
 8002132:	0003      	movs	r3, r0
 8002134:	b29b      	uxth	r3, r3
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002138:	e017      	b.n	800216a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	0212      	lsls	r2, r2, #8
 8002144:	189a      	adds	r2, r3, r2
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	0019      	movs	r1, r3
 800214c:	0010      	movs	r0, r2
 800214e:	f7fd ffdb 	bl	8000108 <__udivsi3>
 8002152:	0003      	movs	r3, r0
 8002154:	b29b      	uxth	r3, r3
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002158:	e007      	b.n	800216a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800215a:	2313      	movs	r3, #19
 800215c:	2218      	movs	r2, #24
 800215e:	4694      	mov	ip, r2
 8002160:	44bc      	add	ip, r7
 8002162:	4463      	add	r3, ip
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
        break;
 8002168:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216c:	2b0f      	cmp	r3, #15
 800216e:	d908      	bls.n	8002182 <UART_SetConfig+0x572>
 8002170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002172:	4a0f      	ldr	r2, [pc, #60]	; (80021b0 <UART_SetConfig+0x5a0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d804      	bhi.n	8002182 <UART_SetConfig+0x572>
    {
      huart->Instance->BRR = usartdiv;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	e006      	b.n	8002190 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8002182:	2313      	movs	r3, #19
 8002184:	2218      	movs	r2, #24
 8002186:	4694      	mov	ip, r2
 8002188:	44bc      	add	ip, r7
 800218a:	4463      	add	r3, ip
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2200      	movs	r2, #0
 8002194:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	2200      	movs	r2, #0
 800219a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800219c:	2313      	movs	r3, #19
 800219e:	2218      	movs	r2, #24
 80021a0:	4694      	mov	ip, r2
 80021a2:	44bc      	add	ip, r7
 80021a4:	4463      	add	r3, ip
 80021a6:	781b      	ldrb	r3, [r3, #0]
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b00e      	add	sp, #56	; 0x38
 80021ae:	bdb0      	pop	{r4, r5, r7, pc}
 80021b0:	0000ffff 	.word	0x0000ffff
 80021b4:	08002a28 	.word	0x08002a28
 80021b8:	40021000 	.word	0x40021000
 80021bc:	003d0900 	.word	0x003d0900
 80021c0:	00f42400 	.word	0x00f42400

080021c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	2201      	movs	r2, #1
 80021d2:	4013      	ands	r3, r2
 80021d4:	d00b      	beq.n	80021ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4a4a      	ldr	r2, [pc, #296]	; (8002308 <UART_AdvFeatureConfig+0x144>)
 80021de:	4013      	ands	r3, r2
 80021e0:	0019      	movs	r1, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	2202      	movs	r2, #2
 80021f4:	4013      	ands	r3, r2
 80021f6:	d00b      	beq.n	8002210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a43      	ldr	r2, [pc, #268]	; (800230c <UART_AdvFeatureConfig+0x148>)
 8002200:	4013      	ands	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2204      	movs	r2, #4
 8002216:	4013      	ands	r3, r2
 8002218:	d00b      	beq.n	8002232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a3b      	ldr	r2, [pc, #236]	; (8002310 <UART_AdvFeatureConfig+0x14c>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	2208      	movs	r2, #8
 8002238:	4013      	ands	r3, r2
 800223a:	d00b      	beq.n	8002254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4a34      	ldr	r2, [pc, #208]	; (8002314 <UART_AdvFeatureConfig+0x150>)
 8002244:	4013      	ands	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	2210      	movs	r2, #16
 800225a:	4013      	ands	r3, r2
 800225c:	d00b      	beq.n	8002276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a2c      	ldr	r2, [pc, #176]	; (8002318 <UART_AdvFeatureConfig+0x154>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	2220      	movs	r2, #32
 800227c:	4013      	ands	r3, r2
 800227e:	d00b      	beq.n	8002298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4a25      	ldr	r2, [pc, #148]	; (800231c <UART_AdvFeatureConfig+0x158>)
 8002288:	4013      	ands	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	2240      	movs	r2, #64	; 0x40
 800229e:	4013      	ands	r3, r2
 80022a0:	d01d      	beq.n	80022de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <UART_AdvFeatureConfig+0x15c>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	0019      	movs	r1, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	035b      	lsls	r3, r3, #13
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d10b      	bne.n	80022de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4a15      	ldr	r2, [pc, #84]	; (8002324 <UART_AdvFeatureConfig+0x160>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	0019      	movs	r1, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	2280      	movs	r2, #128	; 0x80
 80022e4:	4013      	ands	r3, r2
 80022e6:	d00b      	beq.n	8002300 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <UART_AdvFeatureConfig+0x164>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	605a      	str	r2, [r3, #4]
  }
}
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}
 8002308:	fffdffff 	.word	0xfffdffff
 800230c:	fffeffff 	.word	0xfffeffff
 8002310:	fffbffff 	.word	0xfffbffff
 8002314:	ffff7fff 	.word	0xffff7fff
 8002318:	ffffefff 	.word	0xffffefff
 800231c:	ffffdfff 	.word	0xffffdfff
 8002320:	ffefffff 	.word	0xffefffff
 8002324:	ff9fffff 	.word	0xff9fffff
 8002328:	fff7ffff 	.word	0xfff7ffff

0800232c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af02      	add	r7, sp, #8
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800233a:	f7fe f8d3 	bl	80004e4 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2208      	movs	r2, #8
 800234a:	4013      	ands	r3, r2
 800234c:	2b08      	cmp	r3, #8
 800234e:	d10d      	bne.n	800236c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	0399      	lsls	r1, r3, #14
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <UART_CheckIdleState+0x88>)
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	0013      	movs	r3, r2
 800235e:	2200      	movs	r2, #0
 8002360:	f000 f82a 	bl	80023b8 <UART_WaitOnFlagUntilTimeout>
 8002364:	1e03      	subs	r3, r0, #0
 8002366:	d001      	beq.n	800236c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e01f      	b.n	80023ac <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2204      	movs	r2, #4
 8002374:	4013      	ands	r3, r2
 8002376:	2b04      	cmp	r3, #4
 8002378:	d10d      	bne.n	8002396 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	03d9      	lsls	r1, r3, #15
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <UART_CheckIdleState+0x88>)
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	0013      	movs	r3, r2
 8002388:	2200      	movs	r2, #0
 800238a:	f000 f815 	bl	80023b8 <UART_WaitOnFlagUntilTimeout>
 800238e:	1e03      	subs	r3, r0, #0
 8002390:	d001      	beq.n	8002396 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e00a      	b.n	80023ac <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2220      	movs	r2, #32
 800239a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2270      	movs	r2, #112	; 0x70
 80023a6:	2100      	movs	r1, #0
 80023a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b004      	add	sp, #16
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	01ffffff 	.word	0x01ffffff

080023b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	1dfb      	adds	r3, r7, #7
 80023c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023c8:	e029      	b.n	800241e <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	3301      	adds	r3, #1
 80023ce:	d026      	beq.n	800241e <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d0:	f7fe f888 	bl	80004e4 <HAL_GetTick>
 80023d4:	0002      	movs	r2, r0
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d302      	bcc.n	80023e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11b      	bne.n	800241e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4915      	ldr	r1, [pc, #84]	; (8002448 <UART_WaitOnFlagUntilTimeout+0x90>)
 80023f2:	400a      	ands	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	438a      	bics	r2, r1
 8002404:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2270      	movs	r2, #112	; 0x70
 8002416:	2100      	movs	r1, #0
 8002418:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e00f      	b.n	800243e <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	4013      	ands	r3, r2
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	425a      	negs	r2, r3
 800242e:	4153      	adcs	r3, r2
 8002430:	b2db      	uxtb	r3, r3
 8002432:	001a      	movs	r2, r3
 8002434:	1dfb      	adds	r3, r7, #7
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d0c6      	beq.n	80023ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	0018      	movs	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	b004      	add	sp, #16
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	fffffe5f 	.word	0xfffffe5f

0800244c <reset_device>:
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);


static void reset_device(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, SI446x_SDN_Pin, GPIO_PIN_SET);
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <reset_device+0x30>)
 8002452:	2201      	movs	r2, #1
 8002454:	2140      	movs	r1, #64	; 0x40
 8002456:	0018      	movs	r0, r3
 8002458:	f7fe fa86 	bl	8000968 <HAL_GPIO_WritePin>
    HAL_Delay(50); // Plenty of time to accomodate Power-on-reset on chip.
 800245c:	2032      	movs	r0, #50	; 0x32
 800245e:	f7fe f84b 	bl	80004f8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, SI446x_SDN_Pin, GPIO_PIN_RESET);
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <reset_device+0x30>)
 8002464:	2200      	movs	r2, #0
 8002466:	2140      	movs	r1, #64	; 0x40
 8002468:	0018      	movs	r0, r3
 800246a:	f7fe fa7d 	bl	8000968 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800246e:	2032      	movs	r0, #50	; 0x32
 8002470:	f7fe f842 	bl	80004f8 <HAL_Delay>
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	50000400 	.word	0x50000400

08002480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
    // Initialization of HAL Libraries, Including UART, SPI, and GPIO.
    HAL_Init();
 8002484:	f7fd ffd8 	bl	8000438 <HAL_Init>

    SystemClock_Config();
 8002488:	f000 f81c 	bl	80024c4 <SystemClock_Config>

    MX_GPIO_Init();
 800248c:	f000 f8f4 	bl	8002678 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8002490:	f000 f8c2 	bl	8002618 <MX_USART2_UART_Init>
    MX_SPI1_Init();
 8002494:	f000 f888 	bl	80025a8 <MX_SPI1_Init>

    //
    reset_device();
 8002498:	f7ff ffd8 	bl	800244c <reset_device>

    HAL_SPI_Transmit(&hspi1, 0x44, 1, 0xFFFFFFFF);
 800249c:	2301      	movs	r3, #1
 800249e:	425b      	negs	r3, r3
 80024a0:	4807      	ldr	r0, [pc, #28]	; (80024c0 <main+0x40>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	2144      	movs	r1, #68	; 0x44
 80024a6:	f7ff f962 	bl	800176e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, 0xFF, 1, 0xFFFFFFFF);
 80024aa:	2301      	movs	r3, #1
 80024ac:	425b      	negs	r3, r3
 80024ae:	4804      	ldr	r0, [pc, #16]	; (80024c0 <main+0x40>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	21ff      	movs	r1, #255	; 0xff
 80024b4:	f7ff f95b 	bl	800176e <HAL_SPI_Transmit>

    while (1)
    {


        HAL_Delay(20);
 80024b8:	2014      	movs	r0, #20
 80024ba:	f7fe f81d 	bl	80004f8 <HAL_Delay>
 80024be:	e7fb      	b.n	80024b8 <main+0x38>
 80024c0:	20000024 	.word	0x20000024

080024c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b099      	sub	sp, #100	; 0x64
 80024c8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ca:	242c      	movs	r4, #44	; 0x2c
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	0018      	movs	r0, r3
 80024d0:	2334      	movs	r3, #52	; 0x34
 80024d2:	001a      	movs	r2, r3
 80024d4:	2100      	movs	r1, #0
 80024d6:	f000 fa81 	bl	80029dc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024da:	2318      	movs	r3, #24
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	0018      	movs	r0, r3
 80024e0:	2314      	movs	r3, #20
 80024e2:	001a      	movs	r2, r3
 80024e4:	2100      	movs	r1, #0
 80024e6:	f000 fa79 	bl	80029dc <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024ea:	003b      	movs	r3, r7
 80024ec:	0018      	movs	r0, r3
 80024ee:	2318      	movs	r3, #24
 80024f0:	001a      	movs	r2, r3
 80024f2:	2100      	movs	r1, #0
 80024f4:	f000 fa72 	bl	80029dc <memset>

    /** Configure the main internal regulator output voltage
    */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f8:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <SystemClock_Config+0xdc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a29      	ldr	r2, [pc, #164]	; (80025a4 <SystemClock_Config+0xe0>)
 80024fe:	401a      	ands	r2, r3
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <SystemClock_Config+0xdc>)
 8002502:	2180      	movs	r1, #128	; 0x80
 8002504:	0109      	lsls	r1, r1, #4
 8002506:	430a      	orrs	r2, r1
 8002508:	601a      	str	r2, [r3, #0]
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800250a:	0021      	movs	r1, r4
 800250c:	187b      	adds	r3, r7, r1
 800250e:	2202      	movs	r2, #2
 8002510:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	2201      	movs	r2, #1
 8002516:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002518:	187b      	adds	r3, r7, r1
 800251a:	2210      	movs	r2, #16
 800251c:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800251e:	187b      	adds	r3, r7, r1
 8002520:	2202      	movs	r2, #2
 8002522:	625a      	str	r2, [r3, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002524:	187b      	adds	r3, r7, r1
 8002526:	2200      	movs	r2, #0
 8002528:	629a      	str	r2, [r3, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800252a:	187b      	adds	r3, r7, r1
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	02d2      	lsls	r2, r2, #11
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002532:	187b      	adds	r3, r7, r1
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	03d2      	lsls	r2, r2, #15
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800253a:	187b      	adds	r3, r7, r1
 800253c:	0018      	movs	r0, r3
 800253e:	f7fe fa31 	bl	80009a4 <HAL_RCC_OscConfig>
 8002542:	1e03      	subs	r3, r0, #0
 8002544:	d001      	beq.n	800254a <SystemClock_Config+0x86>
    {
        Error_Handler();
 8002546:	f000 f8e7 	bl	8002718 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800254a:	2118      	movs	r1, #24
 800254c:	187b      	adds	r3, r7, r1
 800254e:	220f      	movs	r2, #15
 8002550:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002552:	187b      	adds	r3, r7, r1
 8002554:	2203      	movs	r2, #3
 8002556:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002558:	187b      	adds	r3, r7, r1
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800255e:	187b      	adds	r3, r7, r1
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002564:	187b      	adds	r3, r7, r1
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800256a:	187b      	adds	r3, r7, r1
 800256c:	2101      	movs	r1, #1
 800256e:	0018      	movs	r0, r3
 8002570:	f7fe fd92 	bl	8001098 <HAL_RCC_ClockConfig>
 8002574:	1e03      	subs	r3, r0, #0
 8002576:	d001      	beq.n	800257c <SystemClock_Config+0xb8>
    {
        Error_Handler();
 8002578:	f000 f8ce 	bl	8002718 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800257c:	003b      	movs	r3, r7
 800257e:	2202      	movs	r2, #2
 8002580:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002582:	003b      	movs	r3, r7
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002588:	003b      	movs	r3, r7
 800258a:	0018      	movs	r0, r3
 800258c:	f7fe ff68 	bl	8001460 <HAL_RCCEx_PeriphCLKConfig>
 8002590:	1e03      	subs	r3, r0, #0
 8002592:	d001      	beq.n	8002598 <SystemClock_Config+0xd4>
    {
        Error_Handler();
 8002594:	f000 f8c0 	bl	8002718 <Error_Handler>
    }
}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b019      	add	sp, #100	; 0x64
 800259e:	bd90      	pop	{r4, r7, pc}
 80025a0:	40007000 	.word	0x40007000
 80025a4:	ffffe7ff 	.word	0xffffe7ff

080025a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 80025ac:	4b18      	ldr	r3, [pc, #96]	; (8002610 <MX_SPI1_Init+0x68>)
 80025ae:	4a19      	ldr	r2, [pc, #100]	; (8002614 <MX_SPI1_Init+0x6c>)
 80025b0:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80025b2:	4b17      	ldr	r3, [pc, #92]	; (8002610 <MX_SPI1_Init+0x68>)
 80025b4:	2282      	movs	r2, #130	; 0x82
 80025b6:	0052      	lsls	r2, r2, #1
 80025b8:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <MX_SPI1_Init+0x68>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <MX_SPI1_Init+0x68>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <MX_SPI1_Init+0x68>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025cc:	4b10      	ldr	r3, [pc, #64]	; (8002610 <MX_SPI1_Init+0x68>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80025d2:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <MX_SPI1_Init+0x68>)
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	02d2      	lsls	r2, r2, #11
 80025d8:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <MX_SPI1_Init+0x68>)
 80025dc:	2200      	movs	r2, #0
 80025de:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <MX_SPI1_Init+0x68>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <MX_SPI1_Init+0x68>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <MX_SPI1_Init+0x68>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <MX_SPI1_Init+0x68>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <MX_SPI1_Init+0x68>)
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff f858 	bl	80016b0 <HAL_SPI_Init>
 8002600:	1e03      	subs	r3, r0, #0
 8002602:	d001      	beq.n	8002608 <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 8002604:	f000 f888 	bl	8002718 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	20000024 	.word	0x20000024
 8002614:	40013000 	.word	0x40013000

08002618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <MX_USART2_UART_Init+0x58>)
 800261e:	4a15      	ldr	r2, [pc, #84]	; (8002674 <MX_USART2_UART_Init+0x5c>)
 8002620:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <MX_USART2_UART_Init+0x58>)
 8002624:	22e1      	movs	r2, #225	; 0xe1
 8002626:	0252      	lsls	r2, r2, #9
 8002628:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <MX_USART2_UART_Init+0x58>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <MX_USART2_UART_Init+0x58>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <MX_USART2_UART_Init+0x58>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <MX_USART2_UART_Init+0x58>)
 800263e:	220c      	movs	r2, #12
 8002640:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <MX_USART2_UART_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <MX_USART2_UART_Init+0x58>)
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <MX_USART2_UART_Init+0x58>)
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <MX_USART2_UART_Init+0x58>)
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <MX_USART2_UART_Init+0x58>)
 800265c:	0018      	movs	r0, r3
 800265e:	f7ff fa83 	bl	8001b68 <HAL_UART_Init>
 8002662:	1e03      	subs	r3, r0, #0
 8002664:	d001      	beq.n	800266a <MX_USART2_UART_Init+0x52>
    {
        Error_Handler();
 8002666:	f000 f857 	bl	8002718 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	2000007c 	.word	0x2000007c
 8002674:	40004400 	.word	0x40004400

08002678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b089      	sub	sp, #36	; 0x24
 800267c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267e:	240c      	movs	r4, #12
 8002680:	193b      	adds	r3, r7, r4
 8002682:	0018      	movs	r0, r3
 8002684:	2314      	movs	r3, #20
 8002686:	001a      	movs	r2, r3
 8002688:	2100      	movs	r1, #0
 800268a:	f000 f9a7 	bl	80029dc <memset>

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <MX_GPIO_Init+0x98>)
 8002690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002692:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <MX_GPIO_Init+0x98>)
 8002694:	2104      	movs	r1, #4
 8002696:	430a      	orrs	r2, r1
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <MX_GPIO_Init+0x98>)
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	2204      	movs	r2, #4
 80026a0:	4013      	ands	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <MX_GPIO_Init+0x98>)
 80026a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026aa:	4b19      	ldr	r3, [pc, #100]	; (8002710 <MX_GPIO_Init+0x98>)
 80026ac:	2101      	movs	r1, #1
 80026ae:	430a      	orrs	r2, r1
 80026b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <MX_GPIO_Init+0x98>)
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	2201      	movs	r2, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <MX_GPIO_Init+0x98>)
 80026c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <MX_GPIO_Init+0x98>)
 80026c4:	2102      	movs	r1, #2
 80026c6:	430a      	orrs	r2, r1
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <MX_GPIO_Init+0x98>)
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	2202      	movs	r2, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD3_Pin|SI446x_SDN_Pin, GPIO_PIN_RESET);
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <MX_GPIO_Init+0x9c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	2148      	movs	r1, #72	; 0x48
 80026dc:	0018      	movs	r0, r3
 80026de:	f7fe f943 	bl	8000968 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LD3_Pin SI446x_SDN_Pin */
    GPIO_InitStruct.Pin = LD3_Pin|SI446x_SDN_Pin;
 80026e2:	0021      	movs	r1, r4
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	2248      	movs	r2, #72	; 0x48
 80026e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	2201      	movs	r2, #1
 80026ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	2200      	movs	r2, #0
 80026fa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	4a05      	ldr	r2, [pc, #20]	; (8002714 <MX_GPIO_Init+0x9c>)
 8002700:	0019      	movs	r1, r3
 8002702:	0010      	movs	r0, r2
 8002704:	f7fd ffca 	bl	800069c <HAL_GPIO_Init>

}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b009      	add	sp, #36	; 0x24
 800270e:	bd90      	pop	{r4, r7, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	50000400 	.word	0x50000400

08002718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002728:	4b07      	ldr	r3, [pc, #28]	; (8002748 <HAL_MspInit+0x24>)
 800272a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_MspInit+0x24>)
 800272e:	2101      	movs	r1, #1
 8002730:	430a      	orrs	r2, r1
 8002732:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <HAL_MspInit+0x24>)
 8002736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <HAL_MspInit+0x24>)
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	0549      	lsls	r1, r1, #21
 800273e:	430a      	orrs	r2, r1
 8002740:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	230c      	movs	r3, #12
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	0018      	movs	r0, r3
 800275a:	2314      	movs	r3, #20
 800275c:	001a      	movs	r2, r3
 800275e:	2100      	movs	r1, #0
 8002760:	f000 f93c 	bl	80029dc <memset>
  if(hspi->Instance==SPI1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a18      	ldr	r2, [pc, #96]	; (80027cc <HAL_SPI_MspInit+0x80>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d129      	bne.n	80027c2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800276e:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <HAL_SPI_MspInit+0x84>)
 8002770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <HAL_SPI_MspInit+0x84>)
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	0149      	lsls	r1, r1, #5
 8002778:	430a      	orrs	r2, r1
 800277a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_SPI_MspInit+0x84>)
 800277e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_SPI_MspInit+0x84>)
 8002782:	2101      	movs	r1, #1
 8002784:	430a      	orrs	r2, r1
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_SPI_MspInit+0x84>)
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	2201      	movs	r2, #1
 800278e:	4013      	ands	r3, r2
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002794:	210c      	movs	r1, #12
 8002796:	187b      	adds	r3, r7, r1
 8002798:	22f0      	movs	r2, #240	; 0xf0
 800279a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	187b      	adds	r3, r7, r1
 800279e:	2202      	movs	r2, #2
 80027a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	2203      	movs	r2, #3
 80027ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b4:	187a      	adds	r2, r7, r1
 80027b6:	23a0      	movs	r3, #160	; 0xa0
 80027b8:	05db      	lsls	r3, r3, #23
 80027ba:	0011      	movs	r1, r2
 80027bc:	0018      	movs	r0, r3
 80027be:	f7fd ff6d 	bl	800069c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b008      	add	sp, #32
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	40013000 	.word	0x40013000
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	230c      	movs	r3, #12
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	0018      	movs	r0, r3
 80027e2:	2314      	movs	r3, #20
 80027e4:	001a      	movs	r2, r3
 80027e6:	2100      	movs	r1, #0
 80027e8:	f000 f8f8 	bl	80029dc <memset>
  if(huart->Instance==USART2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a18      	ldr	r2, [pc, #96]	; (8002854 <HAL_UART_MspInit+0x80>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d129      	bne.n	800284a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_UART_MspInit+0x84>)
 80027f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fa:	4b17      	ldr	r3, [pc, #92]	; (8002858 <HAL_UART_MspInit+0x84>)
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	0289      	lsls	r1, r1, #10
 8002800:	430a      	orrs	r2, r1
 8002802:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002804:	4b14      	ldr	r3, [pc, #80]	; (8002858 <HAL_UART_MspInit+0x84>)
 8002806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_UART_MspInit+0x84>)
 800280a:	2101      	movs	r1, #1
 800280c:	430a      	orrs	r2, r1
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_UART_MspInit+0x84>)
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	2201      	movs	r2, #1
 8002816:	4013      	ands	r3, r2
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800281c:	210c      	movs	r1, #12
 800281e:	187b      	adds	r3, r7, r1
 8002820:	4a0e      	ldr	r2, [pc, #56]	; (800285c <HAL_UART_MspInit+0x88>)
 8002822:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	187b      	adds	r3, r7, r1
 8002826:	2202      	movs	r2, #2
 8002828:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	187b      	adds	r3, r7, r1
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	187b      	adds	r3, r7, r1
 8002832:	2203      	movs	r2, #3
 8002834:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002836:	187b      	adds	r3, r7, r1
 8002838:	2204      	movs	r2, #4
 800283a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283c:	187a      	adds	r2, r7, r1
 800283e:	23a0      	movs	r3, #160	; 0xa0
 8002840:	05db      	lsls	r3, r3, #23
 8002842:	0011      	movs	r1, r2
 8002844:	0018      	movs	r0, r3
 8002846:	f7fd ff29 	bl	800069c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b008      	add	sp, #32
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	40004400 	.word	0x40004400
 8002858:	40021000 	.word	0x40021000
 800285c:	00008004 	.word	0x00008004

08002860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286e:	e7fe      	b.n	800286e <HardFault_Handler+0x4>

08002870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002888:	f7fd fe20 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002898:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <SystemInit+0x64>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <SystemInit+0x64>)
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	0049      	lsls	r1, r1, #1
 80028a2:	430a      	orrs	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80028a6:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <SystemInit+0x64>)
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <SystemInit+0x64>)
 80028ac:	4913      	ldr	r1, [pc, #76]	; (80028fc <SystemInit+0x68>)
 80028ae:	400a      	ands	r2, r1
 80028b0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <SystemInit+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <SystemInit+0x64>)
 80028b8:	4911      	ldr	r1, [pc, #68]	; (8002900 <SystemInit+0x6c>)
 80028ba:	400a      	ands	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <SystemInit+0x64>)
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <SystemInit+0x64>)
 80028c4:	2101      	movs	r1, #1
 80028c6:	438a      	bics	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <SystemInit+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <SystemInit+0x64>)
 80028d0:	490c      	ldr	r1, [pc, #48]	; (8002904 <SystemInit+0x70>)
 80028d2:	400a      	ands	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80028d6:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <SystemInit+0x64>)
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <SystemInit+0x64>)
 80028dc:	490a      	ldr	r1, [pc, #40]	; (8002908 <SystemInit+0x74>)
 80028de:	400a      	ands	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <SystemInit+0x64>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <SystemInit+0x78>)
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	0512      	lsls	r2, r2, #20
 80028ee:	609a      	str	r2, [r3, #8]
#endif
}
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	40021000 	.word	0x40021000
 80028fc:	88ff400c 	.word	0x88ff400c
 8002900:	fef6fff6 	.word	0xfef6fff6
 8002904:	fffbffff 	.word	0xfffbffff
 8002908:	ff02ffff 	.word	0xff02ffff
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002910:	4813      	ldr	r0, [pc, #76]	; (8002960 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002912:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002914:	4813      	ldr	r0, [pc, #76]	; (8002964 <LoopForever+0x6>)
    LDR R1, [R0]
 8002916:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002918:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800291a:	4a13      	ldr	r2, [pc, #76]	; (8002968 <LoopForever+0xa>)
    CMP R1, R2
 800291c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800291e:	d105      	bne.n	800292c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8002920:	4812      	ldr	r0, [pc, #72]	; (800296c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002922:	4913      	ldr	r1, [pc, #76]	; (8002970 <LoopForever+0x12>)
    STR R1, [R0]
 8002924:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002926:	4813      	ldr	r0, [pc, #76]	; (8002974 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002928:	4913      	ldr	r1, [pc, #76]	; (8002978 <LoopForever+0x1a>)
    STR R1, [R0]
 800292a:	6001      	str	r1, [r0, #0]

0800292c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800292c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800292e:	e003      	b.n	8002938 <LoopCopyDataInit>

08002930 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8002932:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002934:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002936:	3104      	adds	r1, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002938:	4811      	ldr	r0, [pc, #68]	; (8002980 <LoopForever+0x22>)
  ldr  r3, =_edata
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <LoopForever+0x26>)
  adds  r2, r0, r1
 800293c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800293e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002940:	d3f6      	bcc.n	8002930 <CopyDataInit>
  ldr  r2, =_sbss
 8002942:	4a11      	ldr	r2, [pc, #68]	; (8002988 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8002944:	e002      	b.n	800294c <LoopFillZerobss>

08002946 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002946:	2300      	movs	r3, #0
  str  r3, [r2]
 8002948:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800294a:	3204      	adds	r2, #4

0800294c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <LoopForever+0x2e>)
  cmp  r2, r3
 800294e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002950:	d3f9      	bcc.n	8002946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002952:	f7ff ff9f 	bl	8002894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002956:	f000 f81d 	bl	8002994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295a:	f7ff fd91 	bl	8002480 <main>

0800295e <LoopForever>:

LoopForever:
    b LoopForever
 800295e:	e7fe      	b.n	800295e <LoopForever>
   ldr   r0, =_estack
 8002960:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8002964:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002968:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800296c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002970:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002974:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002978:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 800297c:	08002a80 	.word	0x08002a80
  ldr  r0, =_sdata
 8002980:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002984:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8002988:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 800298c:	200000fc 	.word	0x200000fc

08002990 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002990:	e7fe      	b.n	8002990 <ADC1_COMP_IRQHandler>
	...

08002994 <__libc_init_array>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	2600      	movs	r6, #0
 8002998:	4d0c      	ldr	r5, [pc, #48]	; (80029cc <__libc_init_array+0x38>)
 800299a:	4c0d      	ldr	r4, [pc, #52]	; (80029d0 <__libc_init_array+0x3c>)
 800299c:	1b64      	subs	r4, r4, r5
 800299e:	10a4      	asrs	r4, r4, #2
 80029a0:	42a6      	cmp	r6, r4
 80029a2:	d109      	bne.n	80029b8 <__libc_init_array+0x24>
 80029a4:	2600      	movs	r6, #0
 80029a6:	f000 f821 	bl	80029ec <_init>
 80029aa:	4d0a      	ldr	r5, [pc, #40]	; (80029d4 <__libc_init_array+0x40>)
 80029ac:	4c0a      	ldr	r4, [pc, #40]	; (80029d8 <__libc_init_array+0x44>)
 80029ae:	1b64      	subs	r4, r4, r5
 80029b0:	10a4      	asrs	r4, r4, #2
 80029b2:	42a6      	cmp	r6, r4
 80029b4:	d105      	bne.n	80029c2 <__libc_init_array+0x2e>
 80029b6:	bd70      	pop	{r4, r5, r6, pc}
 80029b8:	00b3      	lsls	r3, r6, #2
 80029ba:	58eb      	ldr	r3, [r5, r3]
 80029bc:	4798      	blx	r3
 80029be:	3601      	adds	r6, #1
 80029c0:	e7ee      	b.n	80029a0 <__libc_init_array+0xc>
 80029c2:	00b3      	lsls	r3, r6, #2
 80029c4:	58eb      	ldr	r3, [r5, r3]
 80029c6:	4798      	blx	r3
 80029c8:	3601      	adds	r6, #1
 80029ca:	e7f2      	b.n	80029b2 <__libc_init_array+0x1e>
 80029cc:	08002a78 	.word	0x08002a78
 80029d0:	08002a78 	.word	0x08002a78
 80029d4:	08002a78 	.word	0x08002a78
 80029d8:	08002a7c 	.word	0x08002a7c

080029dc <memset>:
 80029dc:	0003      	movs	r3, r0
 80029de:	1812      	adds	r2, r2, r0
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d100      	bne.n	80029e6 <memset+0xa>
 80029e4:	4770      	bx	lr
 80029e6:	7019      	strb	r1, [r3, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	e7f9      	b.n	80029e0 <memset+0x4>

080029ec <_init>:
 80029ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f2:	bc08      	pop	{r3}
 80029f4:	469e      	mov	lr, r3
 80029f6:	4770      	bx	lr

080029f8 <_fini>:
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fe:	bc08      	pop	{r3}
 8002a00:	469e      	mov	lr, r3
 8002a02:	4770      	bx	lr
